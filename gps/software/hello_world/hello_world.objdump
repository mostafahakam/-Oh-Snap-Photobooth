
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00012134 memsz 0x00012134 flags r-x
    LOAD off    0x00013154 vaddr 0x08012154 paddr 0x08013d08 align 2**12
         filesz 0x00001bb4 memsz 0x00001bb4 flags rw-
    LOAD off    0x000158bc vaddr 0x080158bc paddr 0x080158bc align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001181c  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000077c  080119d8  080119d8  000129d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bb4  08012154  08013d08  00013154  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  080158bc  080158bc  000158bc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00014d08  2**0
                  CONTENTS
  7 .SDRAM        00000000  08015a18  08015a18  00014d08  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014d08  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f00  00000000  00000000  00014d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002b59c  00000000  00000000  00015c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ac78  00000000  00000000  000411cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d086  00000000  00000000  0004be44  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002644  00000000  00000000  00058ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000039a7  00000000  00000000  0005b510  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017c79  00000000  00000000  0005eeb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00076b30  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001370  00000000  00000000  00076b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007b613  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0007b616  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007b622  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007b623  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0007b624  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0007b62f  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0007b63a  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  0007b645  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000002a  00000000  00000000  0007b64d  2**0
                  CONTENTS, READONLY
 27 .jdi          00003fa0  00000000  00000000  0007b677  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000751fd  00000000  00000000  0007f617  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
080119d8 l    d  .rodata	00000000 .rodata
08012154 l    d  .rwdata	00000000 .rwdata
080158bc l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08015a18 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08001348 l     F .text	00000008 __fp_lock
08001350 l     F .text	00000008 __fp_unlock
08001364 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
08012154 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
08003094 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
08011c12 l     O .rodata	00000010 zeroes.4181
08011c22 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
08011d33 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
08005b54 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
080129a0 l     O .rwdata	00000020 lc_ctype_charset
08012980 l     O .rwdata	00000020 lc_message_charset
080129c0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
08011ed0 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08009648 l     F .text	000000fc __sprint_r.part.0
08012004 l     O .rodata	00000010 blanks.4125
08011ff4 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800be24 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800e774 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800e89c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800e8c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800e9d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800eacc l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800ebb0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0800ed94 l     F .text	00000050 alt_get_errno
0800ede4 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0800f038 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08013cf8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0800f2ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800f43c l     F .text	00000038 alt_dev_reg
08012ba0 l     O .rwdata	00001060 jtag_uart_0
08013c00 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800f74c l     F .text	00000204 altera_avalon_jtag_uart_irq
0800f950 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800ff70 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
08010224 l     F .text	00000098 altera_avalon_uart_irq
080102bc l     F .text	000000e0 altera_avalon_uart_rxirq
0801039c l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
08010534 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
08010760 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08010c10 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08011320 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08008dbc g     F .text	00000074 _mprec_log10
08008ea8 g     F .text	0000008c __any_on
080079e0 g     F .text	00000054 _isatty_r
08011edc g     O .rodata	00000028 __mprec_tinytens
0800ecdc g     F .text	00000078 alt_main
08002fc8 g     F .text	000000b8 _puts_r
08015918 g     O .bss	00000100 alt_irq
08007b14 g     F .text	0000005c _lseek_r
08013d08 g       *ABS*	00000000 __flash_rwdata_start
080074a4 g     F .text	00000098 __sflags
0800d194 g     F .text	00000084 .hidden __eqdf2
08015a18 g       *ABS*	00000000 __alt_heap_start
08002f8c g     F .text	0000003c printf
0800afc8 g     F .text	0000009c _wcrtomb_r
0800340c g     F .text	0000005c __sseek
080016ac g     F .text	00000010 __sinit
0800ae58 g     F .text	00000154 __swbuf_r
08007a34 g     F .text	0000007c _setlocale_r
08001504 g     F .text	00000078 __sfmoreglue
0800ed74 g     F .text	00000020 __malloc_unlock
08007d90 g     F .text	0000015c memmove
08001694 g     F .text	00000018 _cleanup
08007eec g     F .text	000000a8 _Balloc
0800d218 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08002094 g     F .text	00000058 _fstat_r
08000350 g     F .text	000006e0 get_gps
080158bc g     O .bss	00000004 errno
080032cc g     F .text	00000014 __srget
08003388 g     F .text	00000008 __seofread
080158dc g     O .bss	00000004 alt_argv
0801bcc4 g       *ABS*	00000000 _gp
0800f2bc g     F .text	00000030 usleep
08012a20 g     O .rwdata	00000180 alt_fd_list
08002378 g     F .text	00000080 _getc_r
080023f8 g     F .text	00000088 getc
08010dbc g     F .text	00000090 alt_find_dev
08007c58 g     F .text	00000138 memcpy
08001358 g     F .text	0000000c _cleanup_r
0800e59c g     F .text	000000d0 .hidden __floatsidf
08011400 g     F .text	00000078 alt_io_redirect
0800d2f8 g     F .text	000000e0 .hidden __ltdf2
080119d8 g       *ABS*	00000000 __DTOR_END__
08003080 g     F .text	00000014 puts
08009530 g     F .text	00000074 __fpclassifyd
08008d18 g     F .text	000000a4 __ratio
0800ab80 g     F .text	00000024 __vfiprintf_internal
0800fb4c g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08002f60 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800bf40 g     F .text	00000008 .hidden __udivsi3
0800ea20 g     F .text	000000ac isatty
08011f2c g     O .rodata	000000c8 __mprec_tens
08007ab0 g     F .text	0000000c __locale_charset
080158c8 g     O .bss	00000004 __malloc_top_pad
08013cd8 g     O .rwdata	00000004 __mb_cur_max
08007ae0 g     F .text	0000000c _localeconv_r
08008314 g     F .text	0000003c __i2b
0800753c g     F .text	000004a4 __sfvwrite_r
080032e0 g     F .text	00000054 _sbrk_r
08008f34 g     F .text	0000005c _read_r
08013cf0 g     O .rwdata	00000004 alt_max_fd
08000fdc g     F .text	00000100 _fclose_r
08001318 g     F .text	00000030 fflush
080158c4 g     O .bss	00000004 __malloc_max_sbrked_mem
0800bf78 g     F .text	0000089c .hidden __adddf3
08008ac0 g     F .text	0000011c __b2d
0800b808 g     F .text	0000061c .hidden __umoddi3
0800ec00 g     F .text	000000dc lseek
08013cc4 g     O .rwdata	00000004 _global_impure_ptr
08008f90 g     F .text	000005a0 _realloc_r
08015a18 g       *ABS*	00000000 __bss_end
08011230 g     F .text	000000f0 alt_iic_isr_register
08011510 g     F .text	00000104 alt_tick
0800b1c8 g     F .text	00000640 .hidden __udivdi3
0800ac7c g     F .text	00000184 _fputwc_r
08011f04 g     O .rodata	00000028 __mprec_bigtens
080080f8 g     F .text	00000104 __s2b
0800e66c g     F .text	000000a4 .hidden __floatunsidf
08008868 g     F .text	00000060 __mcmp
0801017c g     F .text	000000a8 altera_avalon_uart_init
080016cc g     F .text	00000018 __fp_lock_all
08000b80 g     F .text	00000160 start_log
080111e4 g     F .text	0000004c alt_ic_irq_enabled
08011478 g     F .text	00000098 alt_alarm_stop
08003830 g     F .text	00000024 strtol
080158e4 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
080129f8 g     O .rwdata	00000028 alt_dev_null
08010bf4 g     F .text	0000001c alt_dcache_flush_all
080081fc g     F .text	00000068 __hi0bits
0800e514 g     F .text	00000088 .hidden __fixdfsi
08013d08 g       *ABS*	00000000 __ram_rwdata_end
08013ce8 g     O .rwdata	00000008 alt_dev_list
0800f33c g     F .text	00000100 write
08012154 g       *ABS*	00000000 __ram_rodata_end
0800e918 g     F .text	000000b8 fstat
08000000 g       *ABS*	00000000 __alt_mem_SDRAM
0800d2f8 g     F .text	000000e0 .hidden __ledf2
080085e0 g     F .text	00000140 __pow5mult
0800975c g     F .text	00001424 ___vfiprintf_internal_r
080158d4 g     O .bss	00000004 __nlocale_changed
0800bf48 g     F .text	00000008 .hidden __umodsi3
08015a18 g       *ABS*	00000000 end
08000fd0 g     F .text	0000000c _atoi_r
080107b0 g     F .text	000001ac altera_avalon_uart_write
08002070 g     F .text	00000024 fseek
0800f688 g     F .text	000000c4 altera_avalon_jtag_uart_init
080119d8 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800ffe4 g     F .text	00000088 alt_avalon_timer_sc_init
080100cc g     F .text	00000060 altera_avalon_uart_write_fd
0800e710 g     F .text	00000064 .hidden __clzsi2
0801012c g     F .text	00000050 altera_avalon_uart_close_fd
0800fd58 g     F .text	00000218 altera_avalon_jtag_uart_write
080016bc g     F .text	00000004 __sfp_lock_acquire
08007b70 g     F .text	000000e8 memchr
08003854 g     F .text	000020fc ___vfprintf_internal_r
0800192c g     F .text	000002f0 _free_r
08007abc g     F .text	00000010 __locale_mb_cur_max
08011810 g     F .text	00000194 __call_exitprocs
08003258 g     F .text	00000074 __srget_r
080158d0 g     O .bss	00000004 __mlocale_changed
08013ccc g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
080158e8 g     O .bss	00000004 _alt_tick_rate
08008720 g     F .text	00000148 __lshift
080158ec g     O .bss	00000004 _alt_nticks
0800f088 g     F .text	00000104 read
0800f4a8 g     F .text	0000007c alt_sys_init
08002f04 g     F .text	0000005c _open_r
080116fc g     F .text	00000114 __register_exitproc
08003508 g     F .text	000000c0 strncmp
08008350 g     F .text	00000290 __multiply
0800f9f8 g     F .text	00000068 altera_avalon_jtag_uart_close
0800bf50 g     F .text	00000028 .hidden __mulsi3
08012154 g       *ABS*	00000000 __ram_rwdata_start
080119d8 g       *ABS*	00000000 __ram_rodata_start
080158f0 g     O .bss	00000028 __malloc_current_mallinfo
08008bdc g     F .text	0000013c __d2b
0800f524 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08010f60 g     F .text	000000d4 alt_get_fd
08010a9c g     F .text	00000158 alt_busy_sleep
08005b00 g     F .text	00000054 _close_r
08011680 g     F .text	0000007c memcmp
0800f5e4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08015a18 g       *ABS*	00000000 __alt_stack_base
0800f634 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800225c g     F .text	000000dc _fwrite_r
080059d0 g     F .text	00000130 __swsetup_r
0800c814 g     F .text	00000980 .hidden __divdf3
0800157c g     F .text	00000118 __sfp
08008e30 g     F .text	00000078 __copybits
08012578 g     O .rwdata	00000408 __malloc_av_
080016c8 g     F .text	00000004 __sinit_lock_release
0800d3d8 g     F .text	0000086c .hidden __muldf3
08003334 g     F .text	00000054 __sread
08010e4c g     F .text	00000114 alt_find_file
08010c60 g     F .text	000000a4 alt_dev_llist_insert
0800ed54 g     F .text	00000020 __malloc_lock
0800f20c g     F .text	000000b0 sbrk
080010f0 g     F .text	00000228 _fflush_r
0800aba4 g     F .text	000000d8 _calloc_r
080017ec g     F .text	0000001c fopen
080158bc g       *ABS*	00000000 __bss_start
08002de0 g     F .text	00000124 memset
080001f8 g     F .text	00000158 main
080158e0 g     O .bss	00000004 alt_envp
080158c0 g     O .bss	00000004 __malloc_max_total_mem
0800f584 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800afac g     F .text	0000001c __swbuf
08003468 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
080010dc g     F .text	00000014 fclose
080035c8 g     F .text	00000268 _strtol_r
08005d7c g     F .text	00001728 _dtoa_r
08002638 g     F .text	000007a8 _malloc_r
0800b13c g     F .text	00000030 __ascii_wctomb
08013cf4 g     O .rwdata	00000004 alt_errno
080020ec g     F .text	000000b8 _fwalk
0800be90 g     F .text	00000054 .hidden __divsi3
08001808 g     F .text	00000124 _malloc_trim_r
080119d8 g       *ABS*	00000000 __CTOR_END__
080095a4 g     F .text	000000a4 strcmp
080119d8 g       *ABS*	00000000 __flash_rodata_start
080119d8 g       *ABS*	00000000 __DTOR_LIST__
08000e30 g     F .text	00000194 dump_log
0800d194 g     F .text	00000084 .hidden __nedf2
0800f474 g     F .text	00000034 alt_irq_init
0800f18c g     F .text	00000080 alt_release_fd
08012014 g     O .rodata	00000100 .hidden __clz_tab
080158cc g     O .bss	00000004 _PathLocale
08011634 g     F .text	00000014 atexit
08005974 g     F .text	0000005c _write_r
08007aec g     F .text	0000001c setlocale
08013cc8 g     O .rwdata	00000004 _impure_ptr
080158d8 g     O .bss	00000004 alt_argc
08010d60 g     F .text	0000005c _do_dtors
08007ad8 g     F .text	00000008 __locale_cjk_lang
08001c1c g     F .text	00000454 _fseek_r
080030b0 g     F .text	000001a8 __srefill_r
08000020 g       .exceptions	00000000 alt_irq_entry
08008a60 g     F .text	00000060 __ulp
080016e4 g     F .text	00000018 __fp_unlock_all
08013ce0 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08007b08 g     F .text	0000000c localeconv
08011050 g     F .text	00000050 alt_ic_isr_register
08002338 g     F .text	00000040 fwrite
08013d08 g       *ABS*	00000000 _edata
0801006c g     F .text	00000060 altera_avalon_uart_read_fd
08015a18 g       *ABS*	00000000 _end
080001bc g       *ABS*	00000000 __ram_exceptions_end
0800fa60 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
08011140 g     F .text	000000a4 alt_ic_irq_disable
08003390 g     F .text	0000007c __swrite
08013cd0 g     O .rwdata	00000004 __malloc_trim_threshold
08011614 g     F .text	00000020 altera_nios2_qsys_irq_init
08007acc g     F .text	0000000c __locale_msgcharset
08011648 g     F .text	00000038 exit
080021a4 g     F .text	000000b8 _fwalk_reent
080088c8 g     F .text	00000198 __mdiff
08000ce0 g     F .text	00000150 snapshot_log
0800bee4 g     F .text	0000005c .hidden __modsi3
08013cd4 g     O .rwdata	00000004 __ctype_ptr__
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
080016c0 g     F .text	00000004 __sfp_lock_release
08000fc4 g     F .text	0000000c atoi
08011c32 g     O .rodata	00000101 _ctype_
080104e0 g     F .text	00000054 altera_avalon_uart_close
080016fc g     F .text	000000f0 _fopen_r
080119a4 g     F .text	00000034 _exit
0801095c g     F .text	00000140 alt_alarm_start
08002480 g     F .text	000001b8 __smakebuf_r
08000a30 g     F .text	00000150 erase_log
08003470 g     F .text	00000098 strlen
0800eed8 g     F .text	00000160 open
0800d218 g     F .text	000000e0 .hidden __gedf2
08013cdc g     O .rwdata	00000004 __wctomb
08009744 g     F .text	00000018 __sprint_r
08011034 g     F .text	0000001c alt_icache_flush_all
08013cfc g     O .rwdata	00000004 alt_priority_mask
080110a0 g     F .text	000000a0 alt_ic_irq_enable
08005950 g     F .text	00000024 __vfprintf_internal
08010584 g     F .text	000001dc altera_avalon_uart_read
0800b16c g     F .text	0000005c _wctomb_r
0800dc44 g     F .text	000008d0 .hidden __subdf3
08008264 g     F .text	000000b0 __lo0bits
08013d00 g     O .rwdata	00000008 alt_alarm_list
08010d04 g     F .text	0000005c _do_ctors
0800b064 g     F .text	000000d8 wcrtomb
0800e7c4 g     F .text	000000d8 close
0800eb30 g     F .text	00000080 alt_load
0800ae00 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
080016c4 g     F .text	00000004 __sinit_lock_acquire
08007fbc g     F .text	0000013c __multadd
08007f94 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406f14 	ori	at,at,444
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00820074 	movhi	r2,2049
 8000130:	10964604 	addi	r2,r2,22808
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	00820074 	movhi	r2,2049
 8000148:	10964604 	addi	r2,r2,22808
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c8:	d6af3114 	ori	gp,gp,48324
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001d0:	10962f14 	ori	r2,r2,22716

    movhi r3, %hi(__bss_end)
 80001d4:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d8:	18d68614 	ori	r3,r3,23064

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	800eb300 	call	800eb30 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	800ecdc0 	call	800ecdc <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <main>:
#define HEX3 (volatile char *) 0x00011090
#define HEX4 (volatile char *) 0x00011080
#define HEX5 (volatile char *) 0x00011070


int main() {
 80001f8:	defffc04 	addi	sp,sp,-16
 80001fc:	dfc00315 	stw	ra,12(sp)
 8000200:	df000215 	stw	fp,8(sp)
 8000204:	df000204 	addi	fp,sp,8
	printf("Hello!\n");
 8000208:	01020074 	movhi	r4,2049
 800020c:	21067604 	addi	r4,r4,6616
 8000210:	80030800 	call	8003080 <puts>
//	if(erase_log())
//		printf("cleared logs\n");
	while(1) {
		int check = *SWITCHES;
 8000214:	00800074 	movhi	r2,1
 8000218:	10841404 	addi	r2,r2,4176
 800021c:	10800003 	ldbu	r2,0(r2)
 8000220:	10803fcc 	andi	r2,r2,255
 8000224:	1080201c 	xori	r2,r2,128
 8000228:	10bfe004 	addi	r2,r2,-128
 800022c:	e0bffe15 	stw	r2,-8(fp)
		if(check % 2 == 0) {
 8000230:	e0bffe17 	ldw	r2,-8(fp)
 8000234:	1080004c 	andi	r2,r2,1
 8000238:	10001a1e 	bne	r2,zero,80002a4 <main+0xac>
			if(*PUSHBUTTON) {
 800023c:	00800074 	movhi	r2,1
 8000240:	10843004 	addi	r2,r2,4288
 8000244:	10800003 	ldbu	r2,0(r2)
 8000248:	10803fcc 	andi	r2,r2,255
 800024c:	1080201c 	xori	r2,r2,128
 8000250:	10bfe004 	addi	r2,r2,-128
 8000254:	10001226 	beq	r2,zero,80002a0 <main+0xa8>
				printf("\n\nRefreshing values\n\n");
 8000258:	01020074 	movhi	r4,2049
 800025c:	21067804 	addi	r4,r4,6624
 8000260:	80030800 	call	8003080 <puts>
				int fix = get_gps();
 8000264:	80003500 	call	8000350 <get_gps>
 8000268:	e0bfff15 	stw	r2,-4(fp)
				if(fix)
 800026c:	e0bfff17 	ldw	r2,-4(fp)
 8000270:	10000426 	beq	r2,zero,8000284 <main+0x8c>
					printf("We have signal!\n");
 8000274:	01020074 	movhi	r4,2049
 8000278:	21067e04 	addi	r4,r4,6648
 800027c:	80030800 	call	8003080 <puts>
 8000280:	00000306 	br	8000290 <main+0x98>
				else
					printf("We don't have signal.\n");
 8000284:	01020074 	movhi	r4,2049
 8000288:	21068204 	addi	r4,r4,6664
 800028c:	80030800 	call	8003080 <puts>
				usleep(1000000);
 8000290:	010003f4 	movhi	r4,15
 8000294:	21109004 	addi	r4,r4,16960
 8000298:	800f2bc0 	call	800f2bc <usleep>
 800029c:	00002606 	br	8000338 <main+0x140>
			} else
				continue;
 80002a0:	00002506 	br	8000338 <main+0x140>
		} else {
			if(start_log()){
 80002a4:	8000b800 	call	8000b80 <start_log>
 80002a8:	10002026 	beq	r2,zero,800032c <main+0x134>
				printf("\n\nLogging started.\n");
 80002ac:	01020074 	movhi	r4,2049
 80002b0:	21068804 	addi	r4,r4,6688
 80002b4:	80030800 	call	8003080 <puts>
				while(1) {
					if(*PUSHBUTTON) {
 80002b8:	00800074 	movhi	r2,1
 80002bc:	10843004 	addi	r2,r2,4288
 80002c0:	10800003 	ldbu	r2,0(r2)
 80002c4:	10803fcc 	andi	r2,r2,255
 80002c8:	1080201c 	xori	r2,r2,128
 80002cc:	10bfe004 	addi	r2,r2,-128
 80002d0:	10001526 	beq	r2,zero,8000328 <main+0x130>
						printf("Snapshot taken. '%d'\n", snapshot_log());
 80002d4:	8000ce00 	call	8000ce0 <snapshot_log>
 80002d8:	01020074 	movhi	r4,2049
 80002dc:	21068d04 	addi	r4,r4,6708
 80002e0:	100b883a 	mov	r5,r2
 80002e4:	8002f8c0 	call	8002f8c <printf>
						usleep(1000000);
 80002e8:	010003f4 	movhi	r4,15
 80002ec:	21109004 	addi	r4,r4,16960
 80002f0:	800f2bc0 	call	800f2bc <usleep>
						check = *SWITCHES;
 80002f4:	00800074 	movhi	r2,1
 80002f8:	10841404 	addi	r2,r2,4176
 80002fc:	10800003 	ldbu	r2,0(r2)
 8000300:	10803fcc 	andi	r2,r2,255
 8000304:	1080201c 	xori	r2,r2,128
 8000308:	10bfe004 	addi	r2,r2,-128
 800030c:	e0bffe15 	stw	r2,-8(fp)
						if(check % 4 == 0){
 8000310:	e0bffe17 	ldw	r2,-8(fp)
 8000314:	108000cc 	andi	r2,r2,3
 8000318:	1000031e 	bne	r2,zero,8000328 <main+0x130>
							dump_log();
 800031c:	8000e300 	call	8000e30 <dump_log>
							return 0;
 8000320:	0005883a 	mov	r2,zero
 8000324:	00000506 	br	800033c <main+0x144>
						}

					}
				}
 8000328:	003fe306 	br	80002b8 <__alt_data_end+0xfc0002b8>
			} else
				printf("Logging failed\n");
 800032c:	01020074 	movhi	r4,2049
 8000330:	21069304 	addi	r4,r4,6732
 8000334:	80030800 	call	8003080 <puts>
		}
	}
 8000338:	003fb606 	br	8000214 <__alt_data_end+0xfc000214>
	return 0;
}
 800033c:	e037883a 	mov	sp,fp
 8000340:	dfc00117 	ldw	ra,4(sp)
 8000344:	df000017 	ldw	fp,0(sp)
 8000348:	dec00204 	addi	sp,sp,8
 800034c:	f800283a 	ret

08000350 <get_gps>:


int get_gps() {
 8000350:	deffc904 	addi	sp,sp,-220
 8000354:	dfc03615 	stw	ra,216(sp)
 8000358:	df003515 	stw	fp,212(sp)
 800035c:	dc003415 	stw	r16,208(sp)
 8000360:	df003504 	addi	fp,sp,212
	const char * ID = "$GPGGA";
 8000364:	00820074 	movhi	r2,2049
 8000368:	10869704 	addi	r2,r2,6748
 800036c:	e0bfce15 	stw	r2,-200(fp)
	FILE* fp;
	char incoming;
	int have_link = 0;
 8000370:	e03fcc15 	stw	zero,-208(fp)
	volatile char ew_ind[2];
	volatile char latitude[10];
	volatile char longitude[11];
	volatile char gps_fix[2];
	volatile char no_sat[3];
	volatile int i = 0;
 8000374:	e03ffd15 	stw	zero,-12(fp)
	volatile int j = 0;
 8000378:	e03ffe15 	stw	zero,-8(fp)
	int check_type = 1;
 800037c:	00800044 	movi	r2,1
 8000380:	e0bfcd15 	stw	r2,-204(fp)
	int hash;
	fp = fopen("/dev/uart_0", "r+");
 8000384:	01020074 	movhi	r4,2049
 8000388:	21069904 	addi	r4,r4,6756
 800038c:	01420074 	movhi	r5,2049
 8000390:	29469c04 	addi	r5,r5,6768
 8000394:	80017ec0 	call	80017ec <fopen>
 8000398:	e0bfcf15 	stw	r2,-196(fp)
	if(fp == NULL)
 800039c:	e0bfcf17 	ldw	r2,-196(fp)
 80003a0:	1000041e 	bne	r2,zero,80003b4 <get_gps+0x64>
		printf("RS232 error. \n");
 80003a4:	01020074 	movhi	r4,2049
 80003a8:	21069d04 	addi	r4,r4,6772
 80003ac:	80030800 	call	8003080 <puts>
 80003b0:	00019606 	br	8000a0c <get_gps+0x6bc>
	else {
		while(check_type){
 80003b4:	00002106 	br	800043c <get_gps+0xec>
			while(incoming != '$') {
 80003b8:	00000306 	br	80003c8 <get_gps+0x78>
				incoming = getc(fp);
 80003bc:	e13fcf17 	ldw	r4,-196(fp)
 80003c0:	80023f80 	call	80023f8 <getc>
 80003c4:	e0bfcb05 	stb	r2,-212(fp)
	fp = fopen("/dev/uart_0", "r+");
	if(fp == NULL)
		printf("RS232 error. \n");
	else {
		while(check_type){
			while(incoming != '$') {
 80003c8:	e0bfcb07 	ldb	r2,-212(fp)
 80003cc:	10800918 	cmpnei	r2,r2,36
 80003d0:	103ffa1e 	bne	r2,zero,80003bc <__alt_data_end+0xfc0003bc>
				incoming = getc(fp);
			}
			i=0;
 80003d4:	e03ffd15 	stw	zero,-12(fp)
			while(incoming != '\r') {
 80003d8:	00000c06 	br	800040c <get_gps+0xbc>
				*(message+i) = incoming;
 80003dc:	e0bffd17 	ldw	r2,-12(fp)
 80003e0:	1007883a 	mov	r3,r2
 80003e4:	e0bfd104 	addi	r2,fp,-188
 80003e8:	10c5883a 	add	r2,r2,r3
 80003ec:	e0ffcb03 	ldbu	r3,-212(fp)
 80003f0:	10c00005 	stb	r3,0(r2)
				incoming = getc(fp);
 80003f4:	e13fcf17 	ldw	r4,-196(fp)
 80003f8:	80023f80 	call	80023f8 <getc>
 80003fc:	e0bfcb05 	stb	r2,-212(fp)
				i++;
 8000400:	e0bffd17 	ldw	r2,-12(fp)
 8000404:	10800044 	addi	r2,r2,1
 8000408:	e0bffd15 	stw	r2,-12(fp)
		while(check_type){
			while(incoming != '$') {
				incoming = getc(fp);
			}
			i=0;
			while(incoming != '\r') {
 800040c:	e0bfcb07 	ldb	r2,-212(fp)
 8000410:	10800358 	cmpnei	r2,r2,13
 8000414:	103ff11e 	bne	r2,zero,80003dc <__alt_data_end+0xfc0003dc>
				*(message+i) = incoming;
				incoming = getc(fp);
				i++;
			}
			hash = strncmp(message, ID, 6);
 8000418:	e0bfd104 	addi	r2,fp,-188
 800041c:	1009883a 	mov	r4,r2
 8000420:	e17fce17 	ldw	r5,-200(fp)
 8000424:	01800184 	movi	r6,6
 8000428:	80035080 	call	8003508 <strncmp>
 800042c:	e0bfd015 	stw	r2,-192(fp)
//			printf("check = '%d'\n", hash);
/*			for(i=0; i<72; i++) {
				printf("%c", *(message+i));
			}
			printf("\n"); */
			if(hash == 0) {
 8000430:	e0bfd017 	ldw	r2,-192(fp)
 8000434:	1000011e 	bne	r2,zero,800043c <get_gps+0xec>
				check_type = 0;
 8000438:	e03fcd15 	stw	zero,-204(fp)
	int hash;
	fp = fopen("/dev/uart_0", "r+");
	if(fp == NULL)
		printf("RS232 error. \n");
	else {
		while(check_type){
 800043c:	e0bfcd17 	ldw	r2,-204(fp)
 8000440:	103fdd1e 	bne	r2,zero,80003b8 <__alt_data_end+0xfc0003b8>
			printf("\n"); */
			if(hash == 0) {
				check_type = 0;
			}
		}
		i=0;
 8000444:	e03ffd15 	stw	zero,-12(fp)
		j=0;
 8000448:	e03ffe15 	stw	zero,-8(fp)
		while(message[j] != ',') {
 800044c:	00001006 	br	8000490 <get_gps+0x140>
			*(message_id+i) = *(message+j);
 8000450:	e0bffd17 	ldw	r2,-12(fp)
 8000454:	1007883a 	mov	r3,r2
 8000458:	e0bff104 	addi	r2,fp,-60
 800045c:	10c5883a 	add	r2,r2,r3
 8000460:	e0fffe17 	ldw	r3,-8(fp)
 8000464:	1809883a 	mov	r4,r3
 8000468:	e0ffd104 	addi	r3,fp,-188
 800046c:	1907883a 	add	r3,r3,r4
 8000470:	18c00003 	ldbu	r3,0(r3)
 8000474:	10c00005 	stb	r3,0(r2)
			i++;
 8000478:	e0bffd17 	ldw	r2,-12(fp)
 800047c:	10800044 	addi	r2,r2,1
 8000480:	e0bffd15 	stw	r2,-12(fp)
			j++;
 8000484:	e0bffe17 	ldw	r2,-8(fp)
 8000488:	10800044 	addi	r2,r2,1
 800048c:	e0bffe15 	stw	r2,-8(fp)
				check_type = 0;
			}
		}
		i=0;
		j=0;
		while(message[j] != ',') {
 8000490:	e0bffe17 	ldw	r2,-8(fp)
 8000494:	e0ffd104 	addi	r3,fp,-188
 8000498:	1885883a 	add	r2,r3,r2
 800049c:	10800003 	ldbu	r2,0(r2)
 80004a0:	10803fcc 	andi	r2,r2,255
 80004a4:	1080201c 	xori	r2,r2,128
 80004a8:	10bfe004 	addi	r2,r2,-128
 80004ac:	10800b18 	cmpnei	r2,r2,44
 80004b0:	103fe71e 	bne	r2,zero,8000450 <__alt_data_end+0xfc000450>
			*(message_id+i) = *(message+j);
			i++;
			j++;
		}
		*(message_id+i) = '\0';
 80004b4:	e0bffd17 	ldw	r2,-12(fp)
 80004b8:	1007883a 	mov	r3,r2
 80004bc:	e0bff104 	addi	r2,fp,-60
 80004c0:	10c5883a 	add	r2,r2,r3
 80004c4:	10000005 	stb	zero,0(r2)
		i=0;
 80004c8:	e03ffd15 	stw	zero,-12(fp)
		j++;
 80004cc:	e0bffe17 	ldw	r2,-8(fp)
 80004d0:	10800044 	addi	r2,r2,1
 80004d4:	e0bffe15 	stw	r2,-8(fp)
		while(message[j] != ',') {
 80004d8:	00001006 	br	800051c <get_gps+0x1cc>
			*(utc_time+i) = *(message+j);
 80004dc:	e0bffd17 	ldw	r2,-12(fp)
 80004e0:	1007883a 	mov	r3,r2
 80004e4:	e0bff2c4 	addi	r2,fp,-53
 80004e8:	10c5883a 	add	r2,r2,r3
 80004ec:	e0fffe17 	ldw	r3,-8(fp)
 80004f0:	1809883a 	mov	r4,r3
 80004f4:	e0ffd104 	addi	r3,fp,-188
 80004f8:	1907883a 	add	r3,r3,r4
 80004fc:	18c00003 	ldbu	r3,0(r3)
 8000500:	10c00005 	stb	r3,0(r2)
			i++;
 8000504:	e0bffd17 	ldw	r2,-12(fp)
 8000508:	10800044 	addi	r2,r2,1
 800050c:	e0bffd15 	stw	r2,-12(fp)
			j++;
 8000510:	e0bffe17 	ldw	r2,-8(fp)
 8000514:	10800044 	addi	r2,r2,1
 8000518:	e0bffe15 	stw	r2,-8(fp)
			j++;
		}
		*(message_id+i) = '\0';
		i=0;
		j++;
		while(message[j] != ',') {
 800051c:	e0bffe17 	ldw	r2,-8(fp)
 8000520:	e0ffd104 	addi	r3,fp,-188
 8000524:	1885883a 	add	r2,r3,r2
 8000528:	10800003 	ldbu	r2,0(r2)
 800052c:	10803fcc 	andi	r2,r2,255
 8000530:	1080201c 	xori	r2,r2,128
 8000534:	10bfe004 	addi	r2,r2,-128
 8000538:	10800b18 	cmpnei	r2,r2,44
 800053c:	103fe71e 	bne	r2,zero,80004dc <__alt_data_end+0xfc0004dc>
			*(utc_time+i) = *(message+j);
			i++;
			j++;
		}
		*(utc_time+i) = '\0';
 8000540:	e0bffd17 	ldw	r2,-12(fp)
 8000544:	1007883a 	mov	r3,r2
 8000548:	e0bff2c4 	addi	r2,fp,-53
 800054c:	10c5883a 	add	r2,r2,r3
 8000550:	10000005 	stb	zero,0(r2)
		i=0;
 8000554:	e03ffd15 	stw	zero,-12(fp)
		j++;
 8000558:	e0bffe17 	ldw	r2,-8(fp)
 800055c:	10800044 	addi	r2,r2,1
 8000560:	e0bffe15 	stw	r2,-8(fp)
		while(message[j] != ',') {
 8000564:	00001006 	br	80005a8 <get_gps+0x258>
			*(latitude+i) = *(message+j);
 8000568:	e0bffd17 	ldw	r2,-12(fp)
 800056c:	1007883a 	mov	r3,r2
 8000570:	e0bff684 	addi	r2,fp,-38
 8000574:	10c5883a 	add	r2,r2,r3
 8000578:	e0fffe17 	ldw	r3,-8(fp)
 800057c:	1809883a 	mov	r4,r3
 8000580:	e0ffd104 	addi	r3,fp,-188
 8000584:	1907883a 	add	r3,r3,r4
 8000588:	18c00003 	ldbu	r3,0(r3)
 800058c:	10c00005 	stb	r3,0(r2)
			i++;
 8000590:	e0bffd17 	ldw	r2,-12(fp)
 8000594:	10800044 	addi	r2,r2,1
 8000598:	e0bffd15 	stw	r2,-12(fp)
			j++;
 800059c:	e0bffe17 	ldw	r2,-8(fp)
 80005a0:	10800044 	addi	r2,r2,1
 80005a4:	e0bffe15 	stw	r2,-8(fp)
			j++;
		}
		*(utc_time+i) = '\0';
		i=0;
		j++;
		while(message[j] != ',') {
 80005a8:	e0bffe17 	ldw	r2,-8(fp)
 80005ac:	e0ffd104 	addi	r3,fp,-188
 80005b0:	1885883a 	add	r2,r3,r2
 80005b4:	10800003 	ldbu	r2,0(r2)
 80005b8:	10803fcc 	andi	r2,r2,255
 80005bc:	1080201c 	xori	r2,r2,128
 80005c0:	10bfe004 	addi	r2,r2,-128
 80005c4:	10800b18 	cmpnei	r2,r2,44
 80005c8:	103fe71e 	bne	r2,zero,8000568 <__alt_data_end+0xfc000568>
			*(latitude+i) = *(message+j);
			i++;
			j++;
		}
		*(latitude+i) = '\0';
 80005cc:	e0bffd17 	ldw	r2,-12(fp)
 80005d0:	1007883a 	mov	r3,r2
 80005d4:	e0bff684 	addi	r2,fp,-38
 80005d8:	10c5883a 	add	r2,r2,r3
 80005dc:	10000005 	stb	zero,0(r2)
		i=0;
 80005e0:	e03ffd15 	stw	zero,-12(fp)
		j++;
 80005e4:	e0bffe17 	ldw	r2,-8(fp)
 80005e8:	10800044 	addi	r2,r2,1
 80005ec:	e0bffe15 	stw	r2,-8(fp)
		while(message[j] != ',') {
 80005f0:	00001006 	br	8000634 <get_gps+0x2e4>
			*(ns_ind+i) = *(message+j);
 80005f4:	e0bffd17 	ldw	r2,-12(fp)
 80005f8:	1007883a 	mov	r3,r2
 80005fc:	e0bff584 	addi	r2,fp,-42
 8000600:	10c5883a 	add	r2,r2,r3
 8000604:	e0fffe17 	ldw	r3,-8(fp)
 8000608:	1809883a 	mov	r4,r3
 800060c:	e0ffd104 	addi	r3,fp,-188
 8000610:	1907883a 	add	r3,r3,r4
 8000614:	18c00003 	ldbu	r3,0(r3)
 8000618:	10c00005 	stb	r3,0(r2)
			i++;
 800061c:	e0bffd17 	ldw	r2,-12(fp)
 8000620:	10800044 	addi	r2,r2,1
 8000624:	e0bffd15 	stw	r2,-12(fp)
			j++;
 8000628:	e0bffe17 	ldw	r2,-8(fp)
 800062c:	10800044 	addi	r2,r2,1
 8000630:	e0bffe15 	stw	r2,-8(fp)
			j++;
		}
		*(latitude+i) = '\0';
		i=0;
		j++;
		while(message[j] != ',') {
 8000634:	e0bffe17 	ldw	r2,-8(fp)
 8000638:	e0ffd104 	addi	r3,fp,-188
 800063c:	1885883a 	add	r2,r3,r2
 8000640:	10800003 	ldbu	r2,0(r2)
 8000644:	10803fcc 	andi	r2,r2,255
 8000648:	1080201c 	xori	r2,r2,128
 800064c:	10bfe004 	addi	r2,r2,-128
 8000650:	10800b18 	cmpnei	r2,r2,44
 8000654:	103fe71e 	bne	r2,zero,80005f4 <__alt_data_end+0xfc0005f4>
			*(ns_ind+i) = *(message+j);
			i++;
			j++;
		}
		*(ns_ind+i) = '\0';
 8000658:	e0bffd17 	ldw	r2,-12(fp)
 800065c:	1007883a 	mov	r3,r2
 8000660:	e0bff584 	addi	r2,fp,-42
 8000664:	10c5883a 	add	r2,r2,r3
 8000668:	10000005 	stb	zero,0(r2)
		i=0;
 800066c:	e03ffd15 	stw	zero,-12(fp)
		j++;
 8000670:	e0bffe17 	ldw	r2,-8(fp)
 8000674:	10800044 	addi	r2,r2,1
 8000678:	e0bffe15 	stw	r2,-8(fp)
		while(message[j] != ',') {
 800067c:	00001006 	br	80006c0 <get_gps+0x370>
			*(longitude+i) = *(message+j);
 8000680:	e0bffd17 	ldw	r2,-12(fp)
 8000684:	1007883a 	mov	r3,r2
 8000688:	e0bff904 	addi	r2,fp,-28
 800068c:	10c5883a 	add	r2,r2,r3
 8000690:	e0fffe17 	ldw	r3,-8(fp)
 8000694:	1809883a 	mov	r4,r3
 8000698:	e0ffd104 	addi	r3,fp,-188
 800069c:	1907883a 	add	r3,r3,r4
 80006a0:	18c00003 	ldbu	r3,0(r3)
 80006a4:	10c00005 	stb	r3,0(r2)
			i++;
 80006a8:	e0bffd17 	ldw	r2,-12(fp)
 80006ac:	10800044 	addi	r2,r2,1
 80006b0:	e0bffd15 	stw	r2,-12(fp)
			j++;
 80006b4:	e0bffe17 	ldw	r2,-8(fp)
 80006b8:	10800044 	addi	r2,r2,1
 80006bc:	e0bffe15 	stw	r2,-8(fp)
			j++;
		}
		*(ns_ind+i) = '\0';
		i=0;
		j++;
		while(message[j] != ',') {
 80006c0:	e0bffe17 	ldw	r2,-8(fp)
 80006c4:	e0ffd104 	addi	r3,fp,-188
 80006c8:	1885883a 	add	r2,r3,r2
 80006cc:	10800003 	ldbu	r2,0(r2)
 80006d0:	10803fcc 	andi	r2,r2,255
 80006d4:	1080201c 	xori	r2,r2,128
 80006d8:	10bfe004 	addi	r2,r2,-128
 80006dc:	10800b18 	cmpnei	r2,r2,44
 80006e0:	103fe71e 	bne	r2,zero,8000680 <__alt_data_end+0xfc000680>
			*(longitude+i) = *(message+j);
			i++;
			j++;
		}
		*(longitude+i) = '\0';
 80006e4:	e0bffd17 	ldw	r2,-12(fp)
 80006e8:	1007883a 	mov	r3,r2
 80006ec:	e0bff904 	addi	r2,fp,-28
 80006f0:	10c5883a 	add	r2,r2,r3
 80006f4:	10000005 	stb	zero,0(r2)
		i=0;
 80006f8:	e03ffd15 	stw	zero,-12(fp)
		j++;
 80006fc:	e0bffe17 	ldw	r2,-8(fp)
 8000700:	10800044 	addi	r2,r2,1
 8000704:	e0bffe15 	stw	r2,-8(fp)
		while(message[j] != ',') {
 8000708:	00001006 	br	800074c <get_gps+0x3fc>
			*(ew_ind+i) = *(message+j);
 800070c:	e0bffd17 	ldw	r2,-12(fp)
 8000710:	1007883a 	mov	r3,r2
 8000714:	e0bff604 	addi	r2,fp,-40
 8000718:	10c5883a 	add	r2,r2,r3
 800071c:	e0fffe17 	ldw	r3,-8(fp)
 8000720:	1809883a 	mov	r4,r3
 8000724:	e0ffd104 	addi	r3,fp,-188
 8000728:	1907883a 	add	r3,r3,r4
 800072c:	18c00003 	ldbu	r3,0(r3)
 8000730:	10c00005 	stb	r3,0(r2)
			i++;
 8000734:	e0bffd17 	ldw	r2,-12(fp)
 8000738:	10800044 	addi	r2,r2,1
 800073c:	e0bffd15 	stw	r2,-12(fp)
			j++;
 8000740:	e0bffe17 	ldw	r2,-8(fp)
 8000744:	10800044 	addi	r2,r2,1
 8000748:	e0bffe15 	stw	r2,-8(fp)
			j++;
		}
		*(longitude+i) = '\0';
		i=0;
		j++;
		while(message[j] != ',') {
 800074c:	e0bffe17 	ldw	r2,-8(fp)
 8000750:	e0ffd104 	addi	r3,fp,-188
 8000754:	1885883a 	add	r2,r3,r2
 8000758:	10800003 	ldbu	r2,0(r2)
 800075c:	10803fcc 	andi	r2,r2,255
 8000760:	1080201c 	xori	r2,r2,128
 8000764:	10bfe004 	addi	r2,r2,-128
 8000768:	10800b18 	cmpnei	r2,r2,44
 800076c:	103fe71e 	bne	r2,zero,800070c <__alt_data_end+0xfc00070c>
			*(ew_ind+i) = *(message+j);
			i++;
			j++;
		}
		*(ew_ind+i) = '\0';
 8000770:	e0bffd17 	ldw	r2,-12(fp)
 8000774:	1007883a 	mov	r3,r2
 8000778:	e0bff604 	addi	r2,fp,-40
 800077c:	10c5883a 	add	r2,r2,r3
 8000780:	10000005 	stb	zero,0(r2)
		i=0;
 8000784:	e03ffd15 	stw	zero,-12(fp)
		j++;
 8000788:	e0bffe17 	ldw	r2,-8(fp)
 800078c:	10800044 	addi	r2,r2,1
 8000790:	e0bffe15 	stw	r2,-8(fp)
		while(message[j] != ',') {
 8000794:	00001006 	br	80007d8 <get_gps+0x488>
			*(gps_fix+i) = *(message+j);
 8000798:	e0bffd17 	ldw	r2,-12(fp)
 800079c:	1007883a 	mov	r3,r2
 80007a0:	e0bffbc4 	addi	r2,fp,-17
 80007a4:	10c5883a 	add	r2,r2,r3
 80007a8:	e0fffe17 	ldw	r3,-8(fp)
 80007ac:	1809883a 	mov	r4,r3
 80007b0:	e0ffd104 	addi	r3,fp,-188
 80007b4:	1907883a 	add	r3,r3,r4
 80007b8:	18c00003 	ldbu	r3,0(r3)
 80007bc:	10c00005 	stb	r3,0(r2)
			i++;
 80007c0:	e0bffd17 	ldw	r2,-12(fp)
 80007c4:	10800044 	addi	r2,r2,1
 80007c8:	e0bffd15 	stw	r2,-12(fp)
			j++;
 80007cc:	e0bffe17 	ldw	r2,-8(fp)
 80007d0:	10800044 	addi	r2,r2,1
 80007d4:	e0bffe15 	stw	r2,-8(fp)
			j++;
		}
		*(ew_ind+i) = '\0';
		i=0;
		j++;
		while(message[j] != ',') {
 80007d8:	e0bffe17 	ldw	r2,-8(fp)
 80007dc:	e0ffd104 	addi	r3,fp,-188
 80007e0:	1885883a 	add	r2,r3,r2
 80007e4:	10800003 	ldbu	r2,0(r2)
 80007e8:	10803fcc 	andi	r2,r2,255
 80007ec:	1080201c 	xori	r2,r2,128
 80007f0:	10bfe004 	addi	r2,r2,-128
 80007f4:	10800b18 	cmpnei	r2,r2,44
 80007f8:	103fe71e 	bne	r2,zero,8000798 <__alt_data_end+0xfc000798>
			*(gps_fix+i) = *(message+j);
			i++;
			j++;
		}
		*(gps_fix+i) = '\0';
 80007fc:	e0bffd17 	ldw	r2,-12(fp)
 8000800:	1007883a 	mov	r3,r2
 8000804:	e0bffbc4 	addi	r2,fp,-17
 8000808:	10c5883a 	add	r2,r2,r3
 800080c:	10000005 	stb	zero,0(r2)
		if(gps_fix[0] == '1' || gps_fix[0] == '2')
 8000810:	e0bffbc3 	ldbu	r2,-17(fp)
 8000814:	10803fcc 	andi	r2,r2,255
 8000818:	1080201c 	xori	r2,r2,128
 800081c:	10bfe004 	addi	r2,r2,-128
 8000820:	10800c60 	cmpeqi	r2,r2,49
 8000824:	1000061e 	bne	r2,zero,8000840 <get_gps+0x4f0>
 8000828:	e0bffbc3 	ldbu	r2,-17(fp)
 800082c:	10803fcc 	andi	r2,r2,255
 8000830:	1080201c 	xori	r2,r2,128
 8000834:	10bfe004 	addi	r2,r2,-128
 8000838:	10800c98 	cmpnei	r2,r2,50
 800083c:	1000031e 	bne	r2,zero,800084c <get_gps+0x4fc>
			have_link = 1;
 8000840:	00800044 	movi	r2,1
 8000844:	e0bfcc15 	stw	r2,-208(fp)
 8000848:	00000106 	br	8000850 <get_gps+0x500>
		else
			have_link = 0;
 800084c:	e03fcc15 	stw	zero,-208(fp)

		i=0;
 8000850:	e03ffd15 	stw	zero,-12(fp)
		j++;
 8000854:	e0bffe17 	ldw	r2,-8(fp)
 8000858:	10800044 	addi	r2,r2,1
 800085c:	e0bffe15 	stw	r2,-8(fp)
		while(message[j] != ',') {
 8000860:	00001006 	br	80008a4 <get_gps+0x554>
			*(no_sat+i) = *(message+j);
 8000864:	e0bffd17 	ldw	r2,-12(fp)
 8000868:	1007883a 	mov	r3,r2
 800086c:	e0bffc44 	addi	r2,fp,-15
 8000870:	10c5883a 	add	r2,r2,r3
 8000874:	e0fffe17 	ldw	r3,-8(fp)
 8000878:	1809883a 	mov	r4,r3
 800087c:	e0ffd104 	addi	r3,fp,-188
 8000880:	1907883a 	add	r3,r3,r4
 8000884:	18c00003 	ldbu	r3,0(r3)
 8000888:	10c00005 	stb	r3,0(r2)
			i++;
 800088c:	e0bffd17 	ldw	r2,-12(fp)
 8000890:	10800044 	addi	r2,r2,1
 8000894:	e0bffd15 	stw	r2,-12(fp)
			j++;
 8000898:	e0bffe17 	ldw	r2,-8(fp)
 800089c:	10800044 	addi	r2,r2,1
 80008a0:	e0bffe15 	stw	r2,-8(fp)
		else
			have_link = 0;

		i=0;
		j++;
		while(message[j] != ',') {
 80008a4:	e0bffe17 	ldw	r2,-8(fp)
 80008a8:	e0ffd104 	addi	r3,fp,-188
 80008ac:	1885883a 	add	r2,r3,r2
 80008b0:	10800003 	ldbu	r2,0(r2)
 80008b4:	10803fcc 	andi	r2,r2,255
 80008b8:	1080201c 	xori	r2,r2,128
 80008bc:	10bfe004 	addi	r2,r2,-128
 80008c0:	10800b18 	cmpnei	r2,r2,44
 80008c4:	103fe71e 	bne	r2,zero,8000864 <__alt_data_end+0xfc000864>
			*(no_sat+i) = *(message+j);
			i++;
			j++;
		}
		*(no_sat+i) = '\0';
 80008c8:	e0bffd17 	ldw	r2,-12(fp)
 80008cc:	1007883a 	mov	r3,r2
 80008d0:	e0bffc44 	addi	r2,fp,-15
 80008d4:	10c5883a 	add	r2,r2,r3
 80008d8:	10000005 	stb	zero,0(r2)
		*LEDs = atoi(no_sat);
 80008dc:	04000074 	movhi	r16,1
 80008e0:	84041804 	addi	r16,r16,4192
 80008e4:	e0bffc44 	addi	r2,fp,-15
 80008e8:	1009883a 	mov	r4,r2
 80008ec:	8000fc40 	call	8000fc4 <atoi>
 80008f0:	80800005 	stb	r2,0(r16)

		printf("message id = '%s'\n", message_id);
 80008f4:	e0bff104 	addi	r2,fp,-60
 80008f8:	01020074 	movhi	r4,2049
 80008fc:	2106a104 	addi	r4,r4,6788
 8000900:	100b883a 	mov	r5,r2
 8000904:	8002f8c0 	call	8002f8c <printf>
		printf("utc time = '%s'\n", utc_time);
 8000908:	e0bff2c4 	addi	r2,fp,-53
 800090c:	01020074 	movhi	r4,2049
 8000910:	2106a604 	addi	r4,r4,6808
 8000914:	100b883a 	mov	r5,r2
 8000918:	8002f8c0 	call	8002f8c <printf>
		printf("latitude = '%s'\n", latitude);
 800091c:	e0bff684 	addi	r2,fp,-38
 8000920:	01020074 	movhi	r4,2049
 8000924:	2106ab04 	addi	r4,r4,6828
 8000928:	100b883a 	mov	r5,r2
 800092c:	8002f8c0 	call	8002f8c <printf>
		printf("n/s indicator = '%s'\n", ns_ind);
 8000930:	e0bff584 	addi	r2,fp,-42
 8000934:	01020074 	movhi	r4,2049
 8000938:	2106b004 	addi	r4,r4,6848
 800093c:	100b883a 	mov	r5,r2
 8000940:	8002f8c0 	call	8002f8c <printf>
		printf("longitude = '%s'\n", longitude);
 8000944:	e0bff904 	addi	r2,fp,-28
 8000948:	01020074 	movhi	r4,2049
 800094c:	2106b604 	addi	r4,r4,6872
 8000950:	100b883a 	mov	r5,r2
 8000954:	8002f8c0 	call	8002f8c <printf>
		printf("e/w indicator = '%s'\n", ew_ind);
 8000958:	e0bff604 	addi	r2,fp,-40
 800095c:	01020074 	movhi	r4,2049
 8000960:	2106bb04 	addi	r4,r4,6892
 8000964:	100b883a 	mov	r5,r2
 8000968:	8002f8c0 	call	8002f8c <printf>
		printf("gps link = '%s'\n", gps_fix);
 800096c:	e0bffbc4 	addi	r2,fp,-17
 8000970:	01020074 	movhi	r4,2049
 8000974:	2106c104 	addi	r4,r4,6916
 8000978:	100b883a 	mov	r5,r2
 800097c:	8002f8c0 	call	8002f8c <printf>
		printf("# of satelites = '%s'\n", no_sat);
 8000980:	e0bffc44 	addi	r2,fp,-15
 8000984:	01020074 	movhi	r4,2049
 8000988:	2106c604 	addi	r4,r4,6936
 800098c:	100b883a 	mov	r5,r2
 8000990:	8002f8c0 	call	8002f8c <printf>

		*HEX0 = utc_time[5]-48;
 8000994:	00800074 	movhi	r2,1
 8000998:	10841004 	addi	r2,r2,4160
 800099c:	e0fff403 	ldbu	r3,-48(fp)
 80009a0:	18fff404 	addi	r3,r3,-48
 80009a4:	10c00005 	stb	r3,0(r2)
		*HEX1 = utc_time[4]-48;
 80009a8:	00800074 	movhi	r2,1
 80009ac:	10842c04 	addi	r2,r2,4272
 80009b0:	e0fff3c3 	ldbu	r3,-49(fp)
 80009b4:	18fff404 	addi	r3,r3,-48
 80009b8:	10c00005 	stb	r3,0(r2)
		*HEX2 = utc_time[3]-48;
 80009bc:	00800074 	movhi	r2,1
 80009c0:	10842804 	addi	r2,r2,4256
 80009c4:	e0fff383 	ldbu	r3,-50(fp)
 80009c8:	18fff404 	addi	r3,r3,-48
 80009cc:	10c00005 	stb	r3,0(r2)
		*HEX3 = utc_time[2]-48;
 80009d0:	00800074 	movhi	r2,1
 80009d4:	10842404 	addi	r2,r2,4240
 80009d8:	e0fff343 	ldbu	r3,-51(fp)
 80009dc:	18fff404 	addi	r3,r3,-48
 80009e0:	10c00005 	stb	r3,0(r2)
		*HEX4 = utc_time[1]-48;
 80009e4:	00800074 	movhi	r2,1
 80009e8:	10842004 	addi	r2,r2,4224
 80009ec:	e0fff303 	ldbu	r3,-52(fp)
 80009f0:	18fff404 	addi	r3,r3,-48
 80009f4:	10c00005 	stb	r3,0(r2)
		*HEX5 = utc_time[0]-48;
 80009f8:	00800074 	movhi	r2,1
 80009fc:	10841c04 	addi	r2,r2,4208
 8000a00:	e0fff2c3 	ldbu	r3,-53(fp)
 8000a04:	18fff404 	addi	r3,r3,-48
 8000a08:	10c00005 	stb	r3,0(r2)

	}
	fclose(fp);
 8000a0c:	e13fcf17 	ldw	r4,-196(fp)
 8000a10:	80010dc0 	call	80010dc <fclose>
	return have_link;
 8000a14:	e0bfcc17 	ldw	r2,-208(fp)
}
 8000a18:	e6ffff04 	addi	sp,fp,-4
 8000a1c:	dfc00217 	ldw	ra,8(sp)
 8000a20:	df000117 	ldw	fp,4(sp)
 8000a24:	dc000017 	ldw	r16,0(sp)
 8000a28:	dec00304 	addi	sp,sp,12
 8000a2c:	f800283a 	ret

08000a30 <erase_log>:

int erase_log() {
 8000a30:	defff204 	addi	sp,sp,-56
 8000a34:	dfc00d15 	stw	ra,52(sp)
 8000a38:	df000c15 	stw	fp,48(sp)
 8000a3c:	df000c04 	addi	fp,sp,48
	const char * REPLY = "$PMTK001,184,3*3D";
 8000a40:	00820074 	movhi	r2,2049
 8000a44:	1086cc04 	addi	r2,r2,6960
 8000a48:	e0bff715 	stw	r2,-36(fp)
	const char * ERASE = "$PMTK184,1*22\r\n";
 8000a4c:	00820074 	movhi	r2,2049
 8000a50:	1086d104 	addi	r2,r2,6980
 8000a54:	e0bff815 	stw	r2,-32(fp)
	FILE* fp;
	int check_type = 1;
 8000a58:	00800044 	movi	r2,1
 8000a5c:	e0bff415 	stw	r2,-48(fp)
	char incoming;
	char message[20];
	int i=0;
 8000a60:	e03ff615 	stw	zero,-40(fp)
	int hash = 2;
 8000a64:	00800084 	movi	r2,2
 8000a68:	e0bff915 	stw	r2,-28(fp)
	fp = fopen("/dev/uart_0", "r+");
 8000a6c:	01020074 	movhi	r4,2049
 8000a70:	21069904 	addi	r4,r4,6756
 8000a74:	01420074 	movhi	r5,2049
 8000a78:	29469c04 	addi	r5,r5,6768
 8000a7c:	80017ec0 	call	80017ec <fopen>
 8000a80:	e0bffa15 	stw	r2,-24(fp)
		if(fp == NULL)
 8000a84:	e0bffa17 	ldw	r2,-24(fp)
 8000a88:	1000041e 	bne	r2,zero,8000a9c <erase_log+0x6c>
			printf("RS232 error. \n");
 8000a8c:	01020074 	movhi	r4,2049
 8000a90:	21069d04 	addi	r4,r4,6772
 8000a94:	80030800 	call	8003080 <puts>
 8000a98:	00002e06 	br	8000b54 <erase_log+0x124>
		else {
			fwrite(ERASE, strlen(ERASE), 1, fp);
 8000a9c:	e13ff817 	ldw	r4,-32(fp)
 8000aa0:	80034700 	call	8003470 <strlen>
 8000aa4:	e13ff817 	ldw	r4,-32(fp)
 8000aa8:	100b883a 	mov	r5,r2
 8000aac:	01800044 	movi	r6,1
 8000ab0:	e1fffa17 	ldw	r7,-24(fp)
 8000ab4:	80023380 	call	8002338 <fwrite>

			while(check_type){
 8000ab8:	00002406 	br	8000b4c <erase_log+0x11c>
						while(incoming != '$') {
 8000abc:	00000306 	br	8000acc <erase_log+0x9c>
							incoming = getc(fp);
 8000ac0:	e13ffa17 	ldw	r4,-24(fp)
 8000ac4:	80023f80 	call	80023f8 <getc>
 8000ac8:	e0bff505 	stb	r2,-44(fp)
			printf("RS232 error. \n");
		else {
			fwrite(ERASE, strlen(ERASE), 1, fp);

			while(check_type){
						while(incoming != '$') {
 8000acc:	e0bff507 	ldb	r2,-44(fp)
 8000ad0:	10800918 	cmpnei	r2,r2,36
 8000ad4:	103ffa1e 	bne	r2,zero,8000ac0 <__alt_data_end+0xfc000ac0>
							incoming = getc(fp);
						}
						i=0;
 8000ad8:	e03ff615 	stw	zero,-40(fp)
						while(incoming != '\r') {
 8000adc:	00000b06 	br	8000b0c <erase_log+0xdc>
							*(message+i) = incoming;
 8000ae0:	e0bff617 	ldw	r2,-40(fp)
 8000ae4:	e0fffb04 	addi	r3,fp,-20
 8000ae8:	1885883a 	add	r2,r3,r2
 8000aec:	e0fff503 	ldbu	r3,-44(fp)
 8000af0:	10c00005 	stb	r3,0(r2)
							incoming = getc(fp);
 8000af4:	e13ffa17 	ldw	r4,-24(fp)
 8000af8:	80023f80 	call	80023f8 <getc>
 8000afc:	e0bff505 	stb	r2,-44(fp)
							i++;
 8000b00:	e0bff617 	ldw	r2,-40(fp)
 8000b04:	10800044 	addi	r2,r2,1
 8000b08:	e0bff615 	stw	r2,-40(fp)
			while(check_type){
						while(incoming != '$') {
							incoming = getc(fp);
						}
						i=0;
						while(incoming != '\r') {
 8000b0c:	e0bff507 	ldb	r2,-44(fp)
 8000b10:	10800358 	cmpnei	r2,r2,13
 8000b14:	103ff21e 	bne	r2,zero,8000ae0 <__alt_data_end+0xfc000ae0>
							*(message+i) = incoming;
							incoming = getc(fp);
							i++;
						}
						*(message+i) = '\0';
 8000b18:	e0bff617 	ldw	r2,-40(fp)
 8000b1c:	e0fffb04 	addi	r3,fp,-20
 8000b20:	1885883a 	add	r2,r3,r2
 8000b24:	10000005 	stb	zero,0(r2)
						hash = strncmp(message, REPLY, 17);
 8000b28:	e0bffb04 	addi	r2,fp,-20
 8000b2c:	1009883a 	mov	r4,r2
 8000b30:	e17ff717 	ldw	r5,-36(fp)
 8000b34:	01800444 	movi	r6,17
 8000b38:	80035080 	call	8003508 <strncmp>
 8000b3c:	e0bff915 	stw	r2,-28(fp)
//						printf("'%s' '%s' check = '%d'\n", message, REPLY, hash);
						if(hash == 0) {
 8000b40:	e0bff917 	ldw	r2,-28(fp)
 8000b44:	1000011e 	bne	r2,zero,8000b4c <erase_log+0x11c>
							check_type = 0;
 8000b48:	e03ff415 	stw	zero,-48(fp)
		if(fp == NULL)
			printf("RS232 error. \n");
		else {
			fwrite(ERASE, strlen(ERASE), 1, fp);

			while(check_type){
 8000b4c:	e0bff417 	ldw	r2,-48(fp)
 8000b50:	103fda1e 	bne	r2,zero,8000abc <__alt_data_end+0xfc000abc>
							check_type = 0;
						}
			}
		}

	if(!fclose(fp))
 8000b54:	e13ffa17 	ldw	r4,-24(fp)
 8000b58:	80010dc0 	call	80010dc <fclose>
 8000b5c:	1000021e 	bne	r2,zero,8000b68 <erase_log+0x138>
		return 1;
 8000b60:	00800044 	movi	r2,1
 8000b64:	00000106 	br	8000b6c <erase_log+0x13c>
	else
		return 0;
 8000b68:	0005883a 	mov	r2,zero
}
 8000b6c:	e037883a 	mov	sp,fp
 8000b70:	dfc00117 	ldw	ra,4(sp)
 8000b74:	df000017 	ldw	fp,0(sp)
 8000b78:	dec00204 	addi	sp,sp,8
 8000b7c:	f800283a 	ret

08000b80 <start_log>:

int start_log() {
 8000b80:	defff104 	addi	sp,sp,-60
 8000b84:	dfc00e15 	stw	ra,56(sp)
 8000b88:	df000d15 	stw	fp,52(sp)
 8000b8c:	df000d04 	addi	fp,sp,52
	const char * REPLY = "$PMTK001,185,3*3C";
 8000b90:	00820074 	movhi	r2,2049
 8000b94:	1086d504 	addi	r2,r2,6996
 8000b98:	e0bff615 	stw	r2,-40(fp)
	const char * START = "$PMTK185,0*22\r\n";
 8000b9c:	00820074 	movhi	r2,2049
 8000ba0:	1086da04 	addi	r2,r2,7016
 8000ba4:	e0bff715 	stw	r2,-36(fp)
	FILE* fp;
	int check_type = 1;
 8000ba8:	00800044 	movi	r2,1
 8000bac:	e0bff315 	stw	r2,-52(fp)
	char incoming;
	char message[20];
	int i=0;
 8000bb0:	e03ff515 	stw	zero,-44(fp)
	int checkcount = 0;
 8000bb4:	e03ff815 	stw	zero,-32(fp)
	int hash = 2;
 8000bb8:	00800084 	movi	r2,2
 8000bbc:	e0bff915 	stw	r2,-28(fp)
	fp = fopen("/dev/uart_0", "r+");
 8000bc0:	01020074 	movhi	r4,2049
 8000bc4:	21069904 	addi	r4,r4,6756
 8000bc8:	01420074 	movhi	r5,2049
 8000bcc:	29469c04 	addi	r5,r5,6768
 8000bd0:	80017ec0 	call	80017ec <fopen>
 8000bd4:	e0bffa15 	stw	r2,-24(fp)
		if(fp == NULL)
 8000bd8:	e0bffa17 	ldw	r2,-24(fp)
 8000bdc:	1000041e 	bne	r2,zero,8000bf0 <start_log+0x70>
			printf("RS232 error. \n");
 8000be0:	01020074 	movhi	r4,2049
 8000be4:	21069d04 	addi	r4,r4,6772
 8000be8:	80030800 	call	8003080 <puts>
 8000bec:	00003106 	br	8000cb4 <start_log+0x134>
		else {
			fwrite(START, strlen(START), 1, fp);
 8000bf0:	e13ff717 	ldw	r4,-36(fp)
 8000bf4:	80034700 	call	8003470 <strlen>
 8000bf8:	e13ff717 	ldw	r4,-36(fp)
 8000bfc:	100b883a 	mov	r5,r2
 8000c00:	01800044 	movi	r6,1
 8000c04:	e1fffa17 	ldw	r7,-24(fp)
 8000c08:	80023380 	call	8002338 <fwrite>

			while(check_type && checkcount <100){
 8000c0c:	00002406 	br	8000ca0 <start_log+0x120>
						while(incoming != '$') {
 8000c10:	00000306 	br	8000c20 <start_log+0xa0>
							incoming = getc(fp);
 8000c14:	e13ffa17 	ldw	r4,-24(fp)
 8000c18:	80023f80 	call	80023f8 <getc>
 8000c1c:	e0bff405 	stb	r2,-48(fp)
			printf("RS232 error. \n");
		else {
			fwrite(START, strlen(START), 1, fp);

			while(check_type && checkcount <100){
						while(incoming != '$') {
 8000c20:	e0bff407 	ldb	r2,-48(fp)
 8000c24:	10800918 	cmpnei	r2,r2,36
 8000c28:	103ffa1e 	bne	r2,zero,8000c14 <__alt_data_end+0xfc000c14>
							incoming = getc(fp);
						}
						i=0;
 8000c2c:	e03ff515 	stw	zero,-44(fp)
						while(incoming != '\r') {
 8000c30:	00000b06 	br	8000c60 <start_log+0xe0>
							*(message+i) = incoming;
 8000c34:	e0bff517 	ldw	r2,-44(fp)
 8000c38:	e0fffb04 	addi	r3,fp,-20
 8000c3c:	1885883a 	add	r2,r3,r2
 8000c40:	e0fff403 	ldbu	r3,-48(fp)
 8000c44:	10c00005 	stb	r3,0(r2)
							incoming = getc(fp);
 8000c48:	e13ffa17 	ldw	r4,-24(fp)
 8000c4c:	80023f80 	call	80023f8 <getc>
 8000c50:	e0bff405 	stb	r2,-48(fp)
							i++;
 8000c54:	e0bff517 	ldw	r2,-44(fp)
 8000c58:	10800044 	addi	r2,r2,1
 8000c5c:	e0bff515 	stw	r2,-44(fp)
			while(check_type && checkcount <100){
						while(incoming != '$') {
							incoming = getc(fp);
						}
						i=0;
						while(incoming != '\r') {
 8000c60:	e0bff407 	ldb	r2,-48(fp)
 8000c64:	10800358 	cmpnei	r2,r2,13
 8000c68:	103ff21e 	bne	r2,zero,8000c34 <__alt_data_end+0xfc000c34>
							*(message+i) = incoming;
							incoming = getc(fp);
							i++;
						}
						*(message+i) = '\0';
 8000c6c:	e0bff517 	ldw	r2,-44(fp)
 8000c70:	e0fffb04 	addi	r3,fp,-20
 8000c74:	1885883a 	add	r2,r3,r2
 8000c78:	10000005 	stb	zero,0(r2)
						hash = strncmp(message, REPLY, 17);
 8000c7c:	e0bffb04 	addi	r2,fp,-20
 8000c80:	1009883a 	mov	r4,r2
 8000c84:	e17ff617 	ldw	r5,-40(fp)
 8000c88:	01800444 	movi	r6,17
 8000c8c:	80035080 	call	8003508 <strncmp>
 8000c90:	e0bff915 	stw	r2,-28(fp)
//						printf("'%s' '%s' check = '%d'\n", message, REPLY, hash);
						if(hash == 0) {
 8000c94:	e0bff917 	ldw	r2,-28(fp)
 8000c98:	1000011e 	bne	r2,zero,8000ca0 <start_log+0x120>
							check_type = 0;
 8000c9c:	e03ff315 	stw	zero,-52(fp)
		if(fp == NULL)
			printf("RS232 error. \n");
		else {
			fwrite(START, strlen(START), 1, fp);

			while(check_type && checkcount <100){
 8000ca0:	e0bff317 	ldw	r2,-52(fp)
 8000ca4:	10000326 	beq	r2,zero,8000cb4 <start_log+0x134>
 8000ca8:	e0bff817 	ldw	r2,-32(fp)
 8000cac:	10801910 	cmplti	r2,r2,100
 8000cb0:	103fd71e 	bne	r2,zero,8000c10 <__alt_data_end+0xfc000c10>
							check_type = 0;
						}
			}
		}

	if(!fclose(fp))
 8000cb4:	e13ffa17 	ldw	r4,-24(fp)
 8000cb8:	80010dc0 	call	80010dc <fclose>
 8000cbc:	1000021e 	bne	r2,zero,8000cc8 <start_log+0x148>
		return 1;
 8000cc0:	00800044 	movi	r2,1
 8000cc4:	00000106 	br	8000ccc <start_log+0x14c>
	else
		return 0;
 8000cc8:	0005883a 	mov	r2,zero
}
 8000ccc:	e037883a 	mov	sp,fp
 8000cd0:	dfc00117 	ldw	ra,4(sp)
 8000cd4:	df000017 	ldw	fp,0(sp)
 8000cd8:	dec00204 	addi	sp,sp,8
 8000cdc:	f800283a 	ret

08000ce0 <snapshot_log>:

int snapshot_log() {
 8000ce0:	defff204 	addi	sp,sp,-56
 8000ce4:	dfc00d15 	stw	ra,52(sp)
 8000ce8:	df000c15 	stw	fp,48(sp)
 8000cec:	df000c04 	addi	fp,sp,48
	const char * REPLY = "$PMTK001,186,3*3F";
 8000cf0:	00820074 	movhi	r2,2049
 8000cf4:	1086de04 	addi	r2,r2,7032
 8000cf8:	e0bff715 	stw	r2,-36(fp)
	const char * SNAP = "$PMTK186,1*20\r\n";
 8000cfc:	00820074 	movhi	r2,2049
 8000d00:	1086e304 	addi	r2,r2,7052
 8000d04:	e0bff815 	stw	r2,-32(fp)
	FILE* fp;
	int check_type = 1;
 8000d08:	00800044 	movi	r2,1
 8000d0c:	e0bff415 	stw	r2,-48(fp)
	char incoming;
	char message[20];
	int i=0;
 8000d10:	e03ff615 	stw	zero,-40(fp)
	int hash = 2;
 8000d14:	00800084 	movi	r2,2
 8000d18:	e0bff915 	stw	r2,-28(fp)
	fp = fopen("/dev/uart_0", "r+");
 8000d1c:	01020074 	movhi	r4,2049
 8000d20:	21069904 	addi	r4,r4,6756
 8000d24:	01420074 	movhi	r5,2049
 8000d28:	29469c04 	addi	r5,r5,6768
 8000d2c:	80017ec0 	call	80017ec <fopen>
 8000d30:	e0bffa15 	stw	r2,-24(fp)
		if(fp == NULL)
 8000d34:	e0bffa17 	ldw	r2,-24(fp)
 8000d38:	1000041e 	bne	r2,zero,8000d4c <snapshot_log+0x6c>
			printf("RS232 error. \n");
 8000d3c:	01020074 	movhi	r4,2049
 8000d40:	21069d04 	addi	r4,r4,6772
 8000d44:	80030800 	call	8003080 <puts>
 8000d48:	00002e06 	br	8000e04 <snapshot_log+0x124>
		else {
			fwrite(SNAP, strlen(SNAP), 1, fp);
 8000d4c:	e13ff817 	ldw	r4,-32(fp)
 8000d50:	80034700 	call	8003470 <strlen>
 8000d54:	e13ff817 	ldw	r4,-32(fp)
 8000d58:	100b883a 	mov	r5,r2
 8000d5c:	01800044 	movi	r6,1
 8000d60:	e1fffa17 	ldw	r7,-24(fp)
 8000d64:	80023380 	call	8002338 <fwrite>

			while(check_type){
 8000d68:	00002406 	br	8000dfc <snapshot_log+0x11c>
						while(incoming != '$') {
 8000d6c:	00000306 	br	8000d7c <snapshot_log+0x9c>
							incoming = getc(fp);
 8000d70:	e13ffa17 	ldw	r4,-24(fp)
 8000d74:	80023f80 	call	80023f8 <getc>
 8000d78:	e0bff505 	stb	r2,-44(fp)
			printf("RS232 error. \n");
		else {
			fwrite(SNAP, strlen(SNAP), 1, fp);

			while(check_type){
						while(incoming != '$') {
 8000d7c:	e0bff507 	ldb	r2,-44(fp)
 8000d80:	10800918 	cmpnei	r2,r2,36
 8000d84:	103ffa1e 	bne	r2,zero,8000d70 <__alt_data_end+0xfc000d70>
							incoming = getc(fp);
						}
						i=0;
 8000d88:	e03ff615 	stw	zero,-40(fp)
						while(incoming != '\r') {
 8000d8c:	00000b06 	br	8000dbc <snapshot_log+0xdc>
							*(message+i) = incoming;
 8000d90:	e0bff617 	ldw	r2,-40(fp)
 8000d94:	e0fffb04 	addi	r3,fp,-20
 8000d98:	1885883a 	add	r2,r3,r2
 8000d9c:	e0fff503 	ldbu	r3,-44(fp)
 8000da0:	10c00005 	stb	r3,0(r2)
							incoming = getc(fp);
 8000da4:	e13ffa17 	ldw	r4,-24(fp)
 8000da8:	80023f80 	call	80023f8 <getc>
 8000dac:	e0bff505 	stb	r2,-44(fp)
							i++;
 8000db0:	e0bff617 	ldw	r2,-40(fp)
 8000db4:	10800044 	addi	r2,r2,1
 8000db8:	e0bff615 	stw	r2,-40(fp)
			while(check_type){
						while(incoming != '$') {
							incoming = getc(fp);
						}
						i=0;
						while(incoming != '\r') {
 8000dbc:	e0bff507 	ldb	r2,-44(fp)
 8000dc0:	10800358 	cmpnei	r2,r2,13
 8000dc4:	103ff21e 	bne	r2,zero,8000d90 <__alt_data_end+0xfc000d90>
							*(message+i) = incoming;
							incoming = getc(fp);
							i++;
						}
						*(message+i) = '\0';
 8000dc8:	e0bff617 	ldw	r2,-40(fp)
 8000dcc:	e0fffb04 	addi	r3,fp,-20
 8000dd0:	1885883a 	add	r2,r3,r2
 8000dd4:	10000005 	stb	zero,0(r2)
						hash = strncmp(message, REPLY, 17);
 8000dd8:	e0bffb04 	addi	r2,fp,-20
 8000ddc:	1009883a 	mov	r4,r2
 8000de0:	e17ff717 	ldw	r5,-36(fp)
 8000de4:	01800444 	movi	r6,17
 8000de8:	80035080 	call	8003508 <strncmp>
 8000dec:	e0bff915 	stw	r2,-28(fp)
//						printf("'%s' '%s' check = '%d'\n", message, REPLY, hash);
						if(hash == 0) {
 8000df0:	e0bff917 	ldw	r2,-28(fp)
 8000df4:	1000011e 	bne	r2,zero,8000dfc <snapshot_log+0x11c>
							check_type = 0;
 8000df8:	e03ff415 	stw	zero,-48(fp)
		if(fp == NULL)
			printf("RS232 error. \n");
		else {
			fwrite(SNAP, strlen(SNAP), 1, fp);

			while(check_type){
 8000dfc:	e0bff417 	ldw	r2,-48(fp)
 8000e00:	103fda1e 	bne	r2,zero,8000d6c <__alt_data_end+0xfc000d6c>
							check_type = 0;
						}
			}
		}

	if(!fclose(fp))
 8000e04:	e13ffa17 	ldw	r4,-24(fp)
 8000e08:	80010dc0 	call	80010dc <fclose>
 8000e0c:	1000021e 	bne	r2,zero,8000e18 <snapshot_log+0x138>
		return 1;
 8000e10:	00800044 	movi	r2,1
 8000e14:	00000106 	br	8000e1c <snapshot_log+0x13c>
	else
		return 0;
 8000e18:	0005883a 	mov	r2,zero
}
 8000e1c:	e037883a 	mov	sp,fp
 8000e20:	dfc00117 	ldw	ra,4(sp)
 8000e24:	df000017 	ldw	fp,0(sp)
 8000e28:	dec00204 	addi	sp,sp,8
 8000e2c:	f800283a 	ret

08000e30 <dump_log>:

int dump_log() {
 8000e30:	defff004 	addi	sp,sp,-64
 8000e34:	dfc00f15 	stw	ra,60(sp)
 8000e38:	df000e15 	stw	fp,56(sp)
 8000e3c:	df000e04 	addi	fp,sp,56
	const char * REPLY = "$PMTK001,622,3*36";
 8000e40:	00820074 	movhi	r2,2049
 8000e44:	1086e704 	addi	r2,r2,7068
 8000e48:	e0bff615 	stw	r2,-40(fp)
	const char * DUMP = "$PMTK622,1*29\r\n";
 8000e4c:	00820074 	movhi	r2,2049
 8000e50:	1086ec04 	addi	r2,r2,7088
 8000e54:	e0bff715 	stw	r2,-36(fp)
	FILE* fp;
	int check_type = 1;
 8000e58:	00800044 	movi	r2,1
 8000e5c:	e0bff215 	stw	r2,-56(fp)
	char incoming;
	char message[20];
	char *dump;
	int i=0;
 8000e60:	e03ff415 	stw	zero,-48(fp)
	int hash = 2;
 8000e64:	00800084 	movi	r2,2
 8000e68:	e0bff815 	stw	r2,-32(fp)
	fp = fopen("/dev/uart_0", "r+");
 8000e6c:	01020074 	movhi	r4,2049
 8000e70:	21069904 	addi	r4,r4,6756
 8000e74:	01420074 	movhi	r5,2049
 8000e78:	29469c04 	addi	r5,r5,6768
 8000e7c:	80017ec0 	call	80017ec <fopen>
 8000e80:	e0bff915 	stw	r2,-28(fp)
		if(fp == NULL)
 8000e84:	e0bff917 	ldw	r2,-28(fp)
 8000e88:	1000041e 	bne	r2,zero,8000e9c <dump_log+0x6c>
			printf("RS232 error. \n");
 8000e8c:	01020074 	movhi	r4,2049
 8000e90:	21069d04 	addi	r4,r4,6772
 8000e94:	80030800 	call	8003080 <puts>
 8000e98:	00003f06 	br	8000f98 <dump_log+0x168>
		else {
			fwrite(DUMP, strlen(DUMP), 1, fp);
 8000e9c:	e13ff717 	ldw	r4,-36(fp)
 8000ea0:	80034700 	call	8003470 <strlen>
 8000ea4:	e13ff717 	ldw	r4,-36(fp)
 8000ea8:	100b883a 	mov	r5,r2
 8000eac:	01800044 	movi	r6,1
 8000eb0:	e1fff917 	ldw	r7,-28(fp)
 8000eb4:	80023380 	call	8002338 <fwrite>

			while(check_type){
 8000eb8:	00003106 	br	8000f80 <dump_log+0x150>
						int j=0;
 8000ebc:	e03ff515 	stw	zero,-44(fp)
						while(incoming != '$') {
 8000ec0:	00000306 	br	8000ed0 <dump_log+0xa0>
							incoming = getc(fp);
 8000ec4:	e13ff917 	ldw	r4,-28(fp)
 8000ec8:	80023f80 	call	80023f8 <getc>
 8000ecc:	e0bff305 	stb	r2,-52(fp)
		else {
			fwrite(DUMP, strlen(DUMP), 1, fp);

			while(check_type){
						int j=0;
						while(incoming != '$') {
 8000ed0:	e0bff307 	ldb	r2,-52(fp)
 8000ed4:	10800918 	cmpnei	r2,r2,36
 8000ed8:	103ffa1e 	bne	r2,zero,8000ec4 <__alt_data_end+0xfc000ec4>
							incoming = getc(fp);
						}
						i=0;
 8000edc:	e03ff415 	stw	zero,-48(fp)
						while(incoming != '\r') {
 8000ee0:	00001306 	br	8000f30 <dump_log+0x100>
							*(message+i) = incoming;
 8000ee4:	e0bff417 	ldw	r2,-48(fp)
 8000ee8:	e0fffb04 	addi	r3,fp,-20
 8000eec:	1885883a 	add	r2,r3,r2
 8000ef0:	e0fff303 	ldbu	r3,-52(fp)
 8000ef4:	10c00005 	stb	r3,0(r2)
							*(dump+j) = incoming;
 8000ef8:	e0bff517 	ldw	r2,-44(fp)
 8000efc:	e0fffa17 	ldw	r3,-24(fp)
 8000f00:	1885883a 	add	r2,r3,r2
 8000f04:	e0fff303 	ldbu	r3,-52(fp)
 8000f08:	10c00005 	stb	r3,0(r2)
							incoming = getc(fp);
 8000f0c:	e13ff917 	ldw	r4,-28(fp)
 8000f10:	80023f80 	call	80023f8 <getc>
 8000f14:	e0bff305 	stb	r2,-52(fp)
							i++;
 8000f18:	e0bff417 	ldw	r2,-48(fp)
 8000f1c:	10800044 	addi	r2,r2,1
 8000f20:	e0bff415 	stw	r2,-48(fp)
							j++;
 8000f24:	e0bff517 	ldw	r2,-44(fp)
 8000f28:	10800044 	addi	r2,r2,1
 8000f2c:	e0bff515 	stw	r2,-44(fp)
						int j=0;
						while(incoming != '$') {
							incoming = getc(fp);
						}
						i=0;
						while(incoming != '\r') {
 8000f30:	e0bff307 	ldb	r2,-52(fp)
 8000f34:	10800358 	cmpnei	r2,r2,13
 8000f38:	103fea1e 	bne	r2,zero,8000ee4 <__alt_data_end+0xfc000ee4>
							*(dump+j) = incoming;
							incoming = getc(fp);
							i++;
							j++;
						}
						*(message+i) = '\0';
 8000f3c:	e0bff417 	ldw	r2,-48(fp)
 8000f40:	e0fffb04 	addi	r3,fp,-20
 8000f44:	1885883a 	add	r2,r3,r2
 8000f48:	10000005 	stb	zero,0(r2)
						*(dump+i) = '\0';
 8000f4c:	e0bff417 	ldw	r2,-48(fp)
 8000f50:	e0fffa17 	ldw	r3,-24(fp)
 8000f54:	1885883a 	add	r2,r3,r2
 8000f58:	10000005 	stb	zero,0(r2)
						hash = strncmp(message, REPLY, 17);
 8000f5c:	e0bffb04 	addi	r2,fp,-20
 8000f60:	1009883a 	mov	r4,r2
 8000f64:	e17ff617 	ldw	r5,-40(fp)
 8000f68:	01800444 	movi	r6,17
 8000f6c:	80035080 	call	8003508 <strncmp>
 8000f70:	e0bff815 	stw	r2,-32(fp)
//						printf("'%s' '%s' check = '%d'\n", message, REPLY, hash);
						if(hash == 0) {
 8000f74:	e0bff817 	ldw	r2,-32(fp)
 8000f78:	1000011e 	bne	r2,zero,8000f80 <dump_log+0x150>
							check_type = 0;
 8000f7c:	e03ff215 	stw	zero,-56(fp)
		if(fp == NULL)
			printf("RS232 error. \n");
		else {
			fwrite(DUMP, strlen(DUMP), 1, fp);

			while(check_type){
 8000f80:	e0bff217 	ldw	r2,-56(fp)
 8000f84:	103fcd1e 	bne	r2,zero,8000ebc <__alt_data_end+0xfc000ebc>
//						printf("'%s' '%s' check = '%d'\n", message, REPLY, hash);
						if(hash == 0) {
							check_type = 0;
						}
			}
			printf("\n\n%s\n\n", dump);
 8000f88:	01020074 	movhi	r4,2049
 8000f8c:	2106f004 	addi	r4,r4,7104
 8000f90:	e17ffa17 	ldw	r5,-24(fp)
 8000f94:	8002f8c0 	call	8002f8c <printf>
		}

	if(!fclose(fp))
 8000f98:	e13ff917 	ldw	r4,-28(fp)
 8000f9c:	80010dc0 	call	80010dc <fclose>
 8000fa0:	1000021e 	bne	r2,zero,8000fac <dump_log+0x17c>
		return 1;
 8000fa4:	00800044 	movi	r2,1
 8000fa8:	00000106 	br	8000fb0 <dump_log+0x180>
	else
		return 0;
 8000fac:	0005883a 	mov	r2,zero
}
 8000fb0:	e037883a 	mov	sp,fp
 8000fb4:	dfc00117 	ldw	ra,4(sp)
 8000fb8:	df000017 	ldw	fp,0(sp)
 8000fbc:	dec00204 	addi	sp,sp,8
 8000fc0:	f800283a 	ret

08000fc4 <atoi>:
 8000fc4:	000b883a 	mov	r5,zero
 8000fc8:	01800284 	movi	r6,10
 8000fcc:	80038301 	jmpi	8003830 <strtol>

08000fd0 <_atoi_r>:
 8000fd0:	000d883a 	mov	r6,zero
 8000fd4:	01c00284 	movi	r7,10
 8000fd8:	80035c81 	jmpi	80035c8 <_strtol_r>

08000fdc <_fclose_r>:
 8000fdc:	28003226 	beq	r5,zero,80010a8 <_fclose_r+0xcc>
 8000fe0:	defffc04 	addi	sp,sp,-16
 8000fe4:	dc400115 	stw	r17,4(sp)
 8000fe8:	2023883a 	mov	r17,r4
 8000fec:	dc000015 	stw	r16,0(sp)
 8000ff0:	dfc00315 	stw	ra,12(sp)
 8000ff4:	dc800215 	stw	r18,8(sp)
 8000ff8:	2821883a 	mov	r16,r5
 8000ffc:	80016bc0 	call	80016bc <__sfp_lock_acquire>
 8001000:	88000226 	beq	r17,zero,800100c <_fclose_r+0x30>
 8001004:	88800e17 	ldw	r2,56(r17)
 8001008:	10002926 	beq	r2,zero,80010b0 <_fclose_r+0xd4>
 800100c:	8080030f 	ldh	r2,12(r16)
 8001010:	10002226 	beq	r2,zero,800109c <_fclose_r+0xc0>
 8001014:	8809883a 	mov	r4,r17
 8001018:	800b883a 	mov	r5,r16
 800101c:	80010f00 	call	80010f0 <_fflush_r>
 8001020:	1025883a 	mov	r18,r2
 8001024:	80800b17 	ldw	r2,44(r16)
 8001028:	10000426 	beq	r2,zero,800103c <_fclose_r+0x60>
 800102c:	81400717 	ldw	r5,28(r16)
 8001030:	8809883a 	mov	r4,r17
 8001034:	103ee83a 	callr	r2
 8001038:	10002616 	blt	r2,zero,80010d4 <_fclose_r+0xf8>
 800103c:	8080030b 	ldhu	r2,12(r16)
 8001040:	1080200c 	andi	r2,r2,128
 8001044:	10001f1e 	bne	r2,zero,80010c4 <_fclose_r+0xe8>
 8001048:	81400c17 	ldw	r5,48(r16)
 800104c:	28000526 	beq	r5,zero,8001064 <_fclose_r+0x88>
 8001050:	80801004 	addi	r2,r16,64
 8001054:	28800226 	beq	r5,r2,8001060 <_fclose_r+0x84>
 8001058:	8809883a 	mov	r4,r17
 800105c:	800192c0 	call	800192c <_free_r>
 8001060:	80000c15 	stw	zero,48(r16)
 8001064:	81401117 	ldw	r5,68(r16)
 8001068:	28000326 	beq	r5,zero,8001078 <_fclose_r+0x9c>
 800106c:	8809883a 	mov	r4,r17
 8001070:	800192c0 	call	800192c <_free_r>
 8001074:	80001115 	stw	zero,68(r16)
 8001078:	8000030d 	sth	zero,12(r16)
 800107c:	80016c00 	call	80016c0 <__sfp_lock_release>
 8001080:	9005883a 	mov	r2,r18
 8001084:	dfc00317 	ldw	ra,12(sp)
 8001088:	dc800217 	ldw	r18,8(sp)
 800108c:	dc400117 	ldw	r17,4(sp)
 8001090:	dc000017 	ldw	r16,0(sp)
 8001094:	dec00404 	addi	sp,sp,16
 8001098:	f800283a 	ret
 800109c:	80016c00 	call	80016c0 <__sfp_lock_release>
 80010a0:	0005883a 	mov	r2,zero
 80010a4:	003ff706 	br	8001084 <__alt_data_end+0xfc001084>
 80010a8:	0005883a 	mov	r2,zero
 80010ac:	f800283a 	ret
 80010b0:	8809883a 	mov	r4,r17
 80010b4:	80016ac0 	call	80016ac <__sinit>
 80010b8:	8080030f 	ldh	r2,12(r16)
 80010bc:	103fd51e 	bne	r2,zero,8001014 <__alt_data_end+0xfc001014>
 80010c0:	003ff606 	br	800109c <__alt_data_end+0xfc00109c>
 80010c4:	81400417 	ldw	r5,16(r16)
 80010c8:	8809883a 	mov	r4,r17
 80010cc:	800192c0 	call	800192c <_free_r>
 80010d0:	003fdd06 	br	8001048 <__alt_data_end+0xfc001048>
 80010d4:	04bfffc4 	movi	r18,-1
 80010d8:	003fd806 	br	800103c <__alt_data_end+0xfc00103c>

080010dc <fclose>:
 80010dc:	00820074 	movhi	r2,2049
 80010e0:	108f3204 	addi	r2,r2,15560
 80010e4:	200b883a 	mov	r5,r4
 80010e8:	11000017 	ldw	r4,0(r2)
 80010ec:	8000fdc1 	jmpi	8000fdc <_fclose_r>

080010f0 <_fflush_r>:
 80010f0:	defffb04 	addi	sp,sp,-20
 80010f4:	dcc00315 	stw	r19,12(sp)
 80010f8:	dc000015 	stw	r16,0(sp)
 80010fc:	dfc00415 	stw	ra,16(sp)
 8001100:	dc800215 	stw	r18,8(sp)
 8001104:	dc400115 	stw	r17,4(sp)
 8001108:	2027883a 	mov	r19,r4
 800110c:	2821883a 	mov	r16,r5
 8001110:	20000226 	beq	r4,zero,800111c <_fflush_r+0x2c>
 8001114:	20800e17 	ldw	r2,56(r4)
 8001118:	10005326 	beq	r2,zero,8001268 <_fflush_r+0x178>
 800111c:	8080030b 	ldhu	r2,12(r16)
 8001120:	10ffffcc 	andi	r3,r2,65535
 8001124:	18e0001c 	xori	r3,r3,32768
 8001128:	18e00004 	addi	r3,r3,-32768
 800112c:	18002c26 	beq	r3,zero,80011e0 <_fflush_r+0xf0>
 8001130:	10c0020c 	andi	r3,r2,8
 8001134:	1800321e 	bne	r3,zero,8001200 <_fflush_r+0x110>
 8001138:	80c00117 	ldw	r3,4(r16)
 800113c:	10820014 	ori	r2,r2,2048
 8001140:	8080030d 	sth	r2,12(r16)
 8001144:	00c0570e 	bge	zero,r3,80012a4 <_fflush_r+0x1b4>
 8001148:	82000a17 	ldw	r8,40(r16)
 800114c:	40002426 	beq	r8,zero,80011e0 <_fflush_r+0xf0>
 8001150:	9c400017 	ldw	r17,0(r19)
 8001154:	10c4000c 	andi	r3,r2,4096
 8001158:	98000015 	stw	zero,0(r19)
 800115c:	18004626 	beq	r3,zero,8001278 <_fflush_r+0x188>
 8001160:	81801417 	ldw	r6,80(r16)
 8001164:	10c0010c 	andi	r3,r2,4
 8001168:	18000626 	beq	r3,zero,8001184 <_fflush_r+0x94>
 800116c:	80c00117 	ldw	r3,4(r16)
 8001170:	80800c17 	ldw	r2,48(r16)
 8001174:	30cdc83a 	sub	r6,r6,r3
 8001178:	10000226 	beq	r2,zero,8001184 <_fflush_r+0x94>
 800117c:	80800f17 	ldw	r2,60(r16)
 8001180:	308dc83a 	sub	r6,r6,r2
 8001184:	81400717 	ldw	r5,28(r16)
 8001188:	9809883a 	mov	r4,r19
 800118c:	000f883a 	mov	r7,zero
 8001190:	403ee83a 	callr	r8
 8001194:	00ffffc4 	movi	r3,-1
 8001198:	10c04526 	beq	r2,r3,80012b0 <_fflush_r+0x1c0>
 800119c:	80c0030b 	ldhu	r3,12(r16)
 80011a0:	81000417 	ldw	r4,16(r16)
 80011a4:	80000115 	stw	zero,4(r16)
 80011a8:	197dffcc 	andi	r5,r3,63487
 80011ac:	8140030d 	sth	r5,12(r16)
 80011b0:	81000015 	stw	r4,0(r16)
 80011b4:	18c4000c 	andi	r3,r3,4096
 80011b8:	18000126 	beq	r3,zero,80011c0 <_fflush_r+0xd0>
 80011bc:	80801415 	stw	r2,80(r16)
 80011c0:	81400c17 	ldw	r5,48(r16)
 80011c4:	9c400015 	stw	r17,0(r19)
 80011c8:	28000526 	beq	r5,zero,80011e0 <_fflush_r+0xf0>
 80011cc:	80801004 	addi	r2,r16,64
 80011d0:	28800226 	beq	r5,r2,80011dc <_fflush_r+0xec>
 80011d4:	9809883a 	mov	r4,r19
 80011d8:	800192c0 	call	800192c <_free_r>
 80011dc:	80000c15 	stw	zero,48(r16)
 80011e0:	0005883a 	mov	r2,zero
 80011e4:	dfc00417 	ldw	ra,16(sp)
 80011e8:	dcc00317 	ldw	r19,12(sp)
 80011ec:	dc800217 	ldw	r18,8(sp)
 80011f0:	dc400117 	ldw	r17,4(sp)
 80011f4:	dc000017 	ldw	r16,0(sp)
 80011f8:	dec00504 	addi	sp,sp,20
 80011fc:	f800283a 	ret
 8001200:	84800417 	ldw	r18,16(r16)
 8001204:	903ff626 	beq	r18,zero,80011e0 <__alt_data_end+0xfc0011e0>
 8001208:	84400017 	ldw	r17,0(r16)
 800120c:	108000cc 	andi	r2,r2,3
 8001210:	84800015 	stw	r18,0(r16)
 8001214:	8ca3c83a 	sub	r17,r17,r18
 8001218:	10001526 	beq	r2,zero,8001270 <_fflush_r+0x180>
 800121c:	0005883a 	mov	r2,zero
 8001220:	80800215 	stw	r2,8(r16)
 8001224:	04400316 	blt	zero,r17,8001234 <_fflush_r+0x144>
 8001228:	003fed06 	br	80011e0 <__alt_data_end+0xfc0011e0>
 800122c:	90a5883a 	add	r18,r18,r2
 8001230:	047feb0e 	bge	zero,r17,80011e0 <__alt_data_end+0xfc0011e0>
 8001234:	80800917 	ldw	r2,36(r16)
 8001238:	81400717 	ldw	r5,28(r16)
 800123c:	880f883a 	mov	r7,r17
 8001240:	900d883a 	mov	r6,r18
 8001244:	9809883a 	mov	r4,r19
 8001248:	103ee83a 	callr	r2
 800124c:	88a3c83a 	sub	r17,r17,r2
 8001250:	00bff616 	blt	zero,r2,800122c <__alt_data_end+0xfc00122c>
 8001254:	80c0030b 	ldhu	r3,12(r16)
 8001258:	00bfffc4 	movi	r2,-1
 800125c:	18c01014 	ori	r3,r3,64
 8001260:	80c0030d 	sth	r3,12(r16)
 8001264:	003fdf06 	br	80011e4 <__alt_data_end+0xfc0011e4>
 8001268:	80016ac0 	call	80016ac <__sinit>
 800126c:	003fab06 	br	800111c <__alt_data_end+0xfc00111c>
 8001270:	80800517 	ldw	r2,20(r16)
 8001274:	003fea06 	br	8001220 <__alt_data_end+0xfc001220>
 8001278:	81400717 	ldw	r5,28(r16)
 800127c:	000d883a 	mov	r6,zero
 8001280:	9809883a 	mov	r4,r19
 8001284:	01c00044 	movi	r7,1
 8001288:	403ee83a 	callr	r8
 800128c:	100d883a 	mov	r6,r2
 8001290:	00bfffc4 	movi	r2,-1
 8001294:	30801326 	beq	r6,r2,80012e4 <_fflush_r+0x1f4>
 8001298:	8080030b 	ldhu	r2,12(r16)
 800129c:	82000a17 	ldw	r8,40(r16)
 80012a0:	003fb006 	br	8001164 <__alt_data_end+0xfc001164>
 80012a4:	80c00f17 	ldw	r3,60(r16)
 80012a8:	00ffa716 	blt	zero,r3,8001148 <__alt_data_end+0xfc001148>
 80012ac:	003fcc06 	br	80011e0 <__alt_data_end+0xfc0011e0>
 80012b0:	98c00017 	ldw	r3,0(r19)
 80012b4:	183fb926 	beq	r3,zero,800119c <__alt_data_end+0xfc00119c>
 80012b8:	01000744 	movi	r4,29
 80012bc:	19000226 	beq	r3,r4,80012c8 <_fflush_r+0x1d8>
 80012c0:	01000584 	movi	r4,22
 80012c4:	1900101e 	bne	r3,r4,8001308 <_fflush_r+0x218>
 80012c8:	8080030b 	ldhu	r2,12(r16)
 80012cc:	80c00417 	ldw	r3,16(r16)
 80012d0:	80000115 	stw	zero,4(r16)
 80012d4:	10bdffcc 	andi	r2,r2,63487
 80012d8:	8080030d 	sth	r2,12(r16)
 80012dc:	80c00015 	stw	r3,0(r16)
 80012e0:	003fb706 	br	80011c0 <__alt_data_end+0xfc0011c0>
 80012e4:	98800017 	ldw	r2,0(r19)
 80012e8:	103feb26 	beq	r2,zero,8001298 <__alt_data_end+0xfc001298>
 80012ec:	00c00744 	movi	r3,29
 80012f0:	10c00226 	beq	r2,r3,80012fc <_fflush_r+0x20c>
 80012f4:	00c00584 	movi	r3,22
 80012f8:	10ffd61e 	bne	r2,r3,8001254 <__alt_data_end+0xfc001254>
 80012fc:	9c400015 	stw	r17,0(r19)
 8001300:	0005883a 	mov	r2,zero
 8001304:	003fb706 	br	80011e4 <__alt_data_end+0xfc0011e4>
 8001308:	80c0030b 	ldhu	r3,12(r16)
 800130c:	18c01014 	ori	r3,r3,64
 8001310:	80c0030d 	sth	r3,12(r16)
 8001314:	003fb306 	br	80011e4 <__alt_data_end+0xfc0011e4>

08001318 <fflush>:
 8001318:	20000526 	beq	r4,zero,8001330 <fflush+0x18>
 800131c:	00820074 	movhi	r2,2049
 8001320:	108f3204 	addi	r2,r2,15560
 8001324:	200b883a 	mov	r5,r4
 8001328:	11000017 	ldw	r4,0(r2)
 800132c:	80010f01 	jmpi	80010f0 <_fflush_r>
 8001330:	00820074 	movhi	r2,2049
 8001334:	108f3104 	addi	r2,r2,15556
 8001338:	11000017 	ldw	r4,0(r2)
 800133c:	01420034 	movhi	r5,2048
 8001340:	29443c04 	addi	r5,r5,4336
 8001344:	80021a41 	jmpi	80021a4 <_fwalk_reent>

08001348 <__fp_lock>:
 8001348:	0005883a 	mov	r2,zero
 800134c:	f800283a 	ret

08001350 <__fp_unlock>:
 8001350:	0005883a 	mov	r2,zero
 8001354:	f800283a 	ret

08001358 <_cleanup_r>:
 8001358:	01420034 	movhi	r5,2048
 800135c:	29443704 	addi	r5,r5,4316
 8001360:	80020ec1 	jmpi	80020ec <_fwalk>

08001364 <__sinit.part.1>:
 8001364:	defff604 	addi	sp,sp,-40
 8001368:	00c20034 	movhi	r3,2048
 800136c:	dfc00915 	stw	ra,36(sp)
 8001370:	df000815 	stw	fp,32(sp)
 8001374:	ddc00715 	stw	r23,28(sp)
 8001378:	dd800615 	stw	r22,24(sp)
 800137c:	dd400515 	stw	r21,20(sp)
 8001380:	dd000415 	stw	r20,16(sp)
 8001384:	dcc00315 	stw	r19,12(sp)
 8001388:	dc800215 	stw	r18,8(sp)
 800138c:	dc400115 	stw	r17,4(sp)
 8001390:	dc000015 	stw	r16,0(sp)
 8001394:	18c4d604 	addi	r3,r3,4952
 8001398:	24000117 	ldw	r16,4(r4)
 800139c:	20c00f15 	stw	r3,60(r4)
 80013a0:	07000044 	movi	fp,1
 80013a4:	00c000c4 	movi	r3,3
 80013a8:	2080bb04 	addi	r2,r4,748
 80013ac:	20c0b915 	stw	r3,740(r4)
 80013b0:	27000e15 	stw	fp,56(r4)
 80013b4:	2080ba15 	stw	r2,744(r4)
 80013b8:	2000b815 	stw	zero,736(r4)
 80013bc:	05c00204 	movi	r23,8
 80013c0:	00800104 	movi	r2,4
 80013c4:	2025883a 	mov	r18,r4
 80013c8:	b80d883a 	mov	r6,r23
 80013cc:	81001704 	addi	r4,r16,92
 80013d0:	000b883a 	mov	r5,zero
 80013d4:	80000015 	stw	zero,0(r16)
 80013d8:	80000115 	stw	zero,4(r16)
 80013dc:	80000215 	stw	zero,8(r16)
 80013e0:	8080030d 	sth	r2,12(r16)
 80013e4:	80001915 	stw	zero,100(r16)
 80013e8:	8000038d 	sth	zero,14(r16)
 80013ec:	80000415 	stw	zero,16(r16)
 80013f0:	80000515 	stw	zero,20(r16)
 80013f4:	80000615 	stw	zero,24(r16)
 80013f8:	8002de00 	call	8002de0 <memset>
 80013fc:	05820034 	movhi	r22,2048
 8001400:	94400217 	ldw	r17,8(r18)
 8001404:	05420034 	movhi	r21,2048
 8001408:	05020034 	movhi	r20,2048
 800140c:	04c20034 	movhi	r19,2048
 8001410:	b58ccd04 	addi	r22,r22,13108
 8001414:	ad4ce404 	addi	r21,r21,13200
 8001418:	a50d0304 	addi	r20,r20,13324
 800141c:	9ccd1a04 	addi	r19,r19,13416
 8001420:	85800815 	stw	r22,32(r16)
 8001424:	85400915 	stw	r21,36(r16)
 8001428:	85000a15 	stw	r20,40(r16)
 800142c:	84c00b15 	stw	r19,44(r16)
 8001430:	84000715 	stw	r16,28(r16)
 8001434:	00800284 	movi	r2,10
 8001438:	89001704 	addi	r4,r17,92
 800143c:	b80d883a 	mov	r6,r23
 8001440:	000b883a 	mov	r5,zero
 8001444:	88000015 	stw	zero,0(r17)
 8001448:	88000115 	stw	zero,4(r17)
 800144c:	88000215 	stw	zero,8(r17)
 8001450:	8880030d 	sth	r2,12(r17)
 8001454:	88001915 	stw	zero,100(r17)
 8001458:	8f00038d 	sth	fp,14(r17)
 800145c:	88000415 	stw	zero,16(r17)
 8001460:	88000515 	stw	zero,20(r17)
 8001464:	88000615 	stw	zero,24(r17)
 8001468:	8002de00 	call	8002de0 <memset>
 800146c:	94000317 	ldw	r16,12(r18)
 8001470:	00800484 	movi	r2,18
 8001474:	8c400715 	stw	r17,28(r17)
 8001478:	8d800815 	stw	r22,32(r17)
 800147c:	8d400915 	stw	r21,36(r17)
 8001480:	8d000a15 	stw	r20,40(r17)
 8001484:	8cc00b15 	stw	r19,44(r17)
 8001488:	8080030d 	sth	r2,12(r16)
 800148c:	00800084 	movi	r2,2
 8001490:	80000015 	stw	zero,0(r16)
 8001494:	80000115 	stw	zero,4(r16)
 8001498:	80000215 	stw	zero,8(r16)
 800149c:	80001915 	stw	zero,100(r16)
 80014a0:	8080038d 	sth	r2,14(r16)
 80014a4:	80000415 	stw	zero,16(r16)
 80014a8:	80000515 	stw	zero,20(r16)
 80014ac:	80000615 	stw	zero,24(r16)
 80014b0:	81001704 	addi	r4,r16,92
 80014b4:	000b883a 	mov	r5,zero
 80014b8:	b80d883a 	mov	r6,r23
 80014bc:	8002de00 	call	8002de0 <memset>
 80014c0:	84000715 	stw	r16,28(r16)
 80014c4:	85800815 	stw	r22,32(r16)
 80014c8:	85400915 	stw	r21,36(r16)
 80014cc:	85000a15 	stw	r20,40(r16)
 80014d0:	84c00b15 	stw	r19,44(r16)
 80014d4:	dfc00917 	ldw	ra,36(sp)
 80014d8:	df000817 	ldw	fp,32(sp)
 80014dc:	ddc00717 	ldw	r23,28(sp)
 80014e0:	dd800617 	ldw	r22,24(sp)
 80014e4:	dd400517 	ldw	r21,20(sp)
 80014e8:	dd000417 	ldw	r20,16(sp)
 80014ec:	dcc00317 	ldw	r19,12(sp)
 80014f0:	dc800217 	ldw	r18,8(sp)
 80014f4:	dc400117 	ldw	r17,4(sp)
 80014f8:	dc000017 	ldw	r16,0(sp)
 80014fc:	dec00a04 	addi	sp,sp,40
 8001500:	f800283a 	ret

08001504 <__sfmoreglue>:
 8001504:	defffc04 	addi	sp,sp,-16
 8001508:	dc800215 	stw	r18,8(sp)
 800150c:	2825883a 	mov	r18,r5
 8001510:	dc000015 	stw	r16,0(sp)
 8001514:	01401a04 	movi	r5,104
 8001518:	2021883a 	mov	r16,r4
 800151c:	9009883a 	mov	r4,r18
 8001520:	dfc00315 	stw	ra,12(sp)
 8001524:	dc400115 	stw	r17,4(sp)
 8001528:	800bf500 	call	800bf50 <__mulsi3>
 800152c:	8009883a 	mov	r4,r16
 8001530:	11400304 	addi	r5,r2,12
 8001534:	1023883a 	mov	r17,r2
 8001538:	80026380 	call	8002638 <_malloc_r>
 800153c:	1021883a 	mov	r16,r2
 8001540:	10000726 	beq	r2,zero,8001560 <__sfmoreglue+0x5c>
 8001544:	11000304 	addi	r4,r2,12
 8001548:	10000015 	stw	zero,0(r2)
 800154c:	14800115 	stw	r18,4(r2)
 8001550:	11000215 	stw	r4,8(r2)
 8001554:	000b883a 	mov	r5,zero
 8001558:	880d883a 	mov	r6,r17
 800155c:	8002de00 	call	8002de0 <memset>
 8001560:	8005883a 	mov	r2,r16
 8001564:	dfc00317 	ldw	ra,12(sp)
 8001568:	dc800217 	ldw	r18,8(sp)
 800156c:	dc400117 	ldw	r17,4(sp)
 8001570:	dc000017 	ldw	r16,0(sp)
 8001574:	dec00404 	addi	sp,sp,16
 8001578:	f800283a 	ret

0800157c <__sfp>:
 800157c:	00820074 	movhi	r2,2049
 8001580:	defffb04 	addi	sp,sp,-20
 8001584:	108f3104 	addi	r2,r2,15556
 8001588:	dc800215 	stw	r18,8(sp)
 800158c:	14800017 	ldw	r18,0(r2)
 8001590:	dcc00315 	stw	r19,12(sp)
 8001594:	dfc00415 	stw	ra,16(sp)
 8001598:	90800e17 	ldw	r2,56(r18)
 800159c:	dc400115 	stw	r17,4(sp)
 80015a0:	dc000015 	stw	r16,0(sp)
 80015a4:	2027883a 	mov	r19,r4
 80015a8:	1000021e 	bne	r2,zero,80015b4 <__sfp+0x38>
 80015ac:	9009883a 	mov	r4,r18
 80015b0:	80013640 	call	8001364 <__sinit.part.1>
 80015b4:	9480b804 	addi	r18,r18,736
 80015b8:	047fffc4 	movi	r17,-1
 80015bc:	91400117 	ldw	r5,4(r18)
 80015c0:	94000217 	ldw	r16,8(r18)
 80015c4:	297fffc4 	addi	r5,r5,-1
 80015c8:	28000a16 	blt	r5,zero,80015f4 <__sfp+0x78>
 80015cc:	8080030f 	ldh	r2,12(r16)
 80015d0:	10000c26 	beq	r2,zero,8001604 <__sfp+0x88>
 80015d4:	80c01d04 	addi	r3,r16,116
 80015d8:	00000206 	br	80015e4 <__sfp+0x68>
 80015dc:	18bfe60f 	ldh	r2,-104(r3)
 80015e0:	10000826 	beq	r2,zero,8001604 <__sfp+0x88>
 80015e4:	297fffc4 	addi	r5,r5,-1
 80015e8:	1c3ffd04 	addi	r16,r3,-12
 80015ec:	18c01a04 	addi	r3,r3,104
 80015f0:	2c7ffa1e 	bne	r5,r17,80015dc <__alt_data_end+0xfc0015dc>
 80015f4:	90800017 	ldw	r2,0(r18)
 80015f8:	10001d26 	beq	r2,zero,8001670 <__sfp+0xf4>
 80015fc:	1025883a 	mov	r18,r2
 8001600:	003fee06 	br	80015bc <__alt_data_end+0xfc0015bc>
 8001604:	00bfffc4 	movi	r2,-1
 8001608:	8080038d 	sth	r2,14(r16)
 800160c:	00800044 	movi	r2,1
 8001610:	8080030d 	sth	r2,12(r16)
 8001614:	80001915 	stw	zero,100(r16)
 8001618:	80000015 	stw	zero,0(r16)
 800161c:	80000215 	stw	zero,8(r16)
 8001620:	80000115 	stw	zero,4(r16)
 8001624:	80000415 	stw	zero,16(r16)
 8001628:	80000515 	stw	zero,20(r16)
 800162c:	80000615 	stw	zero,24(r16)
 8001630:	81001704 	addi	r4,r16,92
 8001634:	000b883a 	mov	r5,zero
 8001638:	01800204 	movi	r6,8
 800163c:	8002de00 	call	8002de0 <memset>
 8001640:	8005883a 	mov	r2,r16
 8001644:	80000c15 	stw	zero,48(r16)
 8001648:	80000d15 	stw	zero,52(r16)
 800164c:	80001115 	stw	zero,68(r16)
 8001650:	80001215 	stw	zero,72(r16)
 8001654:	dfc00417 	ldw	ra,16(sp)
 8001658:	dcc00317 	ldw	r19,12(sp)
 800165c:	dc800217 	ldw	r18,8(sp)
 8001660:	dc400117 	ldw	r17,4(sp)
 8001664:	dc000017 	ldw	r16,0(sp)
 8001668:	dec00504 	addi	sp,sp,20
 800166c:	f800283a 	ret
 8001670:	9809883a 	mov	r4,r19
 8001674:	01400104 	movi	r5,4
 8001678:	80015040 	call	8001504 <__sfmoreglue>
 800167c:	90800015 	stw	r2,0(r18)
 8001680:	103fde1e 	bne	r2,zero,80015fc <__alt_data_end+0xfc0015fc>
 8001684:	00800304 	movi	r2,12
 8001688:	98800015 	stw	r2,0(r19)
 800168c:	0005883a 	mov	r2,zero
 8001690:	003ff006 	br	8001654 <__alt_data_end+0xfc001654>

08001694 <_cleanup>:
 8001694:	00820074 	movhi	r2,2049
 8001698:	108f3104 	addi	r2,r2,15556
 800169c:	11000017 	ldw	r4,0(r2)
 80016a0:	01420034 	movhi	r5,2048
 80016a4:	29443704 	addi	r5,r5,4316
 80016a8:	80020ec1 	jmpi	80020ec <_fwalk>

080016ac <__sinit>:
 80016ac:	20800e17 	ldw	r2,56(r4)
 80016b0:	10000126 	beq	r2,zero,80016b8 <__sinit+0xc>
 80016b4:	f800283a 	ret
 80016b8:	80013641 	jmpi	8001364 <__sinit.part.1>

080016bc <__sfp_lock_acquire>:
 80016bc:	f800283a 	ret

080016c0 <__sfp_lock_release>:
 80016c0:	f800283a 	ret

080016c4 <__sinit_lock_acquire>:
 80016c4:	f800283a 	ret

080016c8 <__sinit_lock_release>:
 80016c8:	f800283a 	ret

080016cc <__fp_lock_all>:
 80016cc:	00820074 	movhi	r2,2049
 80016d0:	108f3204 	addi	r2,r2,15560
 80016d4:	11000017 	ldw	r4,0(r2)
 80016d8:	01420034 	movhi	r5,2048
 80016dc:	2944d204 	addi	r5,r5,4936
 80016e0:	80020ec1 	jmpi	80020ec <_fwalk>

080016e4 <__fp_unlock_all>:
 80016e4:	00820074 	movhi	r2,2049
 80016e8:	108f3204 	addi	r2,r2,15560
 80016ec:	11000017 	ldw	r4,0(r2)
 80016f0:	01420034 	movhi	r5,2048
 80016f4:	2944d404 	addi	r5,r5,4944
 80016f8:	80020ec1 	jmpi	80020ec <_fwalk>

080016fc <_fopen_r>:
 80016fc:	defffa04 	addi	sp,sp,-24
 8001700:	dcc00415 	stw	r19,16(sp)
 8001704:	2827883a 	mov	r19,r5
 8001708:	300b883a 	mov	r5,r6
 800170c:	d80d883a 	mov	r6,sp
 8001710:	dc800315 	stw	r18,12(sp)
 8001714:	dc400215 	stw	r17,8(sp)
 8001718:	dfc00515 	stw	ra,20(sp)
 800171c:	dc000115 	stw	r16,4(sp)
 8001720:	2025883a 	mov	r18,r4
 8001724:	80074a40 	call	80074a4 <__sflags>
 8001728:	1023883a 	mov	r17,r2
 800172c:	10002626 	beq	r2,zero,80017c8 <_fopen_r+0xcc>
 8001730:	9009883a 	mov	r4,r18
 8001734:	800157c0 	call	800157c <__sfp>
 8001738:	1021883a 	mov	r16,r2
 800173c:	10002226 	beq	r2,zero,80017c8 <_fopen_r+0xcc>
 8001740:	d9800017 	ldw	r6,0(sp)
 8001744:	9009883a 	mov	r4,r18
 8001748:	980b883a 	mov	r5,r19
 800174c:	01c06d84 	movi	r7,438
 8001750:	8002f040 	call	8002f04 <_open_r>
 8001754:	10001916 	blt	r2,zero,80017bc <_fopen_r+0xc0>
 8001758:	8080038d 	sth	r2,14(r16)
 800175c:	00820034 	movhi	r2,2048
 8001760:	108ccd04 	addi	r2,r2,13108
 8001764:	80800815 	stw	r2,32(r16)
 8001768:	00820034 	movhi	r2,2048
 800176c:	108ce404 	addi	r2,r2,13200
 8001770:	80800915 	stw	r2,36(r16)
 8001774:	00820034 	movhi	r2,2048
 8001778:	108d0304 	addi	r2,r2,13324
 800177c:	80800a15 	stw	r2,40(r16)
 8001780:	00820034 	movhi	r2,2048
 8001784:	108d1a04 	addi	r2,r2,13416
 8001788:	8440030d 	sth	r17,12(r16)
 800178c:	84000715 	stw	r16,28(r16)
 8001790:	80800b15 	stw	r2,44(r16)
 8001794:	8c40400c 	andi	r17,r17,256
 8001798:	88000d1e 	bne	r17,zero,80017d0 <_fopen_r+0xd4>
 800179c:	8005883a 	mov	r2,r16
 80017a0:	dfc00517 	ldw	ra,20(sp)
 80017a4:	dcc00417 	ldw	r19,16(sp)
 80017a8:	dc800317 	ldw	r18,12(sp)
 80017ac:	dc400217 	ldw	r17,8(sp)
 80017b0:	dc000117 	ldw	r16,4(sp)
 80017b4:	dec00604 	addi	sp,sp,24
 80017b8:	f800283a 	ret
 80017bc:	80016bc0 	call	80016bc <__sfp_lock_acquire>
 80017c0:	8000030d 	sth	zero,12(r16)
 80017c4:	80016c00 	call	80016c0 <__sfp_lock_release>
 80017c8:	0005883a 	mov	r2,zero
 80017cc:	003ff406 	br	80017a0 <__alt_data_end+0xfc0017a0>
 80017d0:	9009883a 	mov	r4,r18
 80017d4:	800b883a 	mov	r5,r16
 80017d8:	000d883a 	mov	r6,zero
 80017dc:	01c00084 	movi	r7,2
 80017e0:	8001c1c0 	call	8001c1c <_fseek_r>
 80017e4:	8005883a 	mov	r2,r16
 80017e8:	003fed06 	br	80017a0 <__alt_data_end+0xfc0017a0>

080017ec <fopen>:
 80017ec:	00c20074 	movhi	r3,2049
 80017f0:	18cf3204 	addi	r3,r3,15560
 80017f4:	2005883a 	mov	r2,r4
 80017f8:	19000017 	ldw	r4,0(r3)
 80017fc:	280d883a 	mov	r6,r5
 8001800:	100b883a 	mov	r5,r2
 8001804:	80016fc1 	jmpi	80016fc <_fopen_r>

08001808 <_malloc_trim_r>:
 8001808:	defffb04 	addi	sp,sp,-20
 800180c:	dcc00315 	stw	r19,12(sp)
 8001810:	04c20074 	movhi	r19,2049
 8001814:	dc800215 	stw	r18,8(sp)
 8001818:	dc400115 	stw	r17,4(sp)
 800181c:	dc000015 	stw	r16,0(sp)
 8001820:	dfc00415 	stw	ra,16(sp)
 8001824:	2821883a 	mov	r16,r5
 8001828:	9cc95e04 	addi	r19,r19,9592
 800182c:	2025883a 	mov	r18,r4
 8001830:	800ed540 	call	800ed54 <__malloc_lock>
 8001834:	98800217 	ldw	r2,8(r19)
 8001838:	14400117 	ldw	r17,4(r2)
 800183c:	00bfff04 	movi	r2,-4
 8001840:	88a2703a 	and	r17,r17,r2
 8001844:	8c21c83a 	sub	r16,r17,r16
 8001848:	8403fbc4 	addi	r16,r16,4079
 800184c:	8020d33a 	srli	r16,r16,12
 8001850:	0083ffc4 	movi	r2,4095
 8001854:	843fffc4 	addi	r16,r16,-1
 8001858:	8020933a 	slli	r16,r16,12
 800185c:	1400060e 	bge	r2,r16,8001878 <_malloc_trim_r+0x70>
 8001860:	9009883a 	mov	r4,r18
 8001864:	000b883a 	mov	r5,zero
 8001868:	80032e00 	call	80032e0 <_sbrk_r>
 800186c:	98c00217 	ldw	r3,8(r19)
 8001870:	1c47883a 	add	r3,r3,r17
 8001874:	10c00a26 	beq	r2,r3,80018a0 <_malloc_trim_r+0x98>
 8001878:	9009883a 	mov	r4,r18
 800187c:	800ed740 	call	800ed74 <__malloc_unlock>
 8001880:	0005883a 	mov	r2,zero
 8001884:	dfc00417 	ldw	ra,16(sp)
 8001888:	dcc00317 	ldw	r19,12(sp)
 800188c:	dc800217 	ldw	r18,8(sp)
 8001890:	dc400117 	ldw	r17,4(sp)
 8001894:	dc000017 	ldw	r16,0(sp)
 8001898:	dec00504 	addi	sp,sp,20
 800189c:	f800283a 	ret
 80018a0:	9009883a 	mov	r4,r18
 80018a4:	040bc83a 	sub	r5,zero,r16
 80018a8:	80032e00 	call	80032e0 <_sbrk_r>
 80018ac:	00ffffc4 	movi	r3,-1
 80018b0:	10c00d26 	beq	r2,r3,80018e8 <_malloc_trim_r+0xe0>
 80018b4:	00c20074 	movhi	r3,2049
 80018b8:	18d63c04 	addi	r3,r3,22768
 80018bc:	18800017 	ldw	r2,0(r3)
 80018c0:	99000217 	ldw	r4,8(r19)
 80018c4:	8c23c83a 	sub	r17,r17,r16
 80018c8:	8c400054 	ori	r17,r17,1
 80018cc:	1421c83a 	sub	r16,r2,r16
 80018d0:	24400115 	stw	r17,4(r4)
 80018d4:	9009883a 	mov	r4,r18
 80018d8:	1c000015 	stw	r16,0(r3)
 80018dc:	800ed740 	call	800ed74 <__malloc_unlock>
 80018e0:	00800044 	movi	r2,1
 80018e4:	003fe706 	br	8001884 <__alt_data_end+0xfc001884>
 80018e8:	9009883a 	mov	r4,r18
 80018ec:	000b883a 	mov	r5,zero
 80018f0:	80032e00 	call	80032e0 <_sbrk_r>
 80018f4:	99000217 	ldw	r4,8(r19)
 80018f8:	014003c4 	movi	r5,15
 80018fc:	1107c83a 	sub	r3,r2,r4
 8001900:	28ffdd0e 	bge	r5,r3,8001878 <__alt_data_end+0xfc001878>
 8001904:	01420074 	movhi	r5,2049
 8001908:	294f3304 	addi	r5,r5,15564
 800190c:	29400017 	ldw	r5,0(r5)
 8001910:	18c00054 	ori	r3,r3,1
 8001914:	20c00115 	stw	r3,4(r4)
 8001918:	00c20074 	movhi	r3,2049
 800191c:	1145c83a 	sub	r2,r2,r5
 8001920:	18d63c04 	addi	r3,r3,22768
 8001924:	18800015 	stw	r2,0(r3)
 8001928:	003fd306 	br	8001878 <__alt_data_end+0xfc001878>

0800192c <_free_r>:
 800192c:	28004c26 	beq	r5,zero,8001a60 <_free_r+0x134>
 8001930:	defffd04 	addi	sp,sp,-12
 8001934:	dc400115 	stw	r17,4(sp)
 8001938:	dc000015 	stw	r16,0(sp)
 800193c:	2023883a 	mov	r17,r4
 8001940:	2821883a 	mov	r16,r5
 8001944:	dfc00215 	stw	ra,8(sp)
 8001948:	800ed540 	call	800ed54 <__malloc_lock>
 800194c:	813fff17 	ldw	r4,-4(r16)
 8001950:	00bfff84 	movi	r2,-2
 8001954:	02420074 	movhi	r9,2049
 8001958:	81bffe04 	addi	r6,r16,-8
 800195c:	2084703a 	and	r2,r4,r2
 8001960:	4a495e04 	addi	r9,r9,9592
 8001964:	308b883a 	add	r5,r6,r2
 8001968:	2a000117 	ldw	r8,4(r5)
 800196c:	49c00217 	ldw	r7,8(r9)
 8001970:	00ffff04 	movi	r3,-4
 8001974:	40c6703a 	and	r3,r8,r3
 8001978:	39405326 	beq	r7,r5,8001ac8 <_free_r+0x19c>
 800197c:	28c00115 	stw	r3,4(r5)
 8001980:	2100004c 	andi	r4,r4,1
 8001984:	2000091e 	bne	r4,zero,80019ac <_free_r+0x80>
 8001988:	81fffe17 	ldw	r7,-8(r16)
 800198c:	4a000204 	addi	r8,r9,8
 8001990:	31cdc83a 	sub	r6,r6,r7
 8001994:	31000217 	ldw	r4,8(r6)
 8001998:	11c5883a 	add	r2,r2,r7
 800199c:	22006126 	beq	r4,r8,8001b24 <_free_r+0x1f8>
 80019a0:	31c00317 	ldw	r7,12(r6)
 80019a4:	21c00315 	stw	r7,12(r4)
 80019a8:	39000215 	stw	r4,8(r7)
 80019ac:	28c9883a 	add	r4,r5,r3
 80019b0:	21c00117 	ldw	r7,4(r4)
 80019b4:	39c0004c 	andi	r7,r7,1
 80019b8:	38000d1e 	bne	r7,zero,80019f0 <_free_r+0xc4>
 80019bc:	29000217 	ldw	r4,8(r5)
 80019c0:	10c5883a 	add	r2,r2,r3
 80019c4:	00c20074 	movhi	r3,2049
 80019c8:	18c96004 	addi	r3,r3,9600
 80019cc:	20c07526 	beq	r4,r3,8001ba4 <_free_r+0x278>
 80019d0:	29c00317 	ldw	r7,12(r5)
 80019d4:	11400054 	ori	r5,r2,1
 80019d8:	3087883a 	add	r3,r6,r2
 80019dc:	21c00315 	stw	r7,12(r4)
 80019e0:	39000215 	stw	r4,8(r7)
 80019e4:	31400115 	stw	r5,4(r6)
 80019e8:	18800015 	stw	r2,0(r3)
 80019ec:	00000406 	br	8001a00 <_free_r+0xd4>
 80019f0:	10c00054 	ori	r3,r2,1
 80019f4:	30c00115 	stw	r3,4(r6)
 80019f8:	3087883a 	add	r3,r6,r2
 80019fc:	18800015 	stw	r2,0(r3)
 8001a00:	00c07fc4 	movi	r3,511
 8001a04:	18801736 	bltu	r3,r2,8001a64 <_free_r+0x138>
 8001a08:	1004d0fa 	srli	r2,r2,3
 8001a0c:	01400044 	movi	r5,1
 8001a10:	49000117 	ldw	r4,4(r9)
 8001a14:	1087883a 	add	r3,r2,r2
 8001a18:	18c7883a 	add	r3,r3,r3
 8001a1c:	1005d0ba 	srai	r2,r2,2
 8001a20:	18c7883a 	add	r3,r3,r3
 8001a24:	1a47883a 	add	r3,r3,r9
 8001a28:	19c00217 	ldw	r7,8(r3)
 8001a2c:	2884983a 	sll	r2,r5,r2
 8001a30:	30c00315 	stw	r3,12(r6)
 8001a34:	31c00215 	stw	r7,8(r6)
 8001a38:	1104b03a 	or	r2,r2,r4
 8001a3c:	19800215 	stw	r6,8(r3)
 8001a40:	48800115 	stw	r2,4(r9)
 8001a44:	39800315 	stw	r6,12(r7)
 8001a48:	8809883a 	mov	r4,r17
 8001a4c:	dfc00217 	ldw	ra,8(sp)
 8001a50:	dc400117 	ldw	r17,4(sp)
 8001a54:	dc000017 	ldw	r16,0(sp)
 8001a58:	dec00304 	addi	sp,sp,12
 8001a5c:	800ed741 	jmpi	800ed74 <__malloc_unlock>
 8001a60:	f800283a 	ret
 8001a64:	1006d27a 	srli	r3,r2,9
 8001a68:	01000104 	movi	r4,4
 8001a6c:	20c04036 	bltu	r4,r3,8001b70 <_free_r+0x244>
 8001a70:	1006d1ba 	srli	r3,r2,6
 8001a74:	19400e04 	addi	r5,r3,56
 8001a78:	2947883a 	add	r3,r5,r5
 8001a7c:	18c7883a 	add	r3,r3,r3
 8001a80:	18c7883a 	add	r3,r3,r3
 8001a84:	1a49883a 	add	r4,r3,r9
 8001a88:	20c00217 	ldw	r3,8(r4)
 8001a8c:	01c20074 	movhi	r7,2049
 8001a90:	39c95e04 	addi	r7,r7,9592
 8001a94:	19003b26 	beq	r3,r4,8001b84 <_free_r+0x258>
 8001a98:	01ffff04 	movi	r7,-4
 8001a9c:	19400117 	ldw	r5,4(r3)
 8001aa0:	29ca703a 	and	r5,r5,r7
 8001aa4:	1140022e 	bgeu	r2,r5,8001ab0 <_free_r+0x184>
 8001aa8:	18c00217 	ldw	r3,8(r3)
 8001aac:	20fffb1e 	bne	r4,r3,8001a9c <__alt_data_end+0xfc001a9c>
 8001ab0:	18800317 	ldw	r2,12(r3)
 8001ab4:	30800315 	stw	r2,12(r6)
 8001ab8:	30c00215 	stw	r3,8(r6)
 8001abc:	11800215 	stw	r6,8(r2)
 8001ac0:	19800315 	stw	r6,12(r3)
 8001ac4:	003fe006 	br	8001a48 <__alt_data_end+0xfc001a48>
 8001ac8:	2100004c 	andi	r4,r4,1
 8001acc:	1885883a 	add	r2,r3,r2
 8001ad0:	2000071e 	bne	r4,zero,8001af0 <_free_r+0x1c4>
 8001ad4:	817ffe17 	ldw	r5,-8(r16)
 8001ad8:	314dc83a 	sub	r6,r6,r5
 8001adc:	30c00317 	ldw	r3,12(r6)
 8001ae0:	31000217 	ldw	r4,8(r6)
 8001ae4:	1145883a 	add	r2,r2,r5
 8001ae8:	20c00315 	stw	r3,12(r4)
 8001aec:	19000215 	stw	r4,8(r3)
 8001af0:	10c00054 	ori	r3,r2,1
 8001af4:	30c00115 	stw	r3,4(r6)
 8001af8:	00c20074 	movhi	r3,2049
 8001afc:	18cf3404 	addi	r3,r3,15568
 8001b00:	18c00017 	ldw	r3,0(r3)
 8001b04:	49800215 	stw	r6,8(r9)
 8001b08:	10ffcf36 	bltu	r2,r3,8001a48 <__alt_data_end+0xfc001a48>
 8001b0c:	00820074 	movhi	r2,2049
 8001b10:	10963204 	addi	r2,r2,22728
 8001b14:	11400017 	ldw	r5,0(r2)
 8001b18:	8809883a 	mov	r4,r17
 8001b1c:	80018080 	call	8001808 <_malloc_trim_r>
 8001b20:	003fc906 	br	8001a48 <__alt_data_end+0xfc001a48>
 8001b24:	28c9883a 	add	r4,r5,r3
 8001b28:	21000117 	ldw	r4,4(r4)
 8001b2c:	2100004c 	andi	r4,r4,1
 8001b30:	20000a1e 	bne	r4,zero,8001b5c <_free_r+0x230>
 8001b34:	29000317 	ldw	r4,12(r5)
 8001b38:	29400217 	ldw	r5,8(r5)
 8001b3c:	10c5883a 	add	r2,r2,r3
 8001b40:	10c00054 	ori	r3,r2,1
 8001b44:	29000315 	stw	r4,12(r5)
 8001b48:	21400215 	stw	r5,8(r4)
 8001b4c:	30c00115 	stw	r3,4(r6)
 8001b50:	308d883a 	add	r6,r6,r2
 8001b54:	30800015 	stw	r2,0(r6)
 8001b58:	003fbb06 	br	8001a48 <__alt_data_end+0xfc001a48>
 8001b5c:	10c00054 	ori	r3,r2,1
 8001b60:	30c00115 	stw	r3,4(r6)
 8001b64:	308d883a 	add	r6,r6,r2
 8001b68:	30800015 	stw	r2,0(r6)
 8001b6c:	003fb606 	br	8001a48 <__alt_data_end+0xfc001a48>
 8001b70:	01000504 	movi	r4,20
 8001b74:	20c01436 	bltu	r4,r3,8001bc8 <_free_r+0x29c>
 8001b78:	194016c4 	addi	r5,r3,91
 8001b7c:	2947883a 	add	r3,r5,r5
 8001b80:	003fbe06 	br	8001a7c <__alt_data_end+0xfc001a7c>
 8001b84:	280bd0ba 	srai	r5,r5,2
 8001b88:	00800044 	movi	r2,1
 8001b8c:	39000117 	ldw	r4,4(r7)
 8001b90:	114a983a 	sll	r5,r2,r5
 8001b94:	1805883a 	mov	r2,r3
 8001b98:	2908b03a 	or	r4,r5,r4
 8001b9c:	39000115 	stw	r4,4(r7)
 8001ba0:	003fc406 	br	8001ab4 <__alt_data_end+0xfc001ab4>
 8001ba4:	49800515 	stw	r6,20(r9)
 8001ba8:	49800415 	stw	r6,16(r9)
 8001bac:	10c00054 	ori	r3,r2,1
 8001bb0:	31000315 	stw	r4,12(r6)
 8001bb4:	31000215 	stw	r4,8(r6)
 8001bb8:	30c00115 	stw	r3,4(r6)
 8001bbc:	308d883a 	add	r6,r6,r2
 8001bc0:	30800015 	stw	r2,0(r6)
 8001bc4:	003fa006 	br	8001a48 <__alt_data_end+0xfc001a48>
 8001bc8:	01001504 	movi	r4,84
 8001bcc:	20c00436 	bltu	r4,r3,8001be0 <_free_r+0x2b4>
 8001bd0:	1006d33a 	srli	r3,r2,12
 8001bd4:	19401b84 	addi	r5,r3,110
 8001bd8:	2947883a 	add	r3,r5,r5
 8001bdc:	003fa706 	br	8001a7c <__alt_data_end+0xfc001a7c>
 8001be0:	01005504 	movi	r4,340
 8001be4:	20c00436 	bltu	r4,r3,8001bf8 <_free_r+0x2cc>
 8001be8:	1006d3fa 	srli	r3,r2,15
 8001bec:	19401dc4 	addi	r5,r3,119
 8001bf0:	2947883a 	add	r3,r5,r5
 8001bf4:	003fa106 	br	8001a7c <__alt_data_end+0xfc001a7c>
 8001bf8:	01015504 	movi	r4,1364
 8001bfc:	20c00436 	bltu	r4,r3,8001c10 <_free_r+0x2e4>
 8001c00:	1006d4ba 	srli	r3,r2,18
 8001c04:	19401f04 	addi	r5,r3,124
 8001c08:	2947883a 	add	r3,r5,r5
 8001c0c:	003f9b06 	br	8001a7c <__alt_data_end+0xfc001a7c>
 8001c10:	00c03f04 	movi	r3,252
 8001c14:	01401f84 	movi	r5,126
 8001c18:	003f9806 	br	8001a7c <__alt_data_end+0xfc001a7c>

08001c1c <_fseek_r>:
 8001c1c:	deffe804 	addi	sp,sp,-96
 8001c20:	dd401415 	stw	r21,80(sp)
 8001c24:	dc801115 	stw	r18,68(sp)
 8001c28:	dc401015 	stw	r17,64(sp)
 8001c2c:	dc000f15 	stw	r16,60(sp)
 8001c30:	dfc01715 	stw	ra,92(sp)
 8001c34:	ddc01615 	stw	r23,88(sp)
 8001c38:	dd801515 	stw	r22,84(sp)
 8001c3c:	dd001315 	stw	r20,76(sp)
 8001c40:	dcc01215 	stw	r19,72(sp)
 8001c44:	2023883a 	mov	r17,r4
 8001c48:	2821883a 	mov	r16,r5
 8001c4c:	302b883a 	mov	r21,r6
 8001c50:	3825883a 	mov	r18,r7
 8001c54:	20000226 	beq	r4,zero,8001c60 <_fseek_r+0x44>
 8001c58:	20800e17 	ldw	r2,56(r4)
 8001c5c:	10005d26 	beq	r2,zero,8001dd4 <_fseek_r+0x1b8>
 8001c60:	80016bc0 	call	80016bc <__sfp_lock_acquire>
 8001c64:	8080030b 	ldhu	r2,12(r16)
 8001c68:	00c04204 	movi	r3,264
 8001c6c:	1080420c 	andi	r2,r2,264
 8001c70:	10c0a026 	beq	r2,r3,8001ef4 <_fseek_r+0x2d8>
 8001c74:	85000a17 	ldw	r20,40(r16)
 8001c78:	a000f826 	beq	r20,zero,800205c <_fseek_r+0x440>
 8001c7c:	00800044 	movi	r2,1
 8001c80:	90804026 	beq	r18,r2,8001d84 <_fseek_r+0x168>
 8001c84:	00800084 	movi	r2,2
 8001c88:	90801126 	beq	r18,r2,8001cd0 <_fseek_r+0xb4>
 8001c8c:	90001026 	beq	r18,zero,8001cd0 <_fseek_r+0xb4>
 8001c90:	00800584 	movi	r2,22
 8001c94:	88800015 	stw	r2,0(r17)
 8001c98:	80016c00 	call	80016c0 <__sfp_lock_release>
 8001c9c:	04ffffc4 	movi	r19,-1
 8001ca0:	9805883a 	mov	r2,r19
 8001ca4:	dfc01717 	ldw	ra,92(sp)
 8001ca8:	ddc01617 	ldw	r23,88(sp)
 8001cac:	dd801517 	ldw	r22,84(sp)
 8001cb0:	dd401417 	ldw	r21,80(sp)
 8001cb4:	dd001317 	ldw	r20,76(sp)
 8001cb8:	dcc01217 	ldw	r19,72(sp)
 8001cbc:	dc801117 	ldw	r18,68(sp)
 8001cc0:	dc401017 	ldw	r17,64(sp)
 8001cc4:	dc000f17 	ldw	r16,60(sp)
 8001cc8:	dec01804 	addi	sp,sp,96
 8001ccc:	f800283a 	ret
 8001cd0:	80800417 	ldw	r2,16(r16)
 8001cd4:	002f883a 	mov	r23,zero
 8001cd8:	0027883a 	mov	r19,zero
 8001cdc:	1000c026 	beq	r2,zero,8001fe0 <_fseek_r+0x3c4>
 8001ce0:	8080030b 	ldhu	r2,12(r16)
 8001ce4:	10c2068c 	andi	r3,r2,2074
 8001ce8:	1800071e 	bne	r3,zero,8001d08 <_fseek_r+0xec>
 8001cec:	10c1000c 	andi	r3,r2,1024
 8001cf0:	18003f1e 	bne	r3,zero,8001df0 <_fseek_r+0x1d4>
 8001cf4:	00c20034 	movhi	r3,2048
 8001cf8:	18cd0304 	addi	r3,r3,13324
 8001cfc:	a0c0bc26 	beq	r20,r3,8001ff0 <_fseek_r+0x3d4>
 8001d00:	10820014 	ori	r2,r2,2048
 8001d04:	8080030d 	sth	r2,12(r16)
 8001d08:	8809883a 	mov	r4,r17
 8001d0c:	800b883a 	mov	r5,r16
 8001d10:	80010f00 	call	80010f0 <_fflush_r>
 8001d14:	1027883a 	mov	r19,r2
 8001d18:	103fdf1e 	bne	r2,zero,8001c98 <__alt_data_end+0xfc001c98>
 8001d1c:	81400717 	ldw	r5,28(r16)
 8001d20:	8809883a 	mov	r4,r17
 8001d24:	a80d883a 	mov	r6,r21
 8001d28:	900f883a 	mov	r7,r18
 8001d2c:	a03ee83a 	callr	r20
 8001d30:	00ffffc4 	movi	r3,-1
 8001d34:	10ffd826 	beq	r2,r3,8001c98 <__alt_data_end+0xfc001c98>
 8001d38:	81400c17 	ldw	r5,48(r16)
 8001d3c:	28000526 	beq	r5,zero,8001d54 <_fseek_r+0x138>
 8001d40:	80801004 	addi	r2,r16,64
 8001d44:	28800226 	beq	r5,r2,8001d50 <_fseek_r+0x134>
 8001d48:	8809883a 	mov	r4,r17
 8001d4c:	800192c0 	call	800192c <_free_r>
 8001d50:	80000c15 	stw	zero,48(r16)
 8001d54:	8080030b 	ldhu	r2,12(r16)
 8001d58:	80c00417 	ldw	r3,16(r16)
 8001d5c:	81001704 	addi	r4,r16,92
 8001d60:	10bdf7cc 	andi	r2,r2,63455
 8001d64:	000b883a 	mov	r5,zero
 8001d68:	01800204 	movi	r6,8
 8001d6c:	80c00015 	stw	r3,0(r16)
 8001d70:	80000115 	stw	zero,4(r16)
 8001d74:	8080030d 	sth	r2,12(r16)
 8001d78:	8002de00 	call	8002de0 <memset>
 8001d7c:	80016c00 	call	80016c0 <__sfp_lock_release>
 8001d80:	003fc706 	br	8001ca0 <__alt_data_end+0xfc001ca0>
 8001d84:	8809883a 	mov	r4,r17
 8001d88:	800b883a 	mov	r5,r16
 8001d8c:	80010f00 	call	80010f0 <_fflush_r>
 8001d90:	8080030b 	ldhu	r2,12(r16)
 8001d94:	10c4000c 	andi	r3,r2,4096
 8001d98:	18008726 	beq	r3,zero,8001fb8 <_fseek_r+0x39c>
 8001d9c:	84c01417 	ldw	r19,80(r16)
 8001da0:	10c0010c 	andi	r3,r2,4
 8001da4:	18003e1e 	bne	r3,zero,8001ea0 <_fseek_r+0x284>
 8001da8:	1080020c 	andi	r2,r2,8
 8001dac:	10008026 	beq	r2,zero,8001fb0 <_fseek_r+0x394>
 8001db0:	80c00017 	ldw	r3,0(r16)
 8001db4:	80800417 	ldw	r2,16(r16)
 8001db8:	18000226 	beq	r3,zero,8001dc4 <_fseek_r+0x1a8>
 8001dbc:	1887c83a 	sub	r3,r3,r2
 8001dc0:	98e7883a 	add	r19,r19,r3
 8001dc4:	aceb883a 	add	r21,r21,r19
 8001dc8:	05c00044 	movi	r23,1
 8001dcc:	0025883a 	mov	r18,zero
 8001dd0:	003fc206 	br	8001cdc <__alt_data_end+0xfc001cdc>
 8001dd4:	80016ac0 	call	80016ac <__sinit>
 8001dd8:	003fa106 	br	8001c60 <__alt_data_end+0xfc001c60>
 8001ddc:	8080030b 	ldhu	r2,12(r16)
 8001de0:	00c10004 	movi	r3,1024
 8001de4:	80c01315 	stw	r3,76(r16)
 8001de8:	10c4b03a 	or	r2,r2,r3
 8001dec:	8080030d 	sth	r2,12(r16)
 8001df0:	9000331e 	bne	r18,zero,8001ec0 <_fseek_r+0x2a4>
 8001df4:	a82d883a 	mov	r22,r21
 8001df8:	b800391e 	bne	r23,zero,8001ee0 <_fseek_r+0x2c4>
 8001dfc:	8080030b 	ldhu	r2,12(r16)
 8001e00:	1084000c 	andi	r2,r2,4096
 8001e04:	10008626 	beq	r2,zero,8002020 <_fseek_r+0x404>
 8001e08:	80801417 	ldw	r2,80(r16)
 8001e0c:	81800117 	ldw	r6,4(r16)
 8001e10:	81400c17 	ldw	r5,48(r16)
 8001e14:	11a7c83a 	sub	r19,r2,r6
 8001e18:	28008926 	beq	r5,zero,8002040 <_fseek_r+0x424>
 8001e1c:	80800f17 	ldw	r2,60(r16)
 8001e20:	98a7c83a 	sub	r19,r19,r2
 8001e24:	81000e17 	ldw	r4,56(r16)
 8001e28:	80c00417 	ldw	r3,16(r16)
 8001e2c:	99a7883a 	add	r19,r19,r6
 8001e30:	20c7c83a 	sub	r3,r4,r3
 8001e34:	98e7c83a 	sub	r19,r19,r3
 8001e38:	10c7883a 	add	r3,r2,r3
 8001e3c:	b4c03116 	blt	r22,r19,8001f04 <_fseek_r+0x2e8>
 8001e40:	98c5883a 	add	r2,r19,r3
 8001e44:	b0802f2e 	bgeu	r22,r2,8001f04 <_fseek_r+0x2e8>
 8001e48:	80800417 	ldw	r2,16(r16)
 8001e4c:	b4e7c83a 	sub	r19,r22,r19
 8001e50:	1cc7c83a 	sub	r3,r3,r19
 8001e54:	14e7883a 	add	r19,r2,r19
 8001e58:	84c00015 	stw	r19,0(r16)
 8001e5c:	80c00115 	stw	r3,4(r16)
 8001e60:	28000526 	beq	r5,zero,8001e78 <_fseek_r+0x25c>
 8001e64:	80801004 	addi	r2,r16,64
 8001e68:	28800226 	beq	r5,r2,8001e74 <_fseek_r+0x258>
 8001e6c:	8809883a 	mov	r4,r17
 8001e70:	800192c0 	call	800192c <_free_r>
 8001e74:	80000c15 	stw	zero,48(r16)
 8001e78:	8080030b 	ldhu	r2,12(r16)
 8001e7c:	81001704 	addi	r4,r16,92
 8001e80:	000b883a 	mov	r5,zero
 8001e84:	10bff7cc 	andi	r2,r2,65503
 8001e88:	01800204 	movi	r6,8
 8001e8c:	8080030d 	sth	r2,12(r16)
 8001e90:	8002de00 	call	8002de0 <memset>
 8001e94:	80016c00 	call	80016c0 <__sfp_lock_release>
 8001e98:	0027883a 	mov	r19,zero
 8001e9c:	003f8006 	br	8001ca0 <__alt_data_end+0xfc001ca0>
 8001ea0:	80c00117 	ldw	r3,4(r16)
 8001ea4:	80800c17 	ldw	r2,48(r16)
 8001ea8:	98e7c83a 	sub	r19,r19,r3
 8001eac:	10004026 	beq	r2,zero,8001fb0 <_fseek_r+0x394>
 8001eb0:	80c00f17 	ldw	r3,60(r16)
 8001eb4:	80800417 	ldw	r2,16(r16)
 8001eb8:	98e7c83a 	sub	r19,r19,r3
 8001ebc:	003fc106 	br	8001dc4 <__alt_data_end+0xfc001dc4>
 8001ec0:	8140038f 	ldh	r5,14(r16)
 8001ec4:	8809883a 	mov	r4,r17
 8001ec8:	d80d883a 	mov	r6,sp
 8001ecc:	80020940 	call	8002094 <_fstat_r>
 8001ed0:	103f8d1e 	bne	r2,zero,8001d08 <__alt_data_end+0xfc001d08>
 8001ed4:	dd800417 	ldw	r22,16(sp)
 8001ed8:	adad883a 	add	r22,r21,r22
 8001edc:	b83fc726 	beq	r23,zero,8001dfc <__alt_data_end+0xfc001dfc>
 8001ee0:	81400c17 	ldw	r5,48(r16)
 8001ee4:	81800117 	ldw	r6,4(r16)
 8001ee8:	28005526 	beq	r5,zero,8002040 <_fseek_r+0x424>
 8001eec:	80800f17 	ldw	r2,60(r16)
 8001ef0:	003fcc06 	br	8001e24 <__alt_data_end+0xfc001e24>
 8001ef4:	8809883a 	mov	r4,r17
 8001ef8:	800b883a 	mov	r5,r16
 8001efc:	80010f00 	call	80010f0 <_fflush_r>
 8001f00:	003f5c06 	br	8001c74 <__alt_data_end+0xfc001c74>
 8001f04:	84c01317 	ldw	r19,76(r16)
 8001f08:	81400717 	ldw	r5,28(r16)
 8001f0c:	8809883a 	mov	r4,r17
 8001f10:	04e7c83a 	sub	r19,zero,r19
 8001f14:	b4e6703a 	and	r19,r22,r19
 8001f18:	980d883a 	mov	r6,r19
 8001f1c:	000f883a 	mov	r7,zero
 8001f20:	a03ee83a 	callr	r20
 8001f24:	00ffffc4 	movi	r3,-1
 8001f28:	10ff7726 	beq	r2,r3,8001d08 <__alt_data_end+0xfc001d08>
 8001f2c:	80800417 	ldw	r2,16(r16)
 8001f30:	81400c17 	ldw	r5,48(r16)
 8001f34:	80000115 	stw	zero,4(r16)
 8001f38:	80800015 	stw	r2,0(r16)
 8001f3c:	28000526 	beq	r5,zero,8001f54 <_fseek_r+0x338>
 8001f40:	80801004 	addi	r2,r16,64
 8001f44:	28800226 	beq	r5,r2,8001f50 <_fseek_r+0x334>
 8001f48:	8809883a 	mov	r4,r17
 8001f4c:	800192c0 	call	800192c <_free_r>
 8001f50:	80000c15 	stw	zero,48(r16)
 8001f54:	8080030b 	ldhu	r2,12(r16)
 8001f58:	b4e7c83a 	sub	r19,r22,r19
 8001f5c:	10bff7cc 	andi	r2,r2,65503
 8001f60:	8080030d 	sth	r2,12(r16)
 8001f64:	98000b26 	beq	r19,zero,8001f94 <_fseek_r+0x378>
 8001f68:	8809883a 	mov	r4,r17
 8001f6c:	800b883a 	mov	r5,r16
 8001f70:	80030b00 	call	80030b0 <__srefill_r>
 8001f74:	103f641e 	bne	r2,zero,8001d08 <__alt_data_end+0xfc001d08>
 8001f78:	80800117 	ldw	r2,4(r16)
 8001f7c:	14ff6236 	bltu	r2,r19,8001d08 <__alt_data_end+0xfc001d08>
 8001f80:	80c00017 	ldw	r3,0(r16)
 8001f84:	14c5c83a 	sub	r2,r2,r19
 8001f88:	80800115 	stw	r2,4(r16)
 8001f8c:	1ce7883a 	add	r19,r3,r19
 8001f90:	84c00015 	stw	r19,0(r16)
 8001f94:	81001704 	addi	r4,r16,92
 8001f98:	000b883a 	mov	r5,zero
 8001f9c:	01800204 	movi	r6,8
 8001fa0:	8002de00 	call	8002de0 <memset>
 8001fa4:	80016c00 	call	80016c0 <__sfp_lock_release>
 8001fa8:	0027883a 	mov	r19,zero
 8001fac:	003f3c06 	br	8001ca0 <__alt_data_end+0xfc001ca0>
 8001fb0:	80800417 	ldw	r2,16(r16)
 8001fb4:	003f8306 	br	8001dc4 <__alt_data_end+0xfc001dc4>
 8001fb8:	81400717 	ldw	r5,28(r16)
 8001fbc:	8809883a 	mov	r4,r17
 8001fc0:	000d883a 	mov	r6,zero
 8001fc4:	900f883a 	mov	r7,r18
 8001fc8:	a03ee83a 	callr	r20
 8001fcc:	1027883a 	mov	r19,r2
 8001fd0:	00bfffc4 	movi	r2,-1
 8001fd4:	98bf3026 	beq	r19,r2,8001c98 <__alt_data_end+0xfc001c98>
 8001fd8:	8080030b 	ldhu	r2,12(r16)
 8001fdc:	003f7006 	br	8001da0 <__alt_data_end+0xfc001da0>
 8001fe0:	8809883a 	mov	r4,r17
 8001fe4:	800b883a 	mov	r5,r16
 8001fe8:	80024800 	call	8002480 <__smakebuf_r>
 8001fec:	003f3c06 	br	8001ce0 <__alt_data_end+0xfc001ce0>
 8001ff0:	8140038f 	ldh	r5,14(r16)
 8001ff4:	283f4216 	blt	r5,zero,8001d00 <__alt_data_end+0xfc001d00>
 8001ff8:	8809883a 	mov	r4,r17
 8001ffc:	d80d883a 	mov	r6,sp
 8002000:	80020940 	call	8002094 <_fstat_r>
 8002004:	1000041e 	bne	r2,zero,8002018 <_fseek_r+0x3fc>
 8002008:	d8800117 	ldw	r2,4(sp)
 800200c:	00e00014 	movui	r3,32768
 8002010:	10bc000c 	andi	r2,r2,61440
 8002014:	10ff7126 	beq	r2,r3,8001ddc <__alt_data_end+0xfc001ddc>
 8002018:	8080030b 	ldhu	r2,12(r16)
 800201c:	003f3806 	br	8001d00 <__alt_data_end+0xfc001d00>
 8002020:	81400717 	ldw	r5,28(r16)
 8002024:	8809883a 	mov	r4,r17
 8002028:	000d883a 	mov	r6,zero
 800202c:	01c00044 	movi	r7,1
 8002030:	a03ee83a 	callr	r20
 8002034:	00ffffc4 	movi	r3,-1
 8002038:	10ff741e 	bne	r2,r3,8001e0c <__alt_data_end+0xfc001e0c>
 800203c:	003f3206 	br	8001d08 <__alt_data_end+0xfc001d08>
 8002040:	81000017 	ldw	r4,0(r16)
 8002044:	80c00417 	ldw	r3,16(r16)
 8002048:	000b883a 	mov	r5,zero
 800204c:	20c7c83a 	sub	r3,r4,r3
 8002050:	98e7c83a 	sub	r19,r19,r3
 8002054:	30c7883a 	add	r3,r6,r3
 8002058:	003f7806 	br	8001e3c <__alt_data_end+0xfc001e3c>
 800205c:	00800744 	movi	r2,29
 8002060:	88800015 	stw	r2,0(r17)
 8002064:	80016c00 	call	80016c0 <__sfp_lock_release>
 8002068:	04ffffc4 	movi	r19,-1
 800206c:	003f0c06 	br	8001ca0 <__alt_data_end+0xfc001ca0>

08002070 <fseek>:
 8002070:	2007883a 	mov	r3,r4
 8002074:	01020074 	movhi	r4,2049
 8002078:	210f3204 	addi	r4,r4,15560
 800207c:	21000017 	ldw	r4,0(r4)
 8002080:	2805883a 	mov	r2,r5
 8002084:	300f883a 	mov	r7,r6
 8002088:	180b883a 	mov	r5,r3
 800208c:	100d883a 	mov	r6,r2
 8002090:	8001c1c1 	jmpi	8001c1c <_fseek_r>

08002094 <_fstat_r>:
 8002094:	defffd04 	addi	sp,sp,-12
 8002098:	dc000015 	stw	r16,0(sp)
 800209c:	04020074 	movhi	r16,2049
 80020a0:	dc400115 	stw	r17,4(sp)
 80020a4:	84162f04 	addi	r16,r16,22716
 80020a8:	2023883a 	mov	r17,r4
 80020ac:	2809883a 	mov	r4,r5
 80020b0:	300b883a 	mov	r5,r6
 80020b4:	dfc00215 	stw	ra,8(sp)
 80020b8:	80000015 	stw	zero,0(r16)
 80020bc:	800e9180 	call	800e918 <fstat>
 80020c0:	00ffffc4 	movi	r3,-1
 80020c4:	10c00526 	beq	r2,r3,80020dc <_fstat_r+0x48>
 80020c8:	dfc00217 	ldw	ra,8(sp)
 80020cc:	dc400117 	ldw	r17,4(sp)
 80020d0:	dc000017 	ldw	r16,0(sp)
 80020d4:	dec00304 	addi	sp,sp,12
 80020d8:	f800283a 	ret
 80020dc:	80c00017 	ldw	r3,0(r16)
 80020e0:	183ff926 	beq	r3,zero,80020c8 <__alt_data_end+0xfc0020c8>
 80020e4:	88c00015 	stw	r3,0(r17)
 80020e8:	003ff706 	br	80020c8 <__alt_data_end+0xfc0020c8>

080020ec <_fwalk>:
 80020ec:	defff804 	addi	sp,sp,-32
 80020f0:	dd400515 	stw	r21,20(sp)
 80020f4:	2540b804 	addi	r21,r4,736
 80020f8:	dd800615 	stw	r22,24(sp)
 80020fc:	dd000415 	stw	r20,16(sp)
 8002100:	dfc00715 	stw	ra,28(sp)
 8002104:	dcc00315 	stw	r19,12(sp)
 8002108:	dc800215 	stw	r18,8(sp)
 800210c:	dc400115 	stw	r17,4(sp)
 8002110:	dc000015 	stw	r16,0(sp)
 8002114:	2829883a 	mov	r20,r5
 8002118:	002d883a 	mov	r22,zero
 800211c:	80016bc0 	call	80016bc <__sfp_lock_acquire>
 8002120:	a8001426 	beq	r21,zero,8002174 <_fwalk+0x88>
 8002124:	04ffffc4 	movi	r19,-1
 8002128:	ac400117 	ldw	r17,4(r21)
 800212c:	ac800217 	ldw	r18,8(r21)
 8002130:	8c7fffc4 	addi	r17,r17,-1
 8002134:	88000d16 	blt	r17,zero,800216c <_fwalk+0x80>
 8002138:	94000304 	addi	r16,r18,12
 800213c:	94800384 	addi	r18,r18,14
 8002140:	80c0000f 	ldh	r3,0(r16)
 8002144:	8c7fffc4 	addi	r17,r17,-1
 8002148:	813ffd04 	addi	r4,r16,-12
 800214c:	18000426 	beq	r3,zero,8002160 <_fwalk+0x74>
 8002150:	90c0000f 	ldh	r3,0(r18)
 8002154:	1cc00226 	beq	r3,r19,8002160 <_fwalk+0x74>
 8002158:	a03ee83a 	callr	r20
 800215c:	b0acb03a 	or	r22,r22,r2
 8002160:	84001a04 	addi	r16,r16,104
 8002164:	94801a04 	addi	r18,r18,104
 8002168:	8cfff51e 	bne	r17,r19,8002140 <__alt_data_end+0xfc002140>
 800216c:	ad400017 	ldw	r21,0(r21)
 8002170:	a83fed1e 	bne	r21,zero,8002128 <__alt_data_end+0xfc002128>
 8002174:	80016c00 	call	80016c0 <__sfp_lock_release>
 8002178:	b005883a 	mov	r2,r22
 800217c:	dfc00717 	ldw	ra,28(sp)
 8002180:	dd800617 	ldw	r22,24(sp)
 8002184:	dd400517 	ldw	r21,20(sp)
 8002188:	dd000417 	ldw	r20,16(sp)
 800218c:	dcc00317 	ldw	r19,12(sp)
 8002190:	dc800217 	ldw	r18,8(sp)
 8002194:	dc400117 	ldw	r17,4(sp)
 8002198:	dc000017 	ldw	r16,0(sp)
 800219c:	dec00804 	addi	sp,sp,32
 80021a0:	f800283a 	ret

080021a4 <_fwalk_reent>:
 80021a4:	defff804 	addi	sp,sp,-32
 80021a8:	dd400515 	stw	r21,20(sp)
 80021ac:	2540b804 	addi	r21,r4,736
 80021b0:	dd800615 	stw	r22,24(sp)
 80021b4:	dd000415 	stw	r20,16(sp)
 80021b8:	dcc00315 	stw	r19,12(sp)
 80021bc:	dfc00715 	stw	ra,28(sp)
 80021c0:	dc800215 	stw	r18,8(sp)
 80021c4:	dc400115 	stw	r17,4(sp)
 80021c8:	dc000015 	stw	r16,0(sp)
 80021cc:	2027883a 	mov	r19,r4
 80021d0:	2829883a 	mov	r20,r5
 80021d4:	002d883a 	mov	r22,zero
 80021d8:	80016bc0 	call	80016bc <__sfp_lock_acquire>
 80021dc:	a8001326 	beq	r21,zero,800222c <_fwalk_reent+0x88>
 80021e0:	04bfffc4 	movi	r18,-1
 80021e4:	ac400117 	ldw	r17,4(r21)
 80021e8:	ac000217 	ldw	r16,8(r21)
 80021ec:	8c7fffc4 	addi	r17,r17,-1
 80021f0:	88000c16 	blt	r17,zero,8002224 <_fwalk_reent+0x80>
 80021f4:	84000304 	addi	r16,r16,12
 80021f8:	80c0000f 	ldh	r3,0(r16)
 80021fc:	8c7fffc4 	addi	r17,r17,-1
 8002200:	817ffd04 	addi	r5,r16,-12
 8002204:	18000526 	beq	r3,zero,800221c <_fwalk_reent+0x78>
 8002208:	80c0008f 	ldh	r3,2(r16)
 800220c:	9809883a 	mov	r4,r19
 8002210:	1c800226 	beq	r3,r18,800221c <_fwalk_reent+0x78>
 8002214:	a03ee83a 	callr	r20
 8002218:	b0acb03a 	or	r22,r22,r2
 800221c:	84001a04 	addi	r16,r16,104
 8002220:	8cbff51e 	bne	r17,r18,80021f8 <__alt_data_end+0xfc0021f8>
 8002224:	ad400017 	ldw	r21,0(r21)
 8002228:	a83fee1e 	bne	r21,zero,80021e4 <__alt_data_end+0xfc0021e4>
 800222c:	80016c00 	call	80016c0 <__sfp_lock_release>
 8002230:	b005883a 	mov	r2,r22
 8002234:	dfc00717 	ldw	ra,28(sp)
 8002238:	dd800617 	ldw	r22,24(sp)
 800223c:	dd400517 	ldw	r21,20(sp)
 8002240:	dd000417 	ldw	r20,16(sp)
 8002244:	dcc00317 	ldw	r19,12(sp)
 8002248:	dc800217 	ldw	r18,8(sp)
 800224c:	dc400117 	ldw	r17,4(sp)
 8002250:	dc000017 	ldw	r16,0(sp)
 8002254:	dec00804 	addi	sp,sp,32
 8002258:	f800283a 	ret

0800225c <_fwrite_r>:
 800225c:	defff504 	addi	sp,sp,-44
 8002260:	dc800715 	stw	r18,28(sp)
 8002264:	d9400315 	stw	r5,12(sp)
 8002268:	2025883a 	mov	r18,r4
 800226c:	300b883a 	mov	r5,r6
 8002270:	3809883a 	mov	r4,r7
 8002274:	dd000915 	stw	r20,36(sp)
 8002278:	dcc00815 	stw	r19,32(sp)
 800227c:	dc400615 	stw	r17,24(sp)
 8002280:	dfc00a15 	stw	ra,40(sp)
 8002284:	3029883a 	mov	r20,r6
 8002288:	3823883a 	mov	r17,r7
 800228c:	800bf500 	call	800bf50 <__mulsi3>
 8002290:	1027883a 	mov	r19,r2
 8002294:	d8800415 	stw	r2,16(sp)
 8002298:	d8800215 	stw	r2,8(sp)
 800229c:	d8800304 	addi	r2,sp,12
 80022a0:	d8800015 	stw	r2,0(sp)
 80022a4:	00800044 	movi	r2,1
 80022a8:	d8800115 	stw	r2,4(sp)
 80022ac:	d9400b17 	ldw	r5,44(sp)
 80022b0:	90000226 	beq	r18,zero,80022bc <_fwrite_r+0x60>
 80022b4:	90800e17 	ldw	r2,56(r18)
 80022b8:	10001a26 	beq	r2,zero,8002324 <_fwrite_r+0xc8>
 80022bc:	2880030b 	ldhu	r2,12(r5)
 80022c0:	10c8000c 	andi	r3,r2,8192
 80022c4:	1800061e 	bne	r3,zero,80022e0 <_fwrite_r+0x84>
 80022c8:	29001917 	ldw	r4,100(r5)
 80022cc:	00f7ffc4 	movi	r3,-8193
 80022d0:	10880014 	ori	r2,r2,8192
 80022d4:	20c6703a 	and	r3,r4,r3
 80022d8:	2880030d 	sth	r2,12(r5)
 80022dc:	28c01915 	stw	r3,100(r5)
 80022e0:	9009883a 	mov	r4,r18
 80022e4:	d80d883a 	mov	r6,sp
 80022e8:	800753c0 	call	800753c <__sfvwrite_r>
 80022ec:	10000b26 	beq	r2,zero,800231c <_fwrite_r+0xc0>
 80022f0:	d9000217 	ldw	r4,8(sp)
 80022f4:	a00b883a 	mov	r5,r20
 80022f8:	9909c83a 	sub	r4,r19,r4
 80022fc:	800bf400 	call	800bf40 <__udivsi3>
 8002300:	dfc00a17 	ldw	ra,40(sp)
 8002304:	dd000917 	ldw	r20,36(sp)
 8002308:	dcc00817 	ldw	r19,32(sp)
 800230c:	dc800717 	ldw	r18,28(sp)
 8002310:	dc400617 	ldw	r17,24(sp)
 8002314:	dec00b04 	addi	sp,sp,44
 8002318:	f800283a 	ret
 800231c:	8805883a 	mov	r2,r17
 8002320:	003ff706 	br	8002300 <__alt_data_end+0xfc002300>
 8002324:	9009883a 	mov	r4,r18
 8002328:	d9400515 	stw	r5,20(sp)
 800232c:	80016ac0 	call	80016ac <__sinit>
 8002330:	d9400517 	ldw	r5,20(sp)
 8002334:	003fe106 	br	80022bc <__alt_data_end+0xfc0022bc>

08002338 <fwrite>:
 8002338:	00820074 	movhi	r2,2049
 800233c:	108f3204 	addi	r2,r2,15560
 8002340:	2011883a 	mov	r8,r4
 8002344:	11000017 	ldw	r4,0(r2)
 8002348:	defffe04 	addi	sp,sp,-8
 800234c:	2807883a 	mov	r3,r5
 8002350:	3005883a 	mov	r2,r6
 8002354:	d9c00015 	stw	r7,0(sp)
 8002358:	400b883a 	mov	r5,r8
 800235c:	180d883a 	mov	r6,r3
 8002360:	100f883a 	mov	r7,r2
 8002364:	dfc00115 	stw	ra,4(sp)
 8002368:	800225c0 	call	800225c <_fwrite_r>
 800236c:	dfc00117 	ldw	ra,4(sp)
 8002370:	dec00204 	addi	sp,sp,8
 8002374:	f800283a 	ret

08002378 <_getc_r>:
 8002378:	defffd04 	addi	sp,sp,-12
 800237c:	dc400115 	stw	r17,4(sp)
 8002380:	dc000015 	stw	r16,0(sp)
 8002384:	dfc00215 	stw	ra,8(sp)
 8002388:	2023883a 	mov	r17,r4
 800238c:	2821883a 	mov	r16,r5
 8002390:	20000226 	beq	r4,zero,800239c <_getc_r+0x24>
 8002394:	20800e17 	ldw	r2,56(r4)
 8002398:	10001026 	beq	r2,zero,80023dc <_getc_r+0x64>
 800239c:	80016bc0 	call	80016bc <__sfp_lock_acquire>
 80023a0:	80800117 	ldw	r2,4(r16)
 80023a4:	10bfffc4 	addi	r2,r2,-1
 80023a8:	80800115 	stw	r2,4(r16)
 80023ac:	10000d16 	blt	r2,zero,80023e4 <_getc_r+0x6c>
 80023b0:	80800017 	ldw	r2,0(r16)
 80023b4:	10c00044 	addi	r3,r2,1
 80023b8:	80c00015 	stw	r3,0(r16)
 80023bc:	14000003 	ldbu	r16,0(r2)
 80023c0:	80016c00 	call	80016c0 <__sfp_lock_release>
 80023c4:	8005883a 	mov	r2,r16
 80023c8:	dfc00217 	ldw	ra,8(sp)
 80023cc:	dc400117 	ldw	r17,4(sp)
 80023d0:	dc000017 	ldw	r16,0(sp)
 80023d4:	dec00304 	addi	sp,sp,12
 80023d8:	f800283a 	ret
 80023dc:	80016ac0 	call	80016ac <__sinit>
 80023e0:	003fee06 	br	800239c <__alt_data_end+0xfc00239c>
 80023e4:	800b883a 	mov	r5,r16
 80023e8:	8809883a 	mov	r4,r17
 80023ec:	80032580 	call	8003258 <__srget_r>
 80023f0:	1021883a 	mov	r16,r2
 80023f4:	003ff206 	br	80023c0 <__alt_data_end+0xfc0023c0>

080023f8 <getc>:
 80023f8:	defffd04 	addi	sp,sp,-12
 80023fc:	dc400115 	stw	r17,4(sp)
 8002400:	04420074 	movhi	r17,2049
 8002404:	8c4f3204 	addi	r17,r17,15560
 8002408:	dc000015 	stw	r16,0(sp)
 800240c:	2021883a 	mov	r16,r4
 8002410:	89000017 	ldw	r4,0(r17)
 8002414:	dfc00215 	stw	ra,8(sp)
 8002418:	20000226 	beq	r4,zero,8002424 <getc+0x2c>
 800241c:	20800e17 	ldw	r2,56(r4)
 8002420:	10001026 	beq	r2,zero,8002464 <getc+0x6c>
 8002424:	80016bc0 	call	80016bc <__sfp_lock_acquire>
 8002428:	80800117 	ldw	r2,4(r16)
 800242c:	10bfffc4 	addi	r2,r2,-1
 8002430:	80800115 	stw	r2,4(r16)
 8002434:	10000d16 	blt	r2,zero,800246c <getc+0x74>
 8002438:	80800017 	ldw	r2,0(r16)
 800243c:	10c00044 	addi	r3,r2,1
 8002440:	80c00015 	stw	r3,0(r16)
 8002444:	14000003 	ldbu	r16,0(r2)
 8002448:	80016c00 	call	80016c0 <__sfp_lock_release>
 800244c:	8005883a 	mov	r2,r16
 8002450:	dfc00217 	ldw	ra,8(sp)
 8002454:	dc400117 	ldw	r17,4(sp)
 8002458:	dc000017 	ldw	r16,0(sp)
 800245c:	dec00304 	addi	sp,sp,12
 8002460:	f800283a 	ret
 8002464:	80016ac0 	call	80016ac <__sinit>
 8002468:	003fee06 	br	8002424 <__alt_data_end+0xfc002424>
 800246c:	89000017 	ldw	r4,0(r17)
 8002470:	800b883a 	mov	r5,r16
 8002474:	80032580 	call	8003258 <__srget_r>
 8002478:	1021883a 	mov	r16,r2
 800247c:	003ff206 	br	8002448 <__alt_data_end+0xfc002448>

08002480 <__smakebuf_r>:
 8002480:	2880030b 	ldhu	r2,12(r5)
 8002484:	10c0008c 	andi	r3,r2,2
 8002488:	1800401e 	bne	r3,zero,800258c <__smakebuf_r+0x10c>
 800248c:	deffec04 	addi	sp,sp,-80
 8002490:	dc000f15 	stw	r16,60(sp)
 8002494:	2821883a 	mov	r16,r5
 8002498:	2940038f 	ldh	r5,14(r5)
 800249c:	dc401015 	stw	r17,64(sp)
 80024a0:	dfc01315 	stw	ra,76(sp)
 80024a4:	dcc01215 	stw	r19,72(sp)
 80024a8:	dc801115 	stw	r18,68(sp)
 80024ac:	2023883a 	mov	r17,r4
 80024b0:	28001b16 	blt	r5,zero,8002520 <__smakebuf_r+0xa0>
 80024b4:	d80d883a 	mov	r6,sp
 80024b8:	80020940 	call	8002094 <_fstat_r>
 80024bc:	10001716 	blt	r2,zero,800251c <__smakebuf_r+0x9c>
 80024c0:	d8800117 	ldw	r2,4(sp)
 80024c4:	00e00014 	movui	r3,32768
 80024c8:	10bc000c 	andi	r2,r2,61440
 80024cc:	10c03726 	beq	r2,r3,80025ac <__smakebuf_r+0x12c>
 80024d0:	80c0030b 	ldhu	r3,12(r16)
 80024d4:	18c20014 	ori	r3,r3,2048
 80024d8:	80c0030d 	sth	r3,12(r16)
 80024dc:	00c80004 	movi	r3,8192
 80024e0:	10c03c1e 	bne	r2,r3,80025d4 <__smakebuf_r+0x154>
 80024e4:	8140038f 	ldh	r5,14(r16)
 80024e8:	8809883a 	mov	r4,r17
 80024ec:	80079e00 	call	80079e0 <_isatty_r>
 80024f0:	10004e26 	beq	r2,zero,800262c <__smakebuf_r+0x1ac>
 80024f4:	8080030b 	ldhu	r2,12(r16)
 80024f8:	04c00044 	movi	r19,1
 80024fc:	80c010c4 	addi	r3,r16,67
 8002500:	14c4b03a 	or	r2,r2,r19
 8002504:	8080030d 	sth	r2,12(r16)
 8002508:	80c00015 	stw	r3,0(r16)
 800250c:	80c00415 	stw	r3,16(r16)
 8002510:	84c00515 	stw	r19,20(r16)
 8002514:	04810004 	movi	r18,1024
 8002518:	00000706 	br	8002538 <__smakebuf_r+0xb8>
 800251c:	8080030b 	ldhu	r2,12(r16)
 8002520:	10c0200c 	andi	r3,r2,128
 8002524:	18001f1e 	bne	r3,zero,80025a4 <__smakebuf_r+0x124>
 8002528:	04810004 	movi	r18,1024
 800252c:	10820014 	ori	r2,r2,2048
 8002530:	8080030d 	sth	r2,12(r16)
 8002534:	0027883a 	mov	r19,zero
 8002538:	8809883a 	mov	r4,r17
 800253c:	900b883a 	mov	r5,r18
 8002540:	80026380 	call	8002638 <_malloc_r>
 8002544:	10002e26 	beq	r2,zero,8002600 <__smakebuf_r+0x180>
 8002548:	80c0030b 	ldhu	r3,12(r16)
 800254c:	01020034 	movhi	r4,2048
 8002550:	2104d604 	addi	r4,r4,4952
 8002554:	89000f15 	stw	r4,60(r17)
 8002558:	18c02014 	ori	r3,r3,128
 800255c:	80c0030d 	sth	r3,12(r16)
 8002560:	80800015 	stw	r2,0(r16)
 8002564:	80800415 	stw	r2,16(r16)
 8002568:	84800515 	stw	r18,20(r16)
 800256c:	98001c1e 	bne	r19,zero,80025e0 <__smakebuf_r+0x160>
 8002570:	dfc01317 	ldw	ra,76(sp)
 8002574:	dcc01217 	ldw	r19,72(sp)
 8002578:	dc801117 	ldw	r18,68(sp)
 800257c:	dc401017 	ldw	r17,64(sp)
 8002580:	dc000f17 	ldw	r16,60(sp)
 8002584:	dec01404 	addi	sp,sp,80
 8002588:	f800283a 	ret
 800258c:	288010c4 	addi	r2,r5,67
 8002590:	28800015 	stw	r2,0(r5)
 8002594:	28800415 	stw	r2,16(r5)
 8002598:	00800044 	movi	r2,1
 800259c:	28800515 	stw	r2,20(r5)
 80025a0:	f800283a 	ret
 80025a4:	04801004 	movi	r18,64
 80025a8:	003fe006 	br	800252c <__alt_data_end+0xfc00252c>
 80025ac:	81000a17 	ldw	r4,40(r16)
 80025b0:	00c20034 	movhi	r3,2048
 80025b4:	18cd0304 	addi	r3,r3,13324
 80025b8:	20ffc51e 	bne	r4,r3,80024d0 <__alt_data_end+0xfc0024d0>
 80025bc:	80c0030b 	ldhu	r3,12(r16)
 80025c0:	01010004 	movi	r4,1024
 80025c4:	81001315 	stw	r4,76(r16)
 80025c8:	1906b03a 	or	r3,r3,r4
 80025cc:	80c0030d 	sth	r3,12(r16)
 80025d0:	003fc206 	br	80024dc <__alt_data_end+0xfc0024dc>
 80025d4:	0027883a 	mov	r19,zero
 80025d8:	04810004 	movi	r18,1024
 80025dc:	003fd606 	br	8002538 <__alt_data_end+0xfc002538>
 80025e0:	8140038f 	ldh	r5,14(r16)
 80025e4:	8809883a 	mov	r4,r17
 80025e8:	80079e00 	call	80079e0 <_isatty_r>
 80025ec:	103fe026 	beq	r2,zero,8002570 <__alt_data_end+0xfc002570>
 80025f0:	8080030b 	ldhu	r2,12(r16)
 80025f4:	10800054 	ori	r2,r2,1
 80025f8:	8080030d 	sth	r2,12(r16)
 80025fc:	003fdc06 	br	8002570 <__alt_data_end+0xfc002570>
 8002600:	8080030b 	ldhu	r2,12(r16)
 8002604:	10c0800c 	andi	r3,r2,512
 8002608:	183fd91e 	bne	r3,zero,8002570 <__alt_data_end+0xfc002570>
 800260c:	10800094 	ori	r2,r2,2
 8002610:	80c010c4 	addi	r3,r16,67
 8002614:	8080030d 	sth	r2,12(r16)
 8002618:	00800044 	movi	r2,1
 800261c:	80c00015 	stw	r3,0(r16)
 8002620:	80c00415 	stw	r3,16(r16)
 8002624:	80800515 	stw	r2,20(r16)
 8002628:	003fd106 	br	8002570 <__alt_data_end+0xfc002570>
 800262c:	04c00044 	movi	r19,1
 8002630:	04810004 	movi	r18,1024
 8002634:	003fc006 	br	8002538 <__alt_data_end+0xfc002538>

08002638 <_malloc_r>:
 8002638:	defff504 	addi	sp,sp,-44
 800263c:	dc800315 	stw	r18,12(sp)
 8002640:	dfc00a15 	stw	ra,40(sp)
 8002644:	df000915 	stw	fp,36(sp)
 8002648:	ddc00815 	stw	r23,32(sp)
 800264c:	dd800715 	stw	r22,28(sp)
 8002650:	dd400615 	stw	r21,24(sp)
 8002654:	dd000515 	stw	r20,20(sp)
 8002658:	dcc00415 	stw	r19,16(sp)
 800265c:	dc400215 	stw	r17,8(sp)
 8002660:	dc000115 	stw	r16,4(sp)
 8002664:	288002c4 	addi	r2,r5,11
 8002668:	00c00584 	movi	r3,22
 800266c:	2025883a 	mov	r18,r4
 8002670:	18802a2e 	bgeu	r3,r2,800271c <_malloc_r+0xe4>
 8002674:	047ffe04 	movi	r17,-8
 8002678:	1462703a 	and	r17,r2,r17
 800267c:	88009e16 	blt	r17,zero,80028f8 <_malloc_r+0x2c0>
 8002680:	89409d36 	bltu	r17,r5,80028f8 <_malloc_r+0x2c0>
 8002684:	800ed540 	call	800ed54 <__malloc_lock>
 8002688:	00807dc4 	movi	r2,503
 800268c:	14402736 	bltu	r2,r17,800272c <_malloc_r+0xf4>
 8002690:	8806d0fa 	srli	r3,r17,3
 8002694:	04c20074 	movhi	r19,2049
 8002698:	9cc95e04 	addi	r19,r19,9592
 800269c:	18c5883a 	add	r2,r3,r3
 80026a0:	1085883a 	add	r2,r2,r2
 80026a4:	1085883a 	add	r2,r2,r2
 80026a8:	9885883a 	add	r2,r19,r2
 80026ac:	14000317 	ldw	r16,12(r2)
 80026b0:	80814a26 	beq	r16,r2,8002bdc <_malloc_r+0x5a4>
 80026b4:	80c00117 	ldw	r3,4(r16)
 80026b8:	81000317 	ldw	r4,12(r16)
 80026bc:	00bfff04 	movi	r2,-4
 80026c0:	1884703a 	and	r2,r3,r2
 80026c4:	81400217 	ldw	r5,8(r16)
 80026c8:	8085883a 	add	r2,r16,r2
 80026cc:	10c00117 	ldw	r3,4(r2)
 80026d0:	29000315 	stw	r4,12(r5)
 80026d4:	21400215 	stw	r5,8(r4)
 80026d8:	18c00054 	ori	r3,r3,1
 80026dc:	10c00115 	stw	r3,4(r2)
 80026e0:	9009883a 	mov	r4,r18
 80026e4:	800ed740 	call	800ed74 <__malloc_unlock>
 80026e8:	80800204 	addi	r2,r16,8
 80026ec:	dfc00a17 	ldw	ra,40(sp)
 80026f0:	df000917 	ldw	fp,36(sp)
 80026f4:	ddc00817 	ldw	r23,32(sp)
 80026f8:	dd800717 	ldw	r22,28(sp)
 80026fc:	dd400617 	ldw	r21,24(sp)
 8002700:	dd000517 	ldw	r20,20(sp)
 8002704:	dcc00417 	ldw	r19,16(sp)
 8002708:	dc800317 	ldw	r18,12(sp)
 800270c:	dc400217 	ldw	r17,8(sp)
 8002710:	dc000117 	ldw	r16,4(sp)
 8002714:	dec00b04 	addi	sp,sp,44
 8002718:	f800283a 	ret
 800271c:	04400404 	movi	r17,16
 8002720:	89407536 	bltu	r17,r5,80028f8 <_malloc_r+0x2c0>
 8002724:	800ed540 	call	800ed54 <__malloc_lock>
 8002728:	003fd906 	br	8002690 <__alt_data_end+0xfc002690>
 800272c:	8806d27a 	srli	r3,r17,9
 8002730:	18007526 	beq	r3,zero,8002908 <_malloc_r+0x2d0>
 8002734:	00800104 	movi	r2,4
 8002738:	10c0ef36 	bltu	r2,r3,8002af8 <_malloc_r+0x4c0>
 800273c:	8806d1ba 	srli	r3,r17,6
 8002740:	19c00e04 	addi	r7,r3,56
 8002744:	39cb883a 	add	r5,r7,r7
 8002748:	04c20074 	movhi	r19,2049
 800274c:	294b883a 	add	r5,r5,r5
 8002750:	9cc95e04 	addi	r19,r19,9592
 8002754:	294b883a 	add	r5,r5,r5
 8002758:	994b883a 	add	r5,r19,r5
 800275c:	2c000317 	ldw	r16,12(r5)
 8002760:	2c000e26 	beq	r5,r16,800279c <_malloc_r+0x164>
 8002764:	80800117 	ldw	r2,4(r16)
 8002768:	01bfff04 	movi	r6,-4
 800276c:	010003c4 	movi	r4,15
 8002770:	1184703a 	and	r2,r2,r6
 8002774:	1447c83a 	sub	r3,r2,r17
 8002778:	20c00716 	blt	r4,r3,8002798 <_malloc_r+0x160>
 800277c:	1800650e 	bge	r3,zero,8002914 <_malloc_r+0x2dc>
 8002780:	84000317 	ldw	r16,12(r16)
 8002784:	2c000526 	beq	r5,r16,800279c <_malloc_r+0x164>
 8002788:	80800117 	ldw	r2,4(r16)
 800278c:	1184703a 	and	r2,r2,r6
 8002790:	1447c83a 	sub	r3,r2,r17
 8002794:	20fff90e 	bge	r4,r3,800277c <__alt_data_end+0xfc00277c>
 8002798:	39ffffc4 	addi	r7,r7,-1
 800279c:	38c00044 	addi	r3,r7,1
 80027a0:	01820074 	movhi	r6,2049
 80027a4:	9c000417 	ldw	r16,16(r19)
 80027a8:	31895e04 	addi	r6,r6,9592
 80027ac:	32400204 	addi	r9,r6,8
 80027b0:	82410326 	beq	r16,r9,8002bc0 <_malloc_r+0x588>
 80027b4:	81000117 	ldw	r4,4(r16)
 80027b8:	00bfff04 	movi	r2,-4
 80027bc:	208e703a 	and	r7,r4,r2
 80027c0:	3c45c83a 	sub	r2,r7,r17
 80027c4:	010003c4 	movi	r4,15
 80027c8:	2080ee16 	blt	r4,r2,8002b84 <_malloc_r+0x54c>
 80027cc:	32400515 	stw	r9,20(r6)
 80027d0:	32400415 	stw	r9,16(r6)
 80027d4:	1000510e 	bge	r2,zero,800291c <_malloc_r+0x2e4>
 80027d8:	00807fc4 	movi	r2,511
 80027dc:	11c0ce36 	bltu	r2,r7,8002b18 <_malloc_r+0x4e0>
 80027e0:	3808d0fa 	srli	r4,r7,3
 80027e4:	01c00044 	movi	r7,1
 80027e8:	30800117 	ldw	r2,4(r6)
 80027ec:	210b883a 	add	r5,r4,r4
 80027f0:	294b883a 	add	r5,r5,r5
 80027f4:	2009d0ba 	srai	r4,r4,2
 80027f8:	294b883a 	add	r5,r5,r5
 80027fc:	298b883a 	add	r5,r5,r6
 8002800:	2a000217 	ldw	r8,8(r5)
 8002804:	3908983a 	sll	r4,r7,r4
 8002808:	81400315 	stw	r5,12(r16)
 800280c:	82000215 	stw	r8,8(r16)
 8002810:	2088b03a 	or	r4,r4,r2
 8002814:	2c000215 	stw	r16,8(r5)
 8002818:	31000115 	stw	r4,4(r6)
 800281c:	44000315 	stw	r16,12(r8)
 8002820:	1805d0ba 	srai	r2,r3,2
 8002824:	01400044 	movi	r5,1
 8002828:	288a983a 	sll	r5,r5,r2
 800282c:	21404336 	bltu	r4,r5,800293c <_malloc_r+0x304>
 8002830:	2144703a 	and	r2,r4,r5
 8002834:	10000a1e 	bne	r2,zero,8002860 <_malloc_r+0x228>
 8002838:	00bfff04 	movi	r2,-4
 800283c:	294b883a 	add	r5,r5,r5
 8002840:	1886703a 	and	r3,r3,r2
 8002844:	2144703a 	and	r2,r4,r5
 8002848:	18c00104 	addi	r3,r3,4
 800284c:	1000041e 	bne	r2,zero,8002860 <_malloc_r+0x228>
 8002850:	294b883a 	add	r5,r5,r5
 8002854:	2144703a 	and	r2,r4,r5
 8002858:	18c00104 	addi	r3,r3,4
 800285c:	103ffc26 	beq	r2,zero,8002850 <__alt_data_end+0xfc002850>
 8002860:	023fff04 	movi	r8,-4
 8002864:	01c003c4 	movi	r7,15
 8002868:	18c5883a 	add	r2,r3,r3
 800286c:	1085883a 	add	r2,r2,r2
 8002870:	1085883a 	add	r2,r2,r2
 8002874:	9895883a 	add	r10,r19,r2
 8002878:	52c00304 	addi	r11,r10,12
 800287c:	1819883a 	mov	r12,r3
 8002880:	5c000017 	ldw	r16,0(r11)
 8002884:	59bffd04 	addi	r6,r11,-12
 8002888:	8180041e 	bne	r16,r6,800289c <_malloc_r+0x264>
 800288c:	0000ce06 	br	8002bc8 <_malloc_r+0x590>
 8002890:	2000d70e 	bge	r4,zero,8002bf0 <_malloc_r+0x5b8>
 8002894:	84000317 	ldw	r16,12(r16)
 8002898:	8180cb26 	beq	r16,r6,8002bc8 <_malloc_r+0x590>
 800289c:	80800117 	ldw	r2,4(r16)
 80028a0:	1204703a 	and	r2,r2,r8
 80028a4:	1449c83a 	sub	r4,r2,r17
 80028a8:	393ff90e 	bge	r7,r4,8002890 <__alt_data_end+0xfc002890>
 80028ac:	80800317 	ldw	r2,12(r16)
 80028b0:	80c00217 	ldw	r3,8(r16)
 80028b4:	89400054 	ori	r5,r17,1
 80028b8:	81400115 	stw	r5,4(r16)
 80028bc:	18800315 	stw	r2,12(r3)
 80028c0:	10c00215 	stw	r3,8(r2)
 80028c4:	8463883a 	add	r17,r16,r17
 80028c8:	9c400515 	stw	r17,20(r19)
 80028cc:	9c400415 	stw	r17,16(r19)
 80028d0:	20800054 	ori	r2,r4,1
 80028d4:	88800115 	stw	r2,4(r17)
 80028d8:	8a400315 	stw	r9,12(r17)
 80028dc:	8a400215 	stw	r9,8(r17)
 80028e0:	8923883a 	add	r17,r17,r4
 80028e4:	89000015 	stw	r4,0(r17)
 80028e8:	9009883a 	mov	r4,r18
 80028ec:	800ed740 	call	800ed74 <__malloc_unlock>
 80028f0:	80800204 	addi	r2,r16,8
 80028f4:	003f7d06 	br	80026ec <__alt_data_end+0xfc0026ec>
 80028f8:	00800304 	movi	r2,12
 80028fc:	90800015 	stw	r2,0(r18)
 8002900:	0005883a 	mov	r2,zero
 8002904:	003f7906 	br	80026ec <__alt_data_end+0xfc0026ec>
 8002908:	01401f84 	movi	r5,126
 800290c:	01c00fc4 	movi	r7,63
 8002910:	003f8d06 	br	8002748 <__alt_data_end+0xfc002748>
 8002914:	81000317 	ldw	r4,12(r16)
 8002918:	003f6a06 	br	80026c4 <__alt_data_end+0xfc0026c4>
 800291c:	81c5883a 	add	r2,r16,r7
 8002920:	10c00117 	ldw	r3,4(r2)
 8002924:	9009883a 	mov	r4,r18
 8002928:	18c00054 	ori	r3,r3,1
 800292c:	10c00115 	stw	r3,4(r2)
 8002930:	800ed740 	call	800ed74 <__malloc_unlock>
 8002934:	80800204 	addi	r2,r16,8
 8002938:	003f6c06 	br	80026ec <__alt_data_end+0xfc0026ec>
 800293c:	9c000217 	ldw	r16,8(r19)
 8002940:	00bfff04 	movi	r2,-4
 8002944:	85800117 	ldw	r22,4(r16)
 8002948:	b0ac703a 	and	r22,r22,r2
 800294c:	b4400336 	bltu	r22,r17,800295c <_malloc_r+0x324>
 8002950:	b445c83a 	sub	r2,r22,r17
 8002954:	00c003c4 	movi	r3,15
 8002958:	18805d16 	blt	r3,r2,8002ad0 <_malloc_r+0x498>
 800295c:	05c20074 	movhi	r23,2049
 8002960:	00820074 	movhi	r2,2049
 8002964:	bdcf3304 	addi	r23,r23,15564
 8002968:	10963204 	addi	r2,r2,22728
 800296c:	15400017 	ldw	r21,0(r2)
 8002970:	b9000017 	ldw	r4,0(r23)
 8002974:	00ffffc4 	movi	r3,-1
 8002978:	858d883a 	add	r6,r16,r22
 800297c:	8d6b883a 	add	r21,r17,r21
 8002980:	20c0e426 	beq	r4,r3,8002d14 <_malloc_r+0x6dc>
 8002984:	ad4403c4 	addi	r21,r21,4111
 8002988:	00fc0004 	movi	r3,-4096
 800298c:	a8ea703a 	and	r21,r21,r3
 8002990:	9009883a 	mov	r4,r18
 8002994:	a80b883a 	mov	r5,r21
 8002998:	d9800015 	stw	r6,0(sp)
 800299c:	80032e00 	call	80032e0 <_sbrk_r>
 80029a0:	00ffffc4 	movi	r3,-1
 80029a4:	1029883a 	mov	r20,r2
 80029a8:	d9800017 	ldw	r6,0(sp)
 80029ac:	10c0a426 	beq	r2,r3,8002c40 <_malloc_r+0x608>
 80029b0:	1180a236 	bltu	r2,r6,8002c3c <_malloc_r+0x604>
 80029b4:	07020074 	movhi	fp,2049
 80029b8:	e7163c04 	addi	fp,fp,22768
 80029bc:	e0c00017 	ldw	r3,0(fp)
 80029c0:	a8c7883a 	add	r3,r21,r3
 80029c4:	e0c00015 	stw	r3,0(fp)
 80029c8:	3500da26 	beq	r6,r20,8002d34 <_malloc_r+0x6fc>
 80029cc:	b9000017 	ldw	r4,0(r23)
 80029d0:	00bfffc4 	movi	r2,-1
 80029d4:	2080e426 	beq	r4,r2,8002d68 <_malloc_r+0x730>
 80029d8:	a185c83a 	sub	r2,r20,r6
 80029dc:	1885883a 	add	r2,r3,r2
 80029e0:	e0800015 	stw	r2,0(fp)
 80029e4:	a0c001cc 	andi	r3,r20,7
 80029e8:	1800b526 	beq	r3,zero,8002cc0 <_malloc_r+0x688>
 80029ec:	a0e9c83a 	sub	r20,r20,r3
 80029f0:	00840204 	movi	r2,4104
 80029f4:	a5000204 	addi	r20,r20,8
 80029f8:	10c7c83a 	sub	r3,r2,r3
 80029fc:	a545883a 	add	r2,r20,r21
 8002a00:	1083ffcc 	andi	r2,r2,4095
 8002a04:	18abc83a 	sub	r21,r3,r2
 8002a08:	9009883a 	mov	r4,r18
 8002a0c:	a80b883a 	mov	r5,r21
 8002a10:	80032e00 	call	80032e0 <_sbrk_r>
 8002a14:	00ffffc4 	movi	r3,-1
 8002a18:	10c0d026 	beq	r2,r3,8002d5c <_malloc_r+0x724>
 8002a1c:	1507c83a 	sub	r3,r2,r20
 8002a20:	a8c7883a 	add	r3,r21,r3
 8002a24:	18c00054 	ori	r3,r3,1
 8002a28:	e0800017 	ldw	r2,0(fp)
 8002a2c:	9d000215 	stw	r20,8(r19)
 8002a30:	a0c00115 	stw	r3,4(r20)
 8002a34:	a887883a 	add	r3,r21,r2
 8002a38:	e0c00015 	stw	r3,0(fp)
 8002a3c:	84c00e26 	beq	r16,r19,8002a78 <_malloc_r+0x440>
 8002a40:	018003c4 	movi	r6,15
 8002a44:	3580a02e 	bgeu	r6,r22,8002cc8 <_malloc_r+0x690>
 8002a48:	81400117 	ldw	r5,4(r16)
 8002a4c:	013ffe04 	movi	r4,-8
 8002a50:	b0bffd04 	addi	r2,r22,-12
 8002a54:	1104703a 	and	r2,r2,r4
 8002a58:	2900004c 	andi	r4,r5,1
 8002a5c:	1108b03a 	or	r4,r2,r4
 8002a60:	81000115 	stw	r4,4(r16)
 8002a64:	01400144 	movi	r5,5
 8002a68:	8089883a 	add	r4,r16,r2
 8002a6c:	21400115 	stw	r5,4(r4)
 8002a70:	21400215 	stw	r5,8(r4)
 8002a74:	3080c036 	bltu	r6,r2,8002d78 <_malloc_r+0x740>
 8002a78:	00820074 	movhi	r2,2049
 8002a7c:	10963104 	addi	r2,r2,22724
 8002a80:	11000017 	ldw	r4,0(r2)
 8002a84:	20c0012e 	bgeu	r4,r3,8002a8c <_malloc_r+0x454>
 8002a88:	10c00015 	stw	r3,0(r2)
 8002a8c:	00820074 	movhi	r2,2049
 8002a90:	10963004 	addi	r2,r2,22720
 8002a94:	11000017 	ldw	r4,0(r2)
 8002a98:	9c000217 	ldw	r16,8(r19)
 8002a9c:	20c0012e 	bgeu	r4,r3,8002aa4 <_malloc_r+0x46c>
 8002aa0:	10c00015 	stw	r3,0(r2)
 8002aa4:	80c00117 	ldw	r3,4(r16)
 8002aa8:	00bfff04 	movi	r2,-4
 8002aac:	1886703a 	and	r3,r3,r2
 8002ab0:	1c45c83a 	sub	r2,r3,r17
 8002ab4:	1c400236 	bltu	r3,r17,8002ac0 <_malloc_r+0x488>
 8002ab8:	00c003c4 	movi	r3,15
 8002abc:	18800416 	blt	r3,r2,8002ad0 <_malloc_r+0x498>
 8002ac0:	9009883a 	mov	r4,r18
 8002ac4:	800ed740 	call	800ed74 <__malloc_unlock>
 8002ac8:	0005883a 	mov	r2,zero
 8002acc:	003f0706 	br	80026ec <__alt_data_end+0xfc0026ec>
 8002ad0:	88c00054 	ori	r3,r17,1
 8002ad4:	80c00115 	stw	r3,4(r16)
 8002ad8:	8463883a 	add	r17,r16,r17
 8002adc:	10800054 	ori	r2,r2,1
 8002ae0:	9c400215 	stw	r17,8(r19)
 8002ae4:	88800115 	stw	r2,4(r17)
 8002ae8:	9009883a 	mov	r4,r18
 8002aec:	800ed740 	call	800ed74 <__malloc_unlock>
 8002af0:	80800204 	addi	r2,r16,8
 8002af4:	003efd06 	br	80026ec <__alt_data_end+0xfc0026ec>
 8002af8:	00800504 	movi	r2,20
 8002afc:	10c0482e 	bgeu	r2,r3,8002c20 <_malloc_r+0x5e8>
 8002b00:	00801504 	movi	r2,84
 8002b04:	10c06836 	bltu	r2,r3,8002ca8 <_malloc_r+0x670>
 8002b08:	8806d33a 	srli	r3,r17,12
 8002b0c:	19c01b84 	addi	r7,r3,110
 8002b10:	39cb883a 	add	r5,r7,r7
 8002b14:	003f0c06 	br	8002748 <__alt_data_end+0xfc002748>
 8002b18:	3804d27a 	srli	r2,r7,9
 8002b1c:	01000104 	movi	r4,4
 8002b20:	2080422e 	bgeu	r4,r2,8002c2c <_malloc_r+0x5f4>
 8002b24:	01000504 	movi	r4,20
 8002b28:	20807c36 	bltu	r4,r2,8002d1c <_malloc_r+0x6e4>
 8002b2c:	110016c4 	addi	r4,r2,91
 8002b30:	210b883a 	add	r5,r4,r4
 8002b34:	294b883a 	add	r5,r5,r5
 8002b38:	294b883a 	add	r5,r5,r5
 8002b3c:	994b883a 	add	r5,r19,r5
 8002b40:	28800217 	ldw	r2,8(r5)
 8002b44:	02020074 	movhi	r8,2049
 8002b48:	42095e04 	addi	r8,r8,9592
 8002b4c:	11406326 	beq	r2,r5,8002cdc <_malloc_r+0x6a4>
 8002b50:	01bfff04 	movi	r6,-4
 8002b54:	11000117 	ldw	r4,4(r2)
 8002b58:	2188703a 	and	r4,r4,r6
 8002b5c:	3900022e 	bgeu	r7,r4,8002b68 <_malloc_r+0x530>
 8002b60:	10800217 	ldw	r2,8(r2)
 8002b64:	28bffb1e 	bne	r5,r2,8002b54 <__alt_data_end+0xfc002b54>
 8002b68:	11800317 	ldw	r6,12(r2)
 8002b6c:	99000117 	ldw	r4,4(r19)
 8002b70:	81800315 	stw	r6,12(r16)
 8002b74:	80800215 	stw	r2,8(r16)
 8002b78:	34000215 	stw	r16,8(r6)
 8002b7c:	14000315 	stw	r16,12(r2)
 8002b80:	003f2706 	br	8002820 <__alt_data_end+0xfc002820>
 8002b84:	88c00054 	ori	r3,r17,1
 8002b88:	80c00115 	stw	r3,4(r16)
 8002b8c:	8463883a 	add	r17,r16,r17
 8002b90:	34400515 	stw	r17,20(r6)
 8002b94:	34400415 	stw	r17,16(r6)
 8002b98:	10c00054 	ori	r3,r2,1
 8002b9c:	8a400315 	stw	r9,12(r17)
 8002ba0:	8a400215 	stw	r9,8(r17)
 8002ba4:	88c00115 	stw	r3,4(r17)
 8002ba8:	88a3883a 	add	r17,r17,r2
 8002bac:	88800015 	stw	r2,0(r17)
 8002bb0:	9009883a 	mov	r4,r18
 8002bb4:	800ed740 	call	800ed74 <__malloc_unlock>
 8002bb8:	80800204 	addi	r2,r16,8
 8002bbc:	003ecb06 	br	80026ec <__alt_data_end+0xfc0026ec>
 8002bc0:	31000117 	ldw	r4,4(r6)
 8002bc4:	003f1606 	br	8002820 <__alt_data_end+0xfc002820>
 8002bc8:	63000044 	addi	r12,r12,1
 8002bcc:	608000cc 	andi	r2,r12,3
 8002bd0:	5ac00204 	addi	r11,r11,8
 8002bd4:	103f2a1e 	bne	r2,zero,8002880 <__alt_data_end+0xfc002880>
 8002bd8:	00002106 	br	8002c60 <_malloc_r+0x628>
 8002bdc:	80800204 	addi	r2,r16,8
 8002be0:	84000517 	ldw	r16,20(r16)
 8002be4:	143eb31e 	bne	r2,r16,80026b4 <__alt_data_end+0xfc0026b4>
 8002be8:	18c00084 	addi	r3,r3,2
 8002bec:	003eec06 	br	80027a0 <__alt_data_end+0xfc0027a0>
 8002bf0:	8085883a 	add	r2,r16,r2
 8002bf4:	10c00117 	ldw	r3,4(r2)
 8002bf8:	81000317 	ldw	r4,12(r16)
 8002bfc:	81400217 	ldw	r5,8(r16)
 8002c00:	18c00054 	ori	r3,r3,1
 8002c04:	10c00115 	stw	r3,4(r2)
 8002c08:	29000315 	stw	r4,12(r5)
 8002c0c:	21400215 	stw	r5,8(r4)
 8002c10:	9009883a 	mov	r4,r18
 8002c14:	800ed740 	call	800ed74 <__malloc_unlock>
 8002c18:	80800204 	addi	r2,r16,8
 8002c1c:	003eb306 	br	80026ec <__alt_data_end+0xfc0026ec>
 8002c20:	19c016c4 	addi	r7,r3,91
 8002c24:	39cb883a 	add	r5,r7,r7
 8002c28:	003ec706 	br	8002748 <__alt_data_end+0xfc002748>
 8002c2c:	3804d1ba 	srli	r2,r7,6
 8002c30:	11000e04 	addi	r4,r2,56
 8002c34:	210b883a 	add	r5,r4,r4
 8002c38:	003fbe06 	br	8002b34 <__alt_data_end+0xfc002b34>
 8002c3c:	84ff5d26 	beq	r16,r19,80029b4 <__alt_data_end+0xfc0029b4>
 8002c40:	9c000217 	ldw	r16,8(r19)
 8002c44:	00bfff04 	movi	r2,-4
 8002c48:	80c00117 	ldw	r3,4(r16)
 8002c4c:	1886703a 	and	r3,r3,r2
 8002c50:	003f9706 	br	8002ab0 <__alt_data_end+0xfc002ab0>
 8002c54:	52800017 	ldw	r10,0(r10)
 8002c58:	18ffffc4 	addi	r3,r3,-1
 8002c5c:	50805c1e 	bne	r10,r2,8002dd0 <_malloc_r+0x798>
 8002c60:	190000cc 	andi	r4,r3,3
 8002c64:	50bffe04 	addi	r2,r10,-8
 8002c68:	203ffa1e 	bne	r4,zero,8002c54 <__alt_data_end+0xfc002c54>
 8002c6c:	98800117 	ldw	r2,4(r19)
 8002c70:	0146303a 	nor	r3,zero,r5
 8002c74:	1884703a 	and	r2,r3,r2
 8002c78:	98800115 	stw	r2,4(r19)
 8002c7c:	294b883a 	add	r5,r5,r5
 8002c80:	117f2e36 	bltu	r2,r5,800293c <__alt_data_end+0xfc00293c>
 8002c84:	283f2d26 	beq	r5,zero,800293c <__alt_data_end+0xfc00293c>
 8002c88:	1146703a 	and	r3,r2,r5
 8002c8c:	1800521e 	bne	r3,zero,8002dd8 <_malloc_r+0x7a0>
 8002c90:	6007883a 	mov	r3,r12
 8002c94:	294b883a 	add	r5,r5,r5
 8002c98:	1148703a 	and	r4,r2,r5
 8002c9c:	18c00104 	addi	r3,r3,4
 8002ca0:	203ffc26 	beq	r4,zero,8002c94 <__alt_data_end+0xfc002c94>
 8002ca4:	003ef006 	br	8002868 <__alt_data_end+0xfc002868>
 8002ca8:	00805504 	movi	r2,340
 8002cac:	10c01336 	bltu	r2,r3,8002cfc <_malloc_r+0x6c4>
 8002cb0:	8806d3fa 	srli	r3,r17,15
 8002cb4:	19c01dc4 	addi	r7,r3,119
 8002cb8:	39cb883a 	add	r5,r7,r7
 8002cbc:	003ea206 	br	8002748 <__alt_data_end+0xfc002748>
 8002cc0:	00c40004 	movi	r3,4096
 8002cc4:	003f4d06 	br	80029fc <__alt_data_end+0xfc0029fc>
 8002cc8:	00800044 	movi	r2,1
 8002ccc:	a0800115 	stw	r2,4(r20)
 8002cd0:	a021883a 	mov	r16,r20
 8002cd4:	0007883a 	mov	r3,zero
 8002cd8:	003f7506 	br	8002ab0 <__alt_data_end+0xfc002ab0>
 8002cdc:	200bd0ba 	srai	r5,r4,2
 8002ce0:	01800044 	movi	r6,1
 8002ce4:	41000117 	ldw	r4,4(r8)
 8002ce8:	314a983a 	sll	r5,r6,r5
 8002cec:	100d883a 	mov	r6,r2
 8002cf0:	2908b03a 	or	r4,r5,r4
 8002cf4:	41000115 	stw	r4,4(r8)
 8002cf8:	003f9d06 	br	8002b70 <__alt_data_end+0xfc002b70>
 8002cfc:	00815504 	movi	r2,1364
 8002d00:	10c01336 	bltu	r2,r3,8002d50 <_malloc_r+0x718>
 8002d04:	8806d4ba 	srli	r3,r17,18
 8002d08:	19c01f04 	addi	r7,r3,124
 8002d0c:	39cb883a 	add	r5,r7,r7
 8002d10:	003e8d06 	br	8002748 <__alt_data_end+0xfc002748>
 8002d14:	ad400404 	addi	r21,r21,16
 8002d18:	003f1d06 	br	8002990 <__alt_data_end+0xfc002990>
 8002d1c:	01001504 	movi	r4,84
 8002d20:	20801c36 	bltu	r4,r2,8002d94 <_malloc_r+0x75c>
 8002d24:	3804d33a 	srli	r2,r7,12
 8002d28:	11001b84 	addi	r4,r2,110
 8002d2c:	210b883a 	add	r5,r4,r4
 8002d30:	003f8006 	br	8002b34 <__alt_data_end+0xfc002b34>
 8002d34:	3083ffcc 	andi	r2,r6,4095
 8002d38:	103f241e 	bne	r2,zero,80029cc <__alt_data_end+0xfc0029cc>
 8002d3c:	99000217 	ldw	r4,8(r19)
 8002d40:	ad85883a 	add	r2,r21,r22
 8002d44:	10800054 	ori	r2,r2,1
 8002d48:	20800115 	stw	r2,4(r4)
 8002d4c:	003f4a06 	br	8002a78 <__alt_data_end+0xfc002a78>
 8002d50:	01403f04 	movi	r5,252
 8002d54:	01c01f84 	movi	r7,126
 8002d58:	003e7b06 	br	8002748 <__alt_data_end+0xfc002748>
 8002d5c:	00c00044 	movi	r3,1
 8002d60:	002b883a 	mov	r21,zero
 8002d64:	003f3006 	br	8002a28 <__alt_data_end+0xfc002a28>
 8002d68:	00820074 	movhi	r2,2049
 8002d6c:	108f3304 	addi	r2,r2,15564
 8002d70:	15000015 	stw	r20,0(r2)
 8002d74:	003f1b06 	br	80029e4 <__alt_data_end+0xfc0029e4>
 8002d78:	9009883a 	mov	r4,r18
 8002d7c:	81400204 	addi	r5,r16,8
 8002d80:	800192c0 	call	800192c <_free_r>
 8002d84:	00820074 	movhi	r2,2049
 8002d88:	10963c04 	addi	r2,r2,22768
 8002d8c:	10c00017 	ldw	r3,0(r2)
 8002d90:	003f3906 	br	8002a78 <__alt_data_end+0xfc002a78>
 8002d94:	01005504 	movi	r4,340
 8002d98:	20800436 	bltu	r4,r2,8002dac <_malloc_r+0x774>
 8002d9c:	3804d3fa 	srli	r2,r7,15
 8002da0:	11001dc4 	addi	r4,r2,119
 8002da4:	210b883a 	add	r5,r4,r4
 8002da8:	003f6206 	br	8002b34 <__alt_data_end+0xfc002b34>
 8002dac:	01015504 	movi	r4,1364
 8002db0:	20800436 	bltu	r4,r2,8002dc4 <_malloc_r+0x78c>
 8002db4:	3804d4ba 	srli	r2,r7,18
 8002db8:	11001f04 	addi	r4,r2,124
 8002dbc:	210b883a 	add	r5,r4,r4
 8002dc0:	003f5c06 	br	8002b34 <__alt_data_end+0xfc002b34>
 8002dc4:	01403f04 	movi	r5,252
 8002dc8:	01001f84 	movi	r4,126
 8002dcc:	003f5906 	br	8002b34 <__alt_data_end+0xfc002b34>
 8002dd0:	98800117 	ldw	r2,4(r19)
 8002dd4:	003fa906 	br	8002c7c <__alt_data_end+0xfc002c7c>
 8002dd8:	6007883a 	mov	r3,r12
 8002ddc:	003ea206 	br	8002868 <__alt_data_end+0xfc002868>

08002de0 <memset>:
 8002de0:	20c000cc 	andi	r3,r4,3
 8002de4:	2005883a 	mov	r2,r4
 8002de8:	18004326 	beq	r3,zero,8002ef8 <memset+0x118>
 8002dec:	31ffffc4 	addi	r7,r6,-1
 8002df0:	30004026 	beq	r6,zero,8002ef4 <memset+0x114>
 8002df4:	2813883a 	mov	r9,r5
 8002df8:	200d883a 	mov	r6,r4
 8002dfc:	2007883a 	mov	r3,r4
 8002e00:	00000406 	br	8002e14 <memset+0x34>
 8002e04:	3a3fffc4 	addi	r8,r7,-1
 8002e08:	31800044 	addi	r6,r6,1
 8002e0c:	38003926 	beq	r7,zero,8002ef4 <memset+0x114>
 8002e10:	400f883a 	mov	r7,r8
 8002e14:	18c00044 	addi	r3,r3,1
 8002e18:	32400005 	stb	r9,0(r6)
 8002e1c:	1a0000cc 	andi	r8,r3,3
 8002e20:	403ff81e 	bne	r8,zero,8002e04 <__alt_data_end+0xfc002e04>
 8002e24:	010000c4 	movi	r4,3
 8002e28:	21c02d2e 	bgeu	r4,r7,8002ee0 <memset+0x100>
 8002e2c:	29803fcc 	andi	r6,r5,255
 8002e30:	3008923a 	slli	r4,r6,8
 8002e34:	218cb03a 	or	r6,r4,r6
 8002e38:	3008943a 	slli	r4,r6,16
 8002e3c:	218cb03a 	or	r6,r4,r6
 8002e40:	010003c4 	movi	r4,15
 8002e44:	21c0182e 	bgeu	r4,r7,8002ea8 <memset+0xc8>
 8002e48:	3b3ffc04 	addi	r12,r7,-16
 8002e4c:	6018d13a 	srli	r12,r12,4
 8002e50:	1a000104 	addi	r8,r3,4
 8002e54:	1ac00204 	addi	r11,r3,8
 8002e58:	6008913a 	slli	r4,r12,4
 8002e5c:	1a800304 	addi	r10,r3,12
 8002e60:	1813883a 	mov	r9,r3
 8002e64:	21000504 	addi	r4,r4,20
 8002e68:	1909883a 	add	r4,r3,r4
 8002e6c:	49800015 	stw	r6,0(r9)
 8002e70:	41800015 	stw	r6,0(r8)
 8002e74:	59800015 	stw	r6,0(r11)
 8002e78:	51800015 	stw	r6,0(r10)
 8002e7c:	42000404 	addi	r8,r8,16
 8002e80:	4a400404 	addi	r9,r9,16
 8002e84:	5ac00404 	addi	r11,r11,16
 8002e88:	52800404 	addi	r10,r10,16
 8002e8c:	413ff71e 	bne	r8,r4,8002e6c <__alt_data_end+0xfc002e6c>
 8002e90:	63000044 	addi	r12,r12,1
 8002e94:	6018913a 	slli	r12,r12,4
 8002e98:	39c003cc 	andi	r7,r7,15
 8002e9c:	010000c4 	movi	r4,3
 8002ea0:	1b07883a 	add	r3,r3,r12
 8002ea4:	21c00e2e 	bgeu	r4,r7,8002ee0 <memset+0x100>
 8002ea8:	1813883a 	mov	r9,r3
 8002eac:	3811883a 	mov	r8,r7
 8002eb0:	010000c4 	movi	r4,3
 8002eb4:	49800015 	stw	r6,0(r9)
 8002eb8:	423fff04 	addi	r8,r8,-4
 8002ebc:	4a400104 	addi	r9,r9,4
 8002ec0:	223ffc36 	bltu	r4,r8,8002eb4 <__alt_data_end+0xfc002eb4>
 8002ec4:	393fff04 	addi	r4,r7,-4
 8002ec8:	2008d0ba 	srli	r4,r4,2
 8002ecc:	39c000cc 	andi	r7,r7,3
 8002ed0:	21000044 	addi	r4,r4,1
 8002ed4:	2109883a 	add	r4,r4,r4
 8002ed8:	2109883a 	add	r4,r4,r4
 8002edc:	1907883a 	add	r3,r3,r4
 8002ee0:	38000426 	beq	r7,zero,8002ef4 <memset+0x114>
 8002ee4:	19cf883a 	add	r7,r3,r7
 8002ee8:	19400005 	stb	r5,0(r3)
 8002eec:	18c00044 	addi	r3,r3,1
 8002ef0:	19fffd1e 	bne	r3,r7,8002ee8 <__alt_data_end+0xfc002ee8>
 8002ef4:	f800283a 	ret
 8002ef8:	2007883a 	mov	r3,r4
 8002efc:	300f883a 	mov	r7,r6
 8002f00:	003fc806 	br	8002e24 <__alt_data_end+0xfc002e24>

08002f04 <_open_r>:
 8002f04:	defffd04 	addi	sp,sp,-12
 8002f08:	dc000015 	stw	r16,0(sp)
 8002f0c:	04020074 	movhi	r16,2049
 8002f10:	dc400115 	stw	r17,4(sp)
 8002f14:	84162f04 	addi	r16,r16,22716
 8002f18:	2023883a 	mov	r17,r4
 8002f1c:	2809883a 	mov	r4,r5
 8002f20:	300b883a 	mov	r5,r6
 8002f24:	380d883a 	mov	r6,r7
 8002f28:	dfc00215 	stw	ra,8(sp)
 8002f2c:	80000015 	stw	zero,0(r16)
 8002f30:	800eed80 	call	800eed8 <open>
 8002f34:	00ffffc4 	movi	r3,-1
 8002f38:	10c00526 	beq	r2,r3,8002f50 <_open_r+0x4c>
 8002f3c:	dfc00217 	ldw	ra,8(sp)
 8002f40:	dc400117 	ldw	r17,4(sp)
 8002f44:	dc000017 	ldw	r16,0(sp)
 8002f48:	dec00304 	addi	sp,sp,12
 8002f4c:	f800283a 	ret
 8002f50:	80c00017 	ldw	r3,0(r16)
 8002f54:	183ff926 	beq	r3,zero,8002f3c <__alt_data_end+0xfc002f3c>
 8002f58:	88c00015 	stw	r3,0(r17)
 8002f5c:	003ff706 	br	8002f3c <__alt_data_end+0xfc002f3c>

08002f60 <_printf_r>:
 8002f60:	defffd04 	addi	sp,sp,-12
 8002f64:	dfc00015 	stw	ra,0(sp)
 8002f68:	d9800115 	stw	r6,4(sp)
 8002f6c:	d9c00215 	stw	r7,8(sp)
 8002f70:	280d883a 	mov	r6,r5
 8002f74:	21400217 	ldw	r5,8(r4)
 8002f78:	d9c00104 	addi	r7,sp,4
 8002f7c:	80038540 	call	8003854 <___vfprintf_internal_r>
 8002f80:	dfc00017 	ldw	ra,0(sp)
 8002f84:	dec00304 	addi	sp,sp,12
 8002f88:	f800283a 	ret

08002f8c <printf>:
 8002f8c:	defffc04 	addi	sp,sp,-16
 8002f90:	dfc00015 	stw	ra,0(sp)
 8002f94:	d9400115 	stw	r5,4(sp)
 8002f98:	d9800215 	stw	r6,8(sp)
 8002f9c:	d9c00315 	stw	r7,12(sp)
 8002fa0:	00820074 	movhi	r2,2049
 8002fa4:	108f3204 	addi	r2,r2,15560
 8002fa8:	10800017 	ldw	r2,0(r2)
 8002fac:	200b883a 	mov	r5,r4
 8002fb0:	d9800104 	addi	r6,sp,4
 8002fb4:	11000217 	ldw	r4,8(r2)
 8002fb8:	80059500 	call	8005950 <__vfprintf_internal>
 8002fbc:	dfc00017 	ldw	ra,0(sp)
 8002fc0:	dec00404 	addi	sp,sp,16
 8002fc4:	f800283a 	ret

08002fc8 <_puts_r>:
 8002fc8:	defff604 	addi	sp,sp,-40
 8002fcc:	dc000715 	stw	r16,28(sp)
 8002fd0:	2021883a 	mov	r16,r4
 8002fd4:	2809883a 	mov	r4,r5
 8002fd8:	dc400815 	stw	r17,32(sp)
 8002fdc:	dfc00915 	stw	ra,36(sp)
 8002fe0:	2823883a 	mov	r17,r5
 8002fe4:	80034700 	call	8003470 <strlen>
 8002fe8:	00c20074 	movhi	r3,2049
 8002fec:	18cf3204 	addi	r3,r3,15560
 8002ff0:	18c00017 	ldw	r3,0(r3)
 8002ff4:	11000044 	addi	r4,r2,1
 8002ff8:	d8800115 	stw	r2,4(sp)
 8002ffc:	18c00217 	ldw	r3,8(r3)
 8003000:	01420074 	movhi	r5,2049
 8003004:	2946f304 	addi	r5,r5,7116
 8003008:	1880030b 	ldhu	r2,12(r3)
 800300c:	d9400215 	stw	r5,8(sp)
 8003010:	d9000615 	stw	r4,24(sp)
 8003014:	01400044 	movi	r5,1
 8003018:	01000084 	movi	r4,2
 800301c:	d9000515 	stw	r4,20(sp)
 8003020:	dc400015 	stw	r17,0(sp)
 8003024:	d9400315 	stw	r5,12(sp)
 8003028:	dec00415 	stw	sp,16(sp)
 800302c:	1108000c 	andi	r4,r2,8192
 8003030:	2000061e 	bne	r4,zero,800304c <_puts_r+0x84>
 8003034:	19401917 	ldw	r5,100(r3)
 8003038:	0137ffc4 	movi	r4,-8193
 800303c:	10880014 	ori	r2,r2,8192
 8003040:	2908703a 	and	r4,r5,r4
 8003044:	1880030d 	sth	r2,12(r3)
 8003048:	19001915 	stw	r4,100(r3)
 800304c:	81400217 	ldw	r5,8(r16)
 8003050:	8009883a 	mov	r4,r16
 8003054:	d9800404 	addi	r6,sp,16
 8003058:	800753c0 	call	800753c <__sfvwrite_r>
 800305c:	1000061e 	bne	r2,zero,8003078 <_puts_r+0xb0>
 8003060:	00800284 	movi	r2,10
 8003064:	dfc00917 	ldw	ra,36(sp)
 8003068:	dc400817 	ldw	r17,32(sp)
 800306c:	dc000717 	ldw	r16,28(sp)
 8003070:	dec00a04 	addi	sp,sp,40
 8003074:	f800283a 	ret
 8003078:	00bfffc4 	movi	r2,-1
 800307c:	003ff906 	br	8003064 <__alt_data_end+0xfc003064>

08003080 <puts>:
 8003080:	00820074 	movhi	r2,2049
 8003084:	108f3204 	addi	r2,r2,15560
 8003088:	200b883a 	mov	r5,r4
 800308c:	11000017 	ldw	r4,0(r2)
 8003090:	8002fc81 	jmpi	8002fc8 <_puts_r>

08003094 <lflush>:
 8003094:	2080030b 	ldhu	r2,12(r4)
 8003098:	00c00244 	movi	r3,9
 800309c:	1080024c 	andi	r2,r2,9
 80030a0:	10c00226 	beq	r2,r3,80030ac <lflush+0x18>
 80030a4:	0005883a 	mov	r2,zero
 80030a8:	f800283a 	ret
 80030ac:	80013181 	jmpi	8001318 <fflush>

080030b0 <__srefill_r>:
 80030b0:	defffd04 	addi	sp,sp,-12
 80030b4:	dc400115 	stw	r17,4(sp)
 80030b8:	dc000015 	stw	r16,0(sp)
 80030bc:	dfc00215 	stw	ra,8(sp)
 80030c0:	2023883a 	mov	r17,r4
 80030c4:	2821883a 	mov	r16,r5
 80030c8:	20000226 	beq	r4,zero,80030d4 <__srefill_r+0x24>
 80030cc:	20800e17 	ldw	r2,56(r4)
 80030d0:	10003b26 	beq	r2,zero,80031c0 <__srefill_r+0x110>
 80030d4:	80c0030b 	ldhu	r3,12(r16)
 80030d8:	1908000c 	andi	r4,r3,8192
 80030dc:	1805883a 	mov	r2,r3
 80030e0:	2000071e 	bne	r4,zero,8003100 <__srefill_r+0x50>
 80030e4:	81001917 	ldw	r4,100(r16)
 80030e8:	18880014 	ori	r2,r3,8192
 80030ec:	00f7ffc4 	movi	r3,-8193
 80030f0:	20c8703a 	and	r4,r4,r3
 80030f4:	8080030d 	sth	r2,12(r16)
 80030f8:	1007883a 	mov	r3,r2
 80030fc:	81001915 	stw	r4,100(r16)
 8003100:	80000115 	stw	zero,4(r16)
 8003104:	1100080c 	andi	r4,r2,32
 8003108:	20004d1e 	bne	r4,zero,8003240 <__srefill_r+0x190>
 800310c:	1100010c 	andi	r4,r2,4
 8003110:	20001e26 	beq	r4,zero,800318c <__srefill_r+0xdc>
 8003114:	81400c17 	ldw	r5,48(r16)
 8003118:	28000826 	beq	r5,zero,800313c <__srefill_r+0x8c>
 800311c:	80801004 	addi	r2,r16,64
 8003120:	28800226 	beq	r5,r2,800312c <__srefill_r+0x7c>
 8003124:	8809883a 	mov	r4,r17
 8003128:	800192c0 	call	800192c <_free_r>
 800312c:	80800f17 	ldw	r2,60(r16)
 8003130:	80000c15 	stw	zero,48(r16)
 8003134:	80800115 	stw	r2,4(r16)
 8003138:	10002f1e 	bne	r2,zero,80031f8 <__srefill_r+0x148>
 800313c:	80800417 	ldw	r2,16(r16)
 8003140:	10004126 	beq	r2,zero,8003248 <__srefill_r+0x198>
 8003144:	8080030b 	ldhu	r2,12(r16)
 8003148:	108000cc 	andi	r2,r2,3
 800314c:	10001e1e 	bne	r2,zero,80031c8 <__srefill_r+0x118>
 8003150:	81800417 	ldw	r6,16(r16)
 8003154:	80800817 	ldw	r2,32(r16)
 8003158:	81400717 	ldw	r5,28(r16)
 800315c:	81c00517 	ldw	r7,20(r16)
 8003160:	81800015 	stw	r6,0(r16)
 8003164:	8809883a 	mov	r4,r17
 8003168:	103ee83a 	callr	r2
 800316c:	80800115 	stw	r2,4(r16)
 8003170:	00800d0e 	bge	zero,r2,80031a8 <__srefill_r+0xf8>
 8003174:	0005883a 	mov	r2,zero
 8003178:	dfc00217 	ldw	ra,8(sp)
 800317c:	dc400117 	ldw	r17,4(sp)
 8003180:	dc000017 	ldw	r16,0(sp)
 8003184:	dec00304 	addi	sp,sp,12
 8003188:	f800283a 	ret
 800318c:	1100040c 	andi	r4,r2,16
 8003190:	20002726 	beq	r4,zero,8003230 <__srefill_r+0x180>
 8003194:	1080020c 	andi	r2,r2,8
 8003198:	10001b1e 	bne	r2,zero,8003208 <__srefill_r+0x158>
 800319c:	18c00114 	ori	r3,r3,4
 80031a0:	80c0030d 	sth	r3,12(r16)
 80031a4:	003fe506 	br	800313c <__alt_data_end+0xfc00313c>
 80031a8:	80c0030b 	ldhu	r3,12(r16)
 80031ac:	10000d1e 	bne	r2,zero,80031e4 <__srefill_r+0x134>
 80031b0:	18c00814 	ori	r3,r3,32
 80031b4:	00bfffc4 	movi	r2,-1
 80031b8:	80c0030d 	sth	r3,12(r16)
 80031bc:	003fee06 	br	8003178 <__alt_data_end+0xfc003178>
 80031c0:	80016ac0 	call	80016ac <__sinit>
 80031c4:	003fc306 	br	80030d4 <__alt_data_end+0xfc0030d4>
 80031c8:	00820074 	movhi	r2,2049
 80031cc:	108f3104 	addi	r2,r2,15556
 80031d0:	11000017 	ldw	r4,0(r2)
 80031d4:	01420034 	movhi	r5,2048
 80031d8:	294c2504 	addi	r5,r5,12436
 80031dc:	80020ec0 	call	80020ec <_fwalk>
 80031e0:	003fdb06 	br	8003150 <__alt_data_end+0xfc003150>
 80031e4:	18c01014 	ori	r3,r3,64
 80031e8:	80000115 	stw	zero,4(r16)
 80031ec:	00bfffc4 	movi	r2,-1
 80031f0:	80c0030d 	sth	r3,12(r16)
 80031f4:	003fe006 	br	8003178 <__alt_data_end+0xfc003178>
 80031f8:	80c00e17 	ldw	r3,56(r16)
 80031fc:	0005883a 	mov	r2,zero
 8003200:	80c00015 	stw	r3,0(r16)
 8003204:	003fdc06 	br	8003178 <__alt_data_end+0xfc003178>
 8003208:	8809883a 	mov	r4,r17
 800320c:	800b883a 	mov	r5,r16
 8003210:	80010f00 	call	80010f0 <_fflush_r>
 8003214:	10000a1e 	bne	r2,zero,8003240 <__srefill_r+0x190>
 8003218:	8080030b 	ldhu	r2,12(r16)
 800321c:	00fffdc4 	movi	r3,-9
 8003220:	80000215 	stw	zero,8(r16)
 8003224:	1886703a 	and	r3,r3,r2
 8003228:	80000615 	stw	zero,24(r16)
 800322c:	003fdb06 	br	800319c <__alt_data_end+0xfc00319c>
 8003230:	00800244 	movi	r2,9
 8003234:	88800015 	stw	r2,0(r17)
 8003238:	18c01014 	ori	r3,r3,64
 800323c:	80c0030d 	sth	r3,12(r16)
 8003240:	00bfffc4 	movi	r2,-1
 8003244:	003fcc06 	br	8003178 <__alt_data_end+0xfc003178>
 8003248:	8809883a 	mov	r4,r17
 800324c:	800b883a 	mov	r5,r16
 8003250:	80024800 	call	8002480 <__smakebuf_r>
 8003254:	003fbb06 	br	8003144 <__alt_data_end+0xfc003144>

08003258 <__srget_r>:
 8003258:	defffd04 	addi	sp,sp,-12
 800325c:	dc400115 	stw	r17,4(sp)
 8003260:	dc000015 	stw	r16,0(sp)
 8003264:	dfc00215 	stw	ra,8(sp)
 8003268:	2023883a 	mov	r17,r4
 800326c:	2821883a 	mov	r16,r5
 8003270:	20000226 	beq	r4,zero,800327c <__srget_r+0x24>
 8003274:	20800e17 	ldw	r2,56(r4)
 8003278:	10001026 	beq	r2,zero,80032bc <__srget_r+0x64>
 800327c:	8809883a 	mov	r4,r17
 8003280:	800b883a 	mov	r5,r16
 8003284:	80030b00 	call	80030b0 <__srefill_r>
 8003288:	10000e1e 	bne	r2,zero,80032c4 <__srget_r+0x6c>
 800328c:	80c00017 	ldw	r3,0(r16)
 8003290:	80800117 	ldw	r2,4(r16)
 8003294:	19000044 	addi	r4,r3,1
 8003298:	10bfffc4 	addi	r2,r2,-1
 800329c:	80800115 	stw	r2,4(r16)
 80032a0:	81000015 	stw	r4,0(r16)
 80032a4:	18800003 	ldbu	r2,0(r3)
 80032a8:	dfc00217 	ldw	ra,8(sp)
 80032ac:	dc400117 	ldw	r17,4(sp)
 80032b0:	dc000017 	ldw	r16,0(sp)
 80032b4:	dec00304 	addi	sp,sp,12
 80032b8:	f800283a 	ret
 80032bc:	80016ac0 	call	80016ac <__sinit>
 80032c0:	003fee06 	br	800327c <__alt_data_end+0xfc00327c>
 80032c4:	00bfffc4 	movi	r2,-1
 80032c8:	003ff706 	br	80032a8 <__alt_data_end+0xfc0032a8>

080032cc <__srget>:
 80032cc:	00820074 	movhi	r2,2049
 80032d0:	108f3204 	addi	r2,r2,15560
 80032d4:	200b883a 	mov	r5,r4
 80032d8:	11000017 	ldw	r4,0(r2)
 80032dc:	80032581 	jmpi	8003258 <__srget_r>

080032e0 <_sbrk_r>:
 80032e0:	defffd04 	addi	sp,sp,-12
 80032e4:	dc000015 	stw	r16,0(sp)
 80032e8:	04020074 	movhi	r16,2049
 80032ec:	dc400115 	stw	r17,4(sp)
 80032f0:	84162f04 	addi	r16,r16,22716
 80032f4:	2023883a 	mov	r17,r4
 80032f8:	2809883a 	mov	r4,r5
 80032fc:	dfc00215 	stw	ra,8(sp)
 8003300:	80000015 	stw	zero,0(r16)
 8003304:	800f20c0 	call	800f20c <sbrk>
 8003308:	00ffffc4 	movi	r3,-1
 800330c:	10c00526 	beq	r2,r3,8003324 <_sbrk_r+0x44>
 8003310:	dfc00217 	ldw	ra,8(sp)
 8003314:	dc400117 	ldw	r17,4(sp)
 8003318:	dc000017 	ldw	r16,0(sp)
 800331c:	dec00304 	addi	sp,sp,12
 8003320:	f800283a 	ret
 8003324:	80c00017 	ldw	r3,0(r16)
 8003328:	183ff926 	beq	r3,zero,8003310 <__alt_data_end+0xfc003310>
 800332c:	88c00015 	stw	r3,0(r17)
 8003330:	003ff706 	br	8003310 <__alt_data_end+0xfc003310>

08003334 <__sread>:
 8003334:	defffe04 	addi	sp,sp,-8
 8003338:	dc000015 	stw	r16,0(sp)
 800333c:	2821883a 	mov	r16,r5
 8003340:	2940038f 	ldh	r5,14(r5)
 8003344:	dfc00115 	stw	ra,4(sp)
 8003348:	8008f340 	call	8008f34 <_read_r>
 800334c:	10000716 	blt	r2,zero,800336c <__sread+0x38>
 8003350:	80c01417 	ldw	r3,80(r16)
 8003354:	1887883a 	add	r3,r3,r2
 8003358:	80c01415 	stw	r3,80(r16)
 800335c:	dfc00117 	ldw	ra,4(sp)
 8003360:	dc000017 	ldw	r16,0(sp)
 8003364:	dec00204 	addi	sp,sp,8
 8003368:	f800283a 	ret
 800336c:	80c0030b 	ldhu	r3,12(r16)
 8003370:	18fbffcc 	andi	r3,r3,61439
 8003374:	80c0030d 	sth	r3,12(r16)
 8003378:	dfc00117 	ldw	ra,4(sp)
 800337c:	dc000017 	ldw	r16,0(sp)
 8003380:	dec00204 	addi	sp,sp,8
 8003384:	f800283a 	ret

08003388 <__seofread>:
 8003388:	0005883a 	mov	r2,zero
 800338c:	f800283a 	ret

08003390 <__swrite>:
 8003390:	2880030b 	ldhu	r2,12(r5)
 8003394:	defffb04 	addi	sp,sp,-20
 8003398:	dcc00315 	stw	r19,12(sp)
 800339c:	dc800215 	stw	r18,8(sp)
 80033a0:	dc400115 	stw	r17,4(sp)
 80033a4:	dc000015 	stw	r16,0(sp)
 80033a8:	dfc00415 	stw	ra,16(sp)
 80033ac:	10c0400c 	andi	r3,r2,256
 80033b0:	2821883a 	mov	r16,r5
 80033b4:	2027883a 	mov	r19,r4
 80033b8:	3025883a 	mov	r18,r6
 80033bc:	3823883a 	mov	r17,r7
 80033c0:	18000526 	beq	r3,zero,80033d8 <__swrite+0x48>
 80033c4:	2940038f 	ldh	r5,14(r5)
 80033c8:	000d883a 	mov	r6,zero
 80033cc:	01c00084 	movi	r7,2
 80033d0:	8007b140 	call	8007b14 <_lseek_r>
 80033d4:	8080030b 	ldhu	r2,12(r16)
 80033d8:	8140038f 	ldh	r5,14(r16)
 80033dc:	10bbffcc 	andi	r2,r2,61439
 80033e0:	9809883a 	mov	r4,r19
 80033e4:	900d883a 	mov	r6,r18
 80033e8:	880f883a 	mov	r7,r17
 80033ec:	8080030d 	sth	r2,12(r16)
 80033f0:	dfc00417 	ldw	ra,16(sp)
 80033f4:	dcc00317 	ldw	r19,12(sp)
 80033f8:	dc800217 	ldw	r18,8(sp)
 80033fc:	dc400117 	ldw	r17,4(sp)
 8003400:	dc000017 	ldw	r16,0(sp)
 8003404:	dec00504 	addi	sp,sp,20
 8003408:	80059741 	jmpi	8005974 <_write_r>

0800340c <__sseek>:
 800340c:	defffe04 	addi	sp,sp,-8
 8003410:	dc000015 	stw	r16,0(sp)
 8003414:	2821883a 	mov	r16,r5
 8003418:	2940038f 	ldh	r5,14(r5)
 800341c:	dfc00115 	stw	ra,4(sp)
 8003420:	8007b140 	call	8007b14 <_lseek_r>
 8003424:	00ffffc4 	movi	r3,-1
 8003428:	10c00826 	beq	r2,r3,800344c <__sseek+0x40>
 800342c:	80c0030b 	ldhu	r3,12(r16)
 8003430:	80801415 	stw	r2,80(r16)
 8003434:	18c40014 	ori	r3,r3,4096
 8003438:	80c0030d 	sth	r3,12(r16)
 800343c:	dfc00117 	ldw	ra,4(sp)
 8003440:	dc000017 	ldw	r16,0(sp)
 8003444:	dec00204 	addi	sp,sp,8
 8003448:	f800283a 	ret
 800344c:	80c0030b 	ldhu	r3,12(r16)
 8003450:	18fbffcc 	andi	r3,r3,61439
 8003454:	80c0030d 	sth	r3,12(r16)
 8003458:	dfc00117 	ldw	ra,4(sp)
 800345c:	dc000017 	ldw	r16,0(sp)
 8003460:	dec00204 	addi	sp,sp,8
 8003464:	f800283a 	ret

08003468 <__sclose>:
 8003468:	2940038f 	ldh	r5,14(r5)
 800346c:	8005b001 	jmpi	8005b00 <_close_r>

08003470 <strlen>:
 8003470:	208000cc 	andi	r2,r4,3
 8003474:	10002026 	beq	r2,zero,80034f8 <strlen+0x88>
 8003478:	20800007 	ldb	r2,0(r4)
 800347c:	10002026 	beq	r2,zero,8003500 <strlen+0x90>
 8003480:	2005883a 	mov	r2,r4
 8003484:	00000206 	br	8003490 <strlen+0x20>
 8003488:	10c00007 	ldb	r3,0(r2)
 800348c:	18001826 	beq	r3,zero,80034f0 <strlen+0x80>
 8003490:	10800044 	addi	r2,r2,1
 8003494:	10c000cc 	andi	r3,r2,3
 8003498:	183ffb1e 	bne	r3,zero,8003488 <__alt_data_end+0xfc003488>
 800349c:	10c00017 	ldw	r3,0(r2)
 80034a0:	01ffbff4 	movhi	r7,65279
 80034a4:	39ffbfc4 	addi	r7,r7,-257
 80034a8:	00ca303a 	nor	r5,zero,r3
 80034ac:	01a02074 	movhi	r6,32897
 80034b0:	19c7883a 	add	r3,r3,r7
 80034b4:	31a02004 	addi	r6,r6,-32640
 80034b8:	1946703a 	and	r3,r3,r5
 80034bc:	1986703a 	and	r3,r3,r6
 80034c0:	1800091e 	bne	r3,zero,80034e8 <strlen+0x78>
 80034c4:	10800104 	addi	r2,r2,4
 80034c8:	10c00017 	ldw	r3,0(r2)
 80034cc:	19cb883a 	add	r5,r3,r7
 80034d0:	00c6303a 	nor	r3,zero,r3
 80034d4:	28c6703a 	and	r3,r5,r3
 80034d8:	1986703a 	and	r3,r3,r6
 80034dc:	183ff926 	beq	r3,zero,80034c4 <__alt_data_end+0xfc0034c4>
 80034e0:	00000106 	br	80034e8 <strlen+0x78>
 80034e4:	10800044 	addi	r2,r2,1
 80034e8:	10c00007 	ldb	r3,0(r2)
 80034ec:	183ffd1e 	bne	r3,zero,80034e4 <__alt_data_end+0xfc0034e4>
 80034f0:	1105c83a 	sub	r2,r2,r4
 80034f4:	f800283a 	ret
 80034f8:	2005883a 	mov	r2,r4
 80034fc:	003fe706 	br	800349c <__alt_data_end+0xfc00349c>
 8003500:	0005883a 	mov	r2,zero
 8003504:	f800283a 	ret

08003508 <strncmp>:
 8003508:	30002126 	beq	r6,zero,8003590 <strncmp+0x88>
 800350c:	2144b03a 	or	r2,r4,r5
 8003510:	108000cc 	andi	r2,r2,3
 8003514:	1000241e 	bne	r2,zero,80035a8 <strncmp+0xa0>
 8003518:	024000c4 	movi	r9,3
 800351c:	4980222e 	bgeu	r9,r6,80035a8 <strncmp+0xa0>
 8003520:	20800017 	ldw	r2,0(r4)
 8003524:	28c00017 	ldw	r3,0(r5)
 8003528:	10c01f1e 	bne	r2,r3,80035a8 <strncmp+0xa0>
 800352c:	31bfff04 	addi	r6,r6,-4
 8003530:	30001726 	beq	r6,zero,8003590 <strncmp+0x88>
 8003534:	02ffbff4 	movhi	r11,65279
 8003538:	5affbfc4 	addi	r11,r11,-257
 800353c:	0086303a 	nor	r3,zero,r2
 8003540:	02a02074 	movhi	r10,32897
 8003544:	12c5883a 	add	r2,r2,r11
 8003548:	52a02004 	addi	r10,r10,-32640
 800354c:	10c4703a 	and	r2,r2,r3
 8003550:	1284703a 	and	r2,r2,r10
 8003554:	10000226 	beq	r2,zero,8003560 <strncmp+0x58>
 8003558:	00000d06 	br	8003590 <strncmp+0x88>
 800355c:	10000c1e 	bne	r2,zero,8003590 <strncmp+0x88>
 8003560:	21000104 	addi	r4,r4,4
 8003564:	29400104 	addi	r5,r5,4
 8003568:	49800f2e 	bgeu	r9,r6,80035a8 <strncmp+0xa0>
 800356c:	20c00017 	ldw	r3,0(r4)
 8003570:	29c00017 	ldw	r7,0(r5)
 8003574:	1ad1883a 	add	r8,r3,r11
 8003578:	00c4303a 	nor	r2,zero,r3
 800357c:	4084703a 	and	r2,r8,r2
 8003580:	1284703a 	and	r2,r2,r10
 8003584:	19c0081e 	bne	r3,r7,80035a8 <strncmp+0xa0>
 8003588:	31bfff04 	addi	r6,r6,-4
 800358c:	303ff31e 	bne	r6,zero,800355c <__alt_data_end+0xfc00355c>
 8003590:	0005883a 	mov	r2,zero
 8003594:	f800283a 	ret
 8003598:	303ffd26 	beq	r6,zero,8003590 <__alt_data_end+0xfc003590>
 800359c:	103ffc26 	beq	r2,zero,8003590 <__alt_data_end+0xfc003590>
 80035a0:	21000044 	addi	r4,r4,1
 80035a4:	29400044 	addi	r5,r5,1
 80035a8:	20800007 	ldb	r2,0(r4)
 80035ac:	28c00007 	ldb	r3,0(r5)
 80035b0:	31bfffc4 	addi	r6,r6,-1
 80035b4:	10fff826 	beq	r2,r3,8003598 <__alt_data_end+0xfc003598>
 80035b8:	20800003 	ldbu	r2,0(r4)
 80035bc:	28c00003 	ldbu	r3,0(r5)
 80035c0:	10c5c83a 	sub	r2,r2,r3
 80035c4:	f800283a 	ret

080035c8 <_strtol_r>:
 80035c8:	00820074 	movhi	r2,2049
 80035cc:	defff204 	addi	sp,sp,-56
 80035d0:	108f3504 	addi	r2,r2,15572
 80035d4:	dd400915 	stw	r21,36(sp)
 80035d8:	15400017 	ldw	r21,0(r2)
 80035dc:	ddc00b15 	stw	r23,44(sp)
 80035e0:	dc000415 	stw	r16,16(sp)
 80035e4:	dfc00d15 	stw	ra,52(sp)
 80035e8:	df000c15 	stw	fp,48(sp)
 80035ec:	dd800a15 	stw	r22,40(sp)
 80035f0:	dd000815 	stw	r20,32(sp)
 80035f4:	dcc00715 	stw	r19,28(sp)
 80035f8:	dc800615 	stw	r18,24(sp)
 80035fc:	dc400515 	stw	r17,20(sp)
 8003600:	d9400215 	stw	r5,8(sp)
 8003604:	d9000315 	stw	r4,12(sp)
 8003608:	d9800015 	stw	r6,0(sp)
 800360c:	382f883a 	mov	r23,r7
 8003610:	2821883a 	mov	r16,r5
 8003614:	87000007 	ldb	fp,0(r16)
 8003618:	8007883a 	mov	r3,r16
 800361c:	84000044 	addi	r16,r16,1
 8003620:	af05883a 	add	r2,r21,fp
 8003624:	10800043 	ldbu	r2,1(r2)
 8003628:	1080020c 	andi	r2,r2,8
 800362c:	103ff91e 	bne	r2,zero,8003614 <__alt_data_end+0xfc003614>
 8003630:	00800b44 	movi	r2,45
 8003634:	e0805c26 	beq	fp,r2,80037a8 <_strtol_r+0x1e0>
 8003638:	00800ac4 	movi	r2,43
 800363c:	e0805e26 	beq	fp,r2,80037b8 <_strtol_r+0x1f0>
 8003640:	0027883a 	mov	r19,zero
 8003644:	b8000426 	beq	r23,zero,8003658 <_strtol_r+0x90>
 8003648:	00800404 	movi	r2,16
 800364c:	b8805e26 	beq	r23,r2,80037c8 <_strtol_r+0x200>
 8003650:	b825883a 	mov	r18,r23
 8003654:	00000406 	br	8003668 <_strtol_r+0xa0>
 8003658:	00800c04 	movi	r2,48
 800365c:	e0806926 	beq	fp,r2,8003804 <_strtol_r+0x23c>
 8003660:	05c00284 	movi	r23,10
 8003664:	b825883a 	mov	r18,r23
 8003668:	04600034 	movhi	r17,32768
 800366c:	8c7fffc4 	addi	r17,r17,-1
 8003670:	9c63883a 	add	r17,r19,r17
 8003674:	8809883a 	mov	r4,r17
 8003678:	900b883a 	mov	r5,r18
 800367c:	800bf480 	call	800bf48 <__umodsi3>
 8003680:	8809883a 	mov	r4,r17
 8003684:	900b883a 	mov	r5,r18
 8003688:	d8800115 	stw	r2,4(sp)
 800368c:	800bf400 	call	800bf40 <__udivsi3>
 8003690:	af07883a 	add	r3,r21,fp
 8003694:	18c00043 	ldbu	r3,1(r3)
 8003698:	1029883a 	mov	r20,r2
 800369c:	000d883a 	mov	r6,zero
 80036a0:	1940010c 	andi	r5,r3,4
 80036a4:	0009883a 	mov	r4,zero
 80036a8:	04400044 	movi	r17,1
 80036ac:	05bfffc4 	movi	r22,-1
 80036b0:	28000f26 	beq	r5,zero,80036f0 <_strtol_r+0x128>
 80036b4:	e73ff404 	addi	fp,fp,-48
 80036b8:	e5c0130e 	bge	fp,r23,8003708 <_strtol_r+0x140>
 80036bc:	35800626 	beq	r6,r22,80036d8 <_strtol_r+0x110>
 80036c0:	a1002b36 	bltu	r20,r4,8003770 <_strtol_r+0x1a8>
 80036c4:	25002826 	beq	r4,r20,8003768 <_strtol_r+0x1a0>
 80036c8:	900b883a 	mov	r5,r18
 80036cc:	800bf500 	call	800bf50 <__mulsi3>
 80036d0:	e089883a 	add	r4,fp,r2
 80036d4:	01800044 	movi	r6,1
 80036d8:	87000007 	ldb	fp,0(r16)
 80036dc:	84000044 	addi	r16,r16,1
 80036e0:	af07883a 	add	r3,r21,fp
 80036e4:	18c00043 	ldbu	r3,1(r3)
 80036e8:	1940010c 	andi	r5,r3,4
 80036ec:	283ff11e 	bne	r5,zero,80036b4 <__alt_data_end+0xfc0036b4>
 80036f0:	18c000cc 	andi	r3,r3,3
 80036f4:	18000426 	beq	r3,zero,8003708 <_strtol_r+0x140>
 80036f8:	1c401f26 	beq	r3,r17,8003778 <_strtol_r+0x1b0>
 80036fc:	00c015c4 	movi	r3,87
 8003700:	e0f9c83a 	sub	fp,fp,r3
 8003704:	e5ffed16 	blt	fp,r23,80036bc <__alt_data_end+0xfc0036bc>
 8003708:	00bfffc4 	movi	r2,-1
 800370c:	30801c26 	beq	r6,r2,8003780 <_strtol_r+0x1b8>
 8003710:	04c5c83a 	sub	r2,zero,r19
 8003714:	d8c00017 	ldw	r3,0(sp)
 8003718:	2084f03a 	xor	r2,r4,r2
 800371c:	14e7883a 	add	r19,r2,r19
 8003720:	9805883a 	mov	r2,r19
 8003724:	18000426 	beq	r3,zero,8003738 <_strtol_r+0x170>
 8003728:	30001d1e 	bne	r6,zero,80037a0 <_strtol_r+0x1d8>
 800372c:	dd400217 	ldw	r21,8(sp)
 8003730:	d8c00017 	ldw	r3,0(sp)
 8003734:	1d400015 	stw	r21,0(r3)
 8003738:	dfc00d17 	ldw	ra,52(sp)
 800373c:	df000c17 	ldw	fp,48(sp)
 8003740:	ddc00b17 	ldw	r23,44(sp)
 8003744:	dd800a17 	ldw	r22,40(sp)
 8003748:	dd400917 	ldw	r21,36(sp)
 800374c:	dd000817 	ldw	r20,32(sp)
 8003750:	dcc00717 	ldw	r19,28(sp)
 8003754:	dc800617 	ldw	r18,24(sp)
 8003758:	dc400517 	ldw	r17,20(sp)
 800375c:	dc000417 	ldw	r16,16(sp)
 8003760:	dec00e04 	addi	sp,sp,56
 8003764:	f800283a 	ret
 8003768:	d8c00117 	ldw	r3,4(sp)
 800376c:	1f3fd60e 	bge	r3,fp,80036c8 <__alt_data_end+0xfc0036c8>
 8003770:	01bfffc4 	movi	r6,-1
 8003774:	003fd806 	br	80036d8 <__alt_data_end+0xfc0036d8>
 8003778:	00c00dc4 	movi	r3,55
 800377c:	003fe006 	br	8003700 <__alt_data_end+0xfc003700>
 8003780:	d8c00317 	ldw	r3,12(sp)
 8003784:	00800884 	movi	r2,34
 8003788:	18800015 	stw	r2,0(r3)
 800378c:	d8c00017 	ldw	r3,0(sp)
 8003790:	00a00034 	movhi	r2,32768
 8003794:	10bfffc4 	addi	r2,r2,-1
 8003798:	9885883a 	add	r2,r19,r2
 800379c:	183fe626 	beq	r3,zero,8003738 <__alt_data_end+0xfc003738>
 80037a0:	857fffc4 	addi	r21,r16,-1
 80037a4:	003fe206 	br	8003730 <__alt_data_end+0xfc003730>
 80037a8:	1c000084 	addi	r16,r3,2
 80037ac:	1f000047 	ldb	fp,1(r3)
 80037b0:	04c00044 	movi	r19,1
 80037b4:	003fa306 	br	8003644 <__alt_data_end+0xfc003644>
 80037b8:	1c000084 	addi	r16,r3,2
 80037bc:	1f000047 	ldb	fp,1(r3)
 80037c0:	0027883a 	mov	r19,zero
 80037c4:	003f9f06 	br	8003644 <__alt_data_end+0xfc003644>
 80037c8:	00800c04 	movi	r2,48
 80037cc:	e0bfa01e 	bne	fp,r2,8003650 <__alt_data_end+0xfc003650>
 80037d0:	80c00003 	ldbu	r3,0(r16)
 80037d4:	00bff7c4 	movi	r2,-33
 80037d8:	1884703a 	and	r2,r3,r2
 80037dc:	10803fcc 	andi	r2,r2,255
 80037e0:	1080201c 	xori	r2,r2,128
 80037e4:	10bfe004 	addi	r2,r2,-128
 80037e8:	00c01604 	movi	r3,88
 80037ec:	10ff981e 	bne	r2,r3,8003650 <__alt_data_end+0xfc003650>
 80037f0:	04800404 	movi	r18,16
 80037f4:	87000047 	ldb	fp,1(r16)
 80037f8:	902f883a 	mov	r23,r18
 80037fc:	84000084 	addi	r16,r16,2
 8003800:	003f9906 	br	8003668 <__alt_data_end+0xfc003668>
 8003804:	80c00003 	ldbu	r3,0(r16)
 8003808:	00bff7c4 	movi	r2,-33
 800380c:	1884703a 	and	r2,r3,r2
 8003810:	10803fcc 	andi	r2,r2,255
 8003814:	1080201c 	xori	r2,r2,128
 8003818:	10bfe004 	addi	r2,r2,-128
 800381c:	00c01604 	movi	r3,88
 8003820:	10fff326 	beq	r2,r3,80037f0 <__alt_data_end+0xfc0037f0>
 8003824:	05c00204 	movi	r23,8
 8003828:	b825883a 	mov	r18,r23
 800382c:	003f8e06 	br	8003668 <__alt_data_end+0xfc003668>

08003830 <strtol>:
 8003830:	2007883a 	mov	r3,r4
 8003834:	01020074 	movhi	r4,2049
 8003838:	210f3204 	addi	r4,r4,15560
 800383c:	21000017 	ldw	r4,0(r4)
 8003840:	2805883a 	mov	r2,r5
 8003844:	300f883a 	mov	r7,r6
 8003848:	180b883a 	mov	r5,r3
 800384c:	100d883a 	mov	r6,r2
 8003850:	80035c81 	jmpi	80035c8 <_strtol_r>

08003854 <___vfprintf_internal_r>:
 8003854:	defeb604 	addi	sp,sp,-1320
 8003858:	dfc14915 	stw	ra,1316(sp)
 800385c:	ddc14715 	stw	r23,1308(sp)
 8003860:	dd814615 	stw	r22,1304(sp)
 8003864:	202f883a 	mov	r23,r4
 8003868:	282d883a 	mov	r22,r5
 800386c:	d9812a15 	stw	r6,1192(sp)
 8003870:	d9c12d15 	stw	r7,1204(sp)
 8003874:	df014815 	stw	fp,1312(sp)
 8003878:	dd414515 	stw	r21,1300(sp)
 800387c:	dd014415 	stw	r20,1296(sp)
 8003880:	dcc14315 	stw	r19,1292(sp)
 8003884:	dc814215 	stw	r18,1288(sp)
 8003888:	dc414115 	stw	r17,1284(sp)
 800388c:	dc014015 	stw	r16,1280(sp)
 8003890:	8007ae00 	call	8007ae0 <_localeconv_r>
 8003894:	10800017 	ldw	r2,0(r2)
 8003898:	1009883a 	mov	r4,r2
 800389c:	d8813515 	stw	r2,1236(sp)
 80038a0:	80034700 	call	8003470 <strlen>
 80038a4:	d8813815 	stw	r2,1248(sp)
 80038a8:	b8000226 	beq	r23,zero,80038b4 <___vfprintf_internal_r+0x60>
 80038ac:	b8800e17 	ldw	r2,56(r23)
 80038b0:	10010526 	beq	r2,zero,8003cc8 <___vfprintf_internal_r+0x474>
 80038b4:	b0c0030b 	ldhu	r3,12(r22)
 80038b8:	1908000c 	andi	r4,r3,8192
 80038bc:	1805883a 	mov	r2,r3
 80038c0:	2000071e 	bne	r4,zero,80038e0 <___vfprintf_internal_r+0x8c>
 80038c4:	b1001917 	ldw	r4,100(r22)
 80038c8:	18880014 	ori	r2,r3,8192
 80038cc:	00f7ffc4 	movi	r3,-8193
 80038d0:	20c8703a 	and	r4,r4,r3
 80038d4:	b080030d 	sth	r2,12(r22)
 80038d8:	1007883a 	mov	r3,r2
 80038dc:	b1001915 	stw	r4,100(r22)
 80038e0:	1100020c 	andi	r4,r2,8
 80038e4:	2000a826 	beq	r4,zero,8003b88 <___vfprintf_internal_r+0x334>
 80038e8:	b1000417 	ldw	r4,16(r22)
 80038ec:	2000a626 	beq	r4,zero,8003b88 <___vfprintf_internal_r+0x334>
 80038f0:	1080068c 	andi	r2,r2,26
 80038f4:	01000284 	movi	r4,10
 80038f8:	1100ac26 	beq	r2,r4,8003bac <___vfprintf_internal_r+0x358>
 80038fc:	d8c10e04 	addi	r3,sp,1080
 8003900:	d9010dc4 	addi	r4,sp,1079
 8003904:	d9400404 	addi	r5,sp,16
 8003908:	05020074 	movhi	r20,2049
 800390c:	1905c83a 	sub	r2,r3,r4
 8003910:	a5070484 	addi	r20,r20,7186
 8003914:	d8c12815 	stw	r3,1184(sp)
 8003918:	d9012915 	stw	r4,1188(sp)
 800391c:	d9411e15 	stw	r5,1144(sp)
 8003920:	d8012015 	stw	zero,1152(sp)
 8003924:	d8011f15 	stw	zero,1148(sp)
 8003928:	d8013315 	stw	zero,1228(sp)
 800392c:	d8013715 	stw	zero,1244(sp)
 8003930:	d8013915 	stw	zero,1252(sp)
 8003934:	d8013b15 	stw	zero,1260(sp)
 8003938:	d8013a15 	stw	zero,1256(sp)
 800393c:	d8012f15 	stw	zero,1212(sp)
 8003940:	2811883a 	mov	r8,r5
 8003944:	d8813c15 	stw	r2,1264(sp)
 8003948:	d8c12a17 	ldw	r3,1192(sp)
 800394c:	18800007 	ldb	r2,0(r3)
 8003950:	10021326 	beq	r2,zero,80041a0 <___vfprintf_internal_r+0x94c>
 8003954:	00c00944 	movi	r3,37
 8003958:	dc012a17 	ldw	r16,1192(sp)
 800395c:	10c0021e 	bne	r2,r3,8003968 <___vfprintf_internal_r+0x114>
 8003960:	00001606 	br	80039bc <___vfprintf_internal_r+0x168>
 8003964:	10c08526 	beq	r2,r3,8003b7c <___vfprintf_internal_r+0x328>
 8003968:	84000044 	addi	r16,r16,1
 800396c:	80800007 	ldb	r2,0(r16)
 8003970:	103ffc1e 	bne	r2,zero,8003964 <__alt_data_end+0xfc003964>
 8003974:	d9012a17 	ldw	r4,1192(sp)
 8003978:	8123c83a 	sub	r17,r16,r4
 800397c:	88000f26 	beq	r17,zero,80039bc <___vfprintf_internal_r+0x168>
 8003980:	d8812a17 	ldw	r2,1192(sp)
 8003984:	d8c12017 	ldw	r3,1152(sp)
 8003988:	44400115 	stw	r17,4(r8)
 800398c:	40800015 	stw	r2,0(r8)
 8003990:	d8811f17 	ldw	r2,1148(sp)
 8003994:	1c47883a 	add	r3,r3,r17
 8003998:	d8c12015 	stw	r3,1152(sp)
 800399c:	10800044 	addi	r2,r2,1
 80039a0:	d8811f15 	stw	r2,1148(sp)
 80039a4:	00c001c4 	movi	r3,7
 80039a8:	1880b516 	blt	r3,r2,8003c80 <___vfprintf_internal_r+0x42c>
 80039ac:	42000204 	addi	r8,r8,8
 80039b0:	d8c12f17 	ldw	r3,1212(sp)
 80039b4:	1c47883a 	add	r3,r3,r17
 80039b8:	d8c12f15 	stw	r3,1212(sp)
 80039bc:	80800007 	ldb	r2,0(r16)
 80039c0:	1000b626 	beq	r2,zero,8003c9c <___vfprintf_internal_r+0x448>
 80039c4:	80800044 	addi	r2,r16,1
 80039c8:	84000047 	ldb	r16,1(r16)
 80039cc:	0027883a 	mov	r19,zero
 80039d0:	0039883a 	mov	fp,zero
 80039d4:	dcc12b05 	stb	r19,1196(sp)
 80039d8:	d8012785 	stb	zero,1182(sp)
 80039dc:	027fffc4 	movi	r9,-1
 80039e0:	d8012e15 	stw	zero,1208(sp)
 80039e4:	04401604 	movi	r17,88
 80039e8:	04800244 	movi	r18,9
 80039ec:	da012a15 	stw	r8,1192(sp)
 80039f0:	e027883a 	mov	r19,fp
 80039f4:	17000044 	addi	fp,r2,1
 80039f8:	80bff804 	addi	r2,r16,-32
 80039fc:	88831236 	bltu	r17,r2,8004648 <___vfprintf_internal_r+0xdf4>
 8003a00:	100490ba 	slli	r2,r2,2
 8003a04:	01020034 	movhi	r4,2048
 8003a08:	210e8604 	addi	r4,r4,14872
 8003a0c:	1105883a 	add	r2,r2,r4
 8003a10:	10800017 	ldw	r2,0(r2)
 8003a14:	1000683a 	jmp	r2
 8003a18:	08004564 	muli	zero,at,277
 8003a1c:	08004648 	cmpgei	zero,at,281
 8003a20:	08004648 	cmpgei	zero,at,281
 8003a24:	08004580 	call	800458 <__alt_mem_onchip_memory2_0+0x800458>
 8003a28:	08004648 	cmpgei	zero,at,281
 8003a2c:	08004648 	cmpgei	zero,at,281
 8003a30:	08004648 	cmpgei	zero,at,281
 8003a34:	08004648 	cmpgei	zero,at,281
 8003a38:	08004648 	cmpgei	zero,at,281
 8003a3c:	08004648 	cmpgei	zero,at,281
 8003a40:	08004590 	cmplti	zero,at,278
 8003a44:	080045b8 	rdprs	zero,at,278
 8003a48:	08004648 	cmpgei	zero,at,281
 8003a4c:	08003cd4 	ori	zero,at,243
 8003a50:	08003ce4 	muli	zero,at,243
 8003a54:	08004648 	cmpgei	zero,at,281
 8003a58:	08003d34 	orhi	zero,at,244
 8003a5c:	08003d44 	addi	zero,at,245
 8003a60:	08003d44 	addi	zero,at,245
 8003a64:	08003d44 	addi	zero,at,245
 8003a68:	08003d44 	addi	zero,at,245
 8003a6c:	08003d44 	addi	zero,at,245
 8003a70:	08003d44 	addi	zero,at,245
 8003a74:	08003d44 	addi	zero,at,245
 8003a78:	08003d44 	addi	zero,at,245
 8003a7c:	08003d44 	addi	zero,at,245
 8003a80:	08004648 	cmpgei	zero,at,281
 8003a84:	08004648 	cmpgei	zero,at,281
 8003a88:	08004648 	cmpgei	zero,at,281
 8003a8c:	08004648 	cmpgei	zero,at,281
 8003a90:	08004648 	cmpgei	zero,at,281
 8003a94:	08004648 	cmpgei	zero,at,281
 8003a98:	08004648 	cmpgei	zero,at,281
 8003a9c:	08004648 	cmpgei	zero,at,281
 8003aa0:	08004648 	cmpgei	zero,at,281
 8003aa4:	08004648 	cmpgei	zero,at,281
 8003aa8:	08003d88 	cmpgei	zero,at,246
 8003aac:	080041a8 	cmpgeui	zero,at,262
 8003ab0:	08004648 	cmpgei	zero,at,281
 8003ab4:	080041a8 	cmpgeui	zero,at,262
 8003ab8:	08004648 	cmpgei	zero,at,281
 8003abc:	08004648 	cmpgei	zero,at,281
 8003ac0:	08004648 	cmpgei	zero,at,281
 8003ac4:	08004648 	cmpgei	zero,at,281
 8003ac8:	08004250 	cmplti	zero,at,265
 8003acc:	08004648 	cmpgei	zero,at,281
 8003ad0:	08004648 	cmpgei	zero,at,281
 8003ad4:	08004260 	cmpeqi	zero,at,265
 8003ad8:	08004648 	cmpgei	zero,at,281
 8003adc:	08004648 	cmpgei	zero,at,281
 8003ae0:	08004648 	cmpgei	zero,at,281
 8003ae4:	08004648 	cmpgei	zero,at,281
 8003ae8:	08004648 	cmpgei	zero,at,281
 8003aec:	080042a4 	muli	zero,at,266
 8003af0:	08004648 	cmpgei	zero,at,281
 8003af4:	08004648 	cmpgei	zero,at,281
 8003af8:	080042dc 	xori	zero,at,267
 8003afc:	08004648 	cmpgei	zero,at,281
 8003b00:	08004648 	cmpgei	zero,at,281
 8003b04:	08004648 	cmpgei	zero,at,281
 8003b08:	08004648 	cmpgei	zero,at,281
 8003b0c:	08004648 	cmpgei	zero,at,281
 8003b10:	08004648 	cmpgei	zero,at,281
 8003b14:	08004648 	cmpgei	zero,at,281
 8003b18:	08004648 	cmpgei	zero,at,281
 8003b1c:	08004648 	cmpgei	zero,at,281
 8003b20:	08004648 	cmpgei	zero,at,281
 8003b24:	08004518 	cmpnei	zero,at,276
 8003b28:	080044c4 	addi	zero,at,275
 8003b2c:	080041a8 	cmpgeui	zero,at,262
 8003b30:	080041a8 	cmpgeui	zero,at,262
 8003b34:	080041a8 	cmpgeui	zero,at,262
 8003b38:	08004508 	cmpgei	zero,at,276
 8003b3c:	080044c4 	addi	zero,at,275
 8003b40:	08004648 	cmpgei	zero,at,281
 8003b44:	08004648 	cmpgei	zero,at,281
 8003b48:	080043e0 	cmpeqi	zero,at,271
 8003b4c:	08004648 	cmpgei	zero,at,281
 8003b50:	080043f8 	rdprs	zero,at,271
 8003b54:	08004438 	rdprs	zero,at,272
 8003b58:	08004478 	rdprs	zero,at,273
 8003b5c:	08004344 	addi	zero,at,269
 8003b60:	08004648 	cmpgei	zero,at,281
 8003b64:	080045cc 	andi	zero,at,279
 8003b68:	08004648 	cmpgei	zero,at,281
 8003b6c:	08004354 	ori	zero,at,269
 8003b70:	08004648 	cmpgei	zero,at,281
 8003b74:	08004648 	cmpgei	zero,at,281
 8003b78:	08004394 	ori	zero,at,270
 8003b7c:	d9412a17 	ldw	r5,1192(sp)
 8003b80:	8163c83a 	sub	r17,r16,r5
 8003b84:	003f7d06 	br	800397c <__alt_data_end+0xfc00397c>
 8003b88:	b809883a 	mov	r4,r23
 8003b8c:	b00b883a 	mov	r5,r22
 8003b90:	80059d00 	call	80059d0 <__swsetup_r>
 8003b94:	10002d1e 	bne	r2,zero,8003c4c <___vfprintf_internal_r+0x3f8>
 8003b98:	b0c0030b 	ldhu	r3,12(r22)
 8003b9c:	01000284 	movi	r4,10
 8003ba0:	1805883a 	mov	r2,r3
 8003ba4:	1080068c 	andi	r2,r2,26
 8003ba8:	113f541e 	bne	r2,r4,80038fc <__alt_data_end+0xfc0038fc>
 8003bac:	b080038b 	ldhu	r2,14(r22)
 8003bb0:	113fffcc 	andi	r4,r2,65535
 8003bb4:	2120001c 	xori	r4,r4,32768
 8003bb8:	21200004 	addi	r4,r4,-32768
 8003bbc:	203f4f16 	blt	r4,zero,80038fc <__alt_data_end+0xfc0038fc>
 8003bc0:	b2c01917 	ldw	r11,100(r22)
 8003bc4:	b2800717 	ldw	r10,28(r22)
 8003bc8:	b2400917 	ldw	r9,36(r22)
 8003bcc:	d9812a17 	ldw	r6,1192(sp)
 8003bd0:	d9c12d17 	ldw	r7,1204(sp)
 8003bd4:	02010004 	movi	r8,1024
 8003bd8:	18ffff4c 	andi	r3,r3,65533
 8003bdc:	d881078d 	sth	r2,1054(sp)
 8003be0:	b809883a 	mov	r4,r23
 8003be4:	d8800404 	addi	r2,sp,16
 8003be8:	d9410404 	addi	r5,sp,1040
 8003bec:	d8c1070d 	sth	r3,1052(sp)
 8003bf0:	dac11d15 	stw	r11,1140(sp)
 8003bf4:	da810b15 	stw	r10,1068(sp)
 8003bf8:	da410d15 	stw	r9,1076(sp)
 8003bfc:	d8810415 	stw	r2,1040(sp)
 8003c00:	d8810815 	stw	r2,1056(sp)
 8003c04:	da010615 	stw	r8,1048(sp)
 8003c08:	da010915 	stw	r8,1060(sp)
 8003c0c:	d8010a15 	stw	zero,1064(sp)
 8003c10:	80038540 	call	8003854 <___vfprintf_internal_r>
 8003c14:	1021883a 	mov	r16,r2
 8003c18:	10000416 	blt	r2,zero,8003c2c <___vfprintf_internal_r+0x3d8>
 8003c1c:	b809883a 	mov	r4,r23
 8003c20:	d9410404 	addi	r5,sp,1040
 8003c24:	80010f00 	call	80010f0 <_fflush_r>
 8003c28:	1007301e 	bne	r2,zero,80058ec <___vfprintf_internal_r+0x2098>
 8003c2c:	d881070b 	ldhu	r2,1052(sp)
 8003c30:	1080100c 	andi	r2,r2,64
 8003c34:	10000326 	beq	r2,zero,8003c44 <___vfprintf_internal_r+0x3f0>
 8003c38:	b080030b 	ldhu	r2,12(r22)
 8003c3c:	10801014 	ori	r2,r2,64
 8003c40:	b080030d 	sth	r2,12(r22)
 8003c44:	8005883a 	mov	r2,r16
 8003c48:	00000106 	br	8003c50 <___vfprintf_internal_r+0x3fc>
 8003c4c:	00bfffc4 	movi	r2,-1
 8003c50:	dfc14917 	ldw	ra,1316(sp)
 8003c54:	df014817 	ldw	fp,1312(sp)
 8003c58:	ddc14717 	ldw	r23,1308(sp)
 8003c5c:	dd814617 	ldw	r22,1304(sp)
 8003c60:	dd414517 	ldw	r21,1300(sp)
 8003c64:	dd014417 	ldw	r20,1296(sp)
 8003c68:	dcc14317 	ldw	r19,1292(sp)
 8003c6c:	dc814217 	ldw	r18,1288(sp)
 8003c70:	dc414117 	ldw	r17,1284(sp)
 8003c74:	dc014017 	ldw	r16,1280(sp)
 8003c78:	dec14a04 	addi	sp,sp,1320
 8003c7c:	f800283a 	ret
 8003c80:	b809883a 	mov	r4,r23
 8003c84:	b00b883a 	mov	r5,r22
 8003c88:	d9811e04 	addi	r6,sp,1144
 8003c8c:	80097440 	call	8009744 <__sprint_r>
 8003c90:	1000081e 	bne	r2,zero,8003cb4 <___vfprintf_internal_r+0x460>
 8003c94:	da000404 	addi	r8,sp,16
 8003c98:	003f4506 	br	80039b0 <__alt_data_end+0xfc0039b0>
 8003c9c:	d8812017 	ldw	r2,1152(sp)
 8003ca0:	10000426 	beq	r2,zero,8003cb4 <___vfprintf_internal_r+0x460>
 8003ca4:	b809883a 	mov	r4,r23
 8003ca8:	b00b883a 	mov	r5,r22
 8003cac:	d9811e04 	addi	r6,sp,1144
 8003cb0:	80097440 	call	8009744 <__sprint_r>
 8003cb4:	b080030b 	ldhu	r2,12(r22)
 8003cb8:	1080100c 	andi	r2,r2,64
 8003cbc:	103fe31e 	bne	r2,zero,8003c4c <__alt_data_end+0xfc003c4c>
 8003cc0:	d8812f17 	ldw	r2,1212(sp)
 8003cc4:	003fe206 	br	8003c50 <__alt_data_end+0xfc003c50>
 8003cc8:	b809883a 	mov	r4,r23
 8003ccc:	80016ac0 	call	80016ac <__sinit>
 8003cd0:	003ef806 	br	80038b4 <__alt_data_end+0xfc0038b4>
 8003cd4:	e005883a 	mov	r2,fp
 8003cd8:	9cc00114 	ori	r19,r19,4
 8003cdc:	e4000007 	ldb	r16,0(fp)
 8003ce0:	003f4406 	br	80039f4 <__alt_data_end+0xfc0039f4>
 8003ce4:	e4000007 	ldb	r16,0(fp)
 8003ce8:	01000a84 	movi	r4,42
 8003cec:	e0800044 	addi	r2,fp,1
 8003cf0:	8106f626 	beq	r16,r4,80058cc <___vfprintf_internal_r+0x2078>
 8003cf4:	857ff404 	addi	r21,r16,-48
 8003cf8:	1039883a 	mov	fp,r2
 8003cfc:	0013883a 	mov	r9,zero
 8003d00:	957f3d36 	bltu	r18,r21,80039f8 <__alt_data_end+0xfc0039f8>
 8003d04:	0009883a 	mov	r4,zero
 8003d08:	01400284 	movi	r5,10
 8003d0c:	800bf500 	call	800bf50 <__mulsi3>
 8003d10:	e4000007 	ldb	r16,0(fp)
 8003d14:	a889883a 	add	r4,r21,r2
 8003d18:	e7000044 	addi	fp,fp,1
 8003d1c:	857ff404 	addi	r21,r16,-48
 8003d20:	957ff92e 	bgeu	r18,r21,8003d08 <__alt_data_end+0xfc003d08>
 8003d24:	2013883a 	mov	r9,r4
 8003d28:	203f330e 	bge	r4,zero,80039f8 <__alt_data_end+0xfc0039f8>
 8003d2c:	027fffc4 	movi	r9,-1
 8003d30:	003f3106 	br	80039f8 <__alt_data_end+0xfc0039f8>
 8003d34:	9cc02014 	ori	r19,r19,128
 8003d38:	e005883a 	mov	r2,fp
 8003d3c:	e4000007 	ldb	r16,0(fp)
 8003d40:	003f2c06 	br	80039f4 <__alt_data_end+0xfc0039f4>
 8003d44:	857ff404 	addi	r21,r16,-48
 8003d48:	d8012e15 	stw	zero,1208(sp)
 8003d4c:	e021883a 	mov	r16,fp
 8003d50:	0009883a 	mov	r4,zero
 8003d54:	da412c15 	stw	r9,1200(sp)
 8003d58:	01400284 	movi	r5,10
 8003d5c:	800bf500 	call	800bf50 <__mulsi3>
 8003d60:	81400007 	ldb	r5,0(r16)
 8003d64:	1549883a 	add	r4,r2,r21
 8003d68:	e7000044 	addi	fp,fp,1
 8003d6c:	2d7ff404 	addi	r21,r5,-48
 8003d70:	e021883a 	mov	r16,fp
 8003d74:	957ff82e 	bgeu	r18,r21,8003d58 <__alt_data_end+0xfc003d58>
 8003d78:	2821883a 	mov	r16,r5
 8003d7c:	d9012e15 	stw	r4,1208(sp)
 8003d80:	da412c17 	ldw	r9,1200(sp)
 8003d84:	003f1c06 	br	80039f8 <__alt_data_end+0xfc0039f8>
 8003d88:	da012a17 	ldw	r8,1192(sp)
 8003d8c:	df012a15 	stw	fp,1192(sp)
 8003d90:	9839883a 	mov	fp,r19
 8003d94:	dcc12b03 	ldbu	r19,1196(sp)
 8003d98:	e7000414 	ori	fp,fp,16
 8003d9c:	e080080c 	andi	r2,fp,32
 8003da0:	dcc12785 	stb	r19,1182(sp)
 8003da4:	d8c12d17 	ldw	r3,1204(sp)
 8003da8:	1001ce26 	beq	r2,zero,80044e4 <___vfprintf_internal_r+0xc90>
 8003dac:	d9012d17 	ldw	r4,1204(sp)
 8003db0:	18800117 	ldw	r2,4(r3)
 8003db4:	1c800017 	ldw	r18,0(r3)
 8003db8:	21000204 	addi	r4,r4,8
 8003dbc:	d9012d15 	stw	r4,1204(sp)
 8003dc0:	102b883a 	mov	r21,r2
 8003dc4:	10044916 	blt	r2,zero,8004eec <___vfprintf_internal_r+0x1698>
 8003dc8:	dcc12783 	ldbu	r19,1182(sp)
 8003dcc:	da413215 	stw	r9,1224(sp)
 8003dd0:	00800044 	movi	r2,1
 8003dd4:	9546b03a 	or	r3,r18,r21
 8003dd8:	48000216 	blt	r9,zero,8003de4 <___vfprintf_internal_r+0x590>
 8003ddc:	013fdfc4 	movi	r4,-129
 8003de0:	e138703a 	and	fp,fp,r4
 8003de4:	1802251e 	bne	r3,zero,800467c <___vfprintf_internal_r+0xe28>
 8003de8:	48031726 	beq	r9,zero,8004a48 <___vfprintf_internal_r+0x11f4>
 8003dec:	10803fcc 	andi	r2,r2,255
 8003df0:	00c00044 	movi	r3,1
 8003df4:	10c24526 	beq	r2,r3,800470c <___vfprintf_internal_r+0xeb8>
 8003df8:	00c00084 	movi	r3,2
 8003dfc:	10c33426 	beq	r2,r3,8004ad0 <___vfprintf_internal_r+0x127c>
 8003e00:	d8c10e04 	addi	r3,sp,1080
 8003e04:	9008d0fa 	srli	r4,r18,3
 8003e08:	a80a977a 	slli	r5,r21,29
 8003e0c:	a82ad0fa 	srli	r21,r21,3
 8003e10:	948001cc 	andi	r18,r18,7
 8003e14:	90800c04 	addi	r2,r18,48
 8003e18:	18ffffc4 	addi	r3,r3,-1
 8003e1c:	2924b03a 	or	r18,r5,r4
 8003e20:	18800005 	stb	r2,0(r3)
 8003e24:	9548b03a 	or	r4,r18,r21
 8003e28:	203ff61e 	bne	r4,zero,8003e04 <__alt_data_end+0xfc003e04>
 8003e2c:	e100004c 	andi	r4,fp,1
 8003e30:	d8c13115 	stw	r3,1220(sp)
 8003e34:	20039a1e 	bne	r4,zero,8004ca0 <___vfprintf_internal_r+0x144c>
 8003e38:	d8812817 	ldw	r2,1184(sp)
 8003e3c:	10e3c83a 	sub	r17,r2,r3
 8003e40:	8805883a 	mov	r2,r17
 8003e44:	8a40010e 	bge	r17,r9,8003e4c <___vfprintf_internal_r+0x5f8>
 8003e48:	4805883a 	mov	r2,r9
 8003e4c:	d8812b15 	stw	r2,1196(sp)
 8003e50:	d8013415 	stw	zero,1232(sp)
 8003e54:	98803fcc 	andi	r2,r19,255
 8003e58:	1080201c 	xori	r2,r2,128
 8003e5c:	10bfe004 	addi	r2,r2,-128
 8003e60:	10000326 	beq	r2,zero,8003e70 <___vfprintf_internal_r+0x61c>
 8003e64:	d8c12b17 	ldw	r3,1196(sp)
 8003e68:	18c00044 	addi	r3,r3,1
 8003e6c:	d8c12b15 	stw	r3,1196(sp)
 8003e70:	e0c0008c 	andi	r3,fp,2
 8003e74:	d8c12c15 	stw	r3,1200(sp)
 8003e78:	18000326 	beq	r3,zero,8003e88 <___vfprintf_internal_r+0x634>
 8003e7c:	d8c12b17 	ldw	r3,1196(sp)
 8003e80:	18c00084 	addi	r3,r3,2
 8003e84:	d8c12b15 	stw	r3,1196(sp)
 8003e88:	e0c0210c 	andi	r3,fp,132
 8003e8c:	d8c13015 	stw	r3,1216(sp)
 8003e90:	1801f81e 	bne	r3,zero,8004674 <___vfprintf_internal_r+0xe20>
 8003e94:	d9012e17 	ldw	r4,1208(sp)
 8003e98:	d8c12b17 	ldw	r3,1196(sp)
 8003e9c:	20ebc83a 	sub	r21,r4,r3
 8003ea0:	0541f40e 	bge	zero,r21,8004674 <___vfprintf_internal_r+0xe20>
 8003ea4:	02400404 	movi	r9,16
 8003ea8:	d8c12017 	ldw	r3,1152(sp)
 8003eac:	d8811f17 	ldw	r2,1148(sp)
 8003eb0:	4d45750e 	bge	r9,r21,8005488 <___vfprintf_internal_r+0x1c34>
 8003eb4:	01420074 	movhi	r5,2049
 8003eb8:	29470884 	addi	r5,r5,7202
 8003ebc:	d9413615 	stw	r5,1240(sp)
 8003ec0:	4827883a 	mov	r19,r9
 8003ec4:	048001c4 	movi	r18,7
 8003ec8:	00000306 	br	8003ed8 <___vfprintf_internal_r+0x684>
 8003ecc:	ad7ffc04 	addi	r21,r21,-16
 8003ed0:	42000204 	addi	r8,r8,8
 8003ed4:	9d40130e 	bge	r19,r21,8003f24 <___vfprintf_internal_r+0x6d0>
 8003ed8:	01020074 	movhi	r4,2049
 8003edc:	18c00404 	addi	r3,r3,16
 8003ee0:	10800044 	addi	r2,r2,1
 8003ee4:	21070884 	addi	r4,r4,7202
 8003ee8:	41000015 	stw	r4,0(r8)
 8003eec:	44c00115 	stw	r19,4(r8)
 8003ef0:	d8c12015 	stw	r3,1152(sp)
 8003ef4:	d8811f15 	stw	r2,1148(sp)
 8003ef8:	90bff40e 	bge	r18,r2,8003ecc <__alt_data_end+0xfc003ecc>
 8003efc:	b809883a 	mov	r4,r23
 8003f00:	b00b883a 	mov	r5,r22
 8003f04:	d9811e04 	addi	r6,sp,1144
 8003f08:	80097440 	call	8009744 <__sprint_r>
 8003f0c:	103f691e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8003f10:	ad7ffc04 	addi	r21,r21,-16
 8003f14:	d8c12017 	ldw	r3,1152(sp)
 8003f18:	d8811f17 	ldw	r2,1148(sp)
 8003f1c:	da000404 	addi	r8,sp,16
 8003f20:	9d7fed16 	blt	r19,r21,8003ed8 <__alt_data_end+0xfc003ed8>
 8003f24:	d9413617 	ldw	r5,1240(sp)
 8003f28:	a8c7883a 	add	r3,r21,r3
 8003f2c:	10800044 	addi	r2,r2,1
 8003f30:	41400015 	stw	r5,0(r8)
 8003f34:	45400115 	stw	r21,4(r8)
 8003f38:	d8c12015 	stw	r3,1152(sp)
 8003f3c:	d8811f15 	stw	r2,1148(sp)
 8003f40:	010001c4 	movi	r4,7
 8003f44:	20832b16 	blt	r4,r2,8004bf4 <___vfprintf_internal_r+0x13a0>
 8003f48:	d8812787 	ldb	r2,1182(sp)
 8003f4c:	42000204 	addi	r8,r8,8
 8003f50:	10000c26 	beq	r2,zero,8003f84 <___vfprintf_internal_r+0x730>
 8003f54:	d8811f17 	ldw	r2,1148(sp)
 8003f58:	d9012784 	addi	r4,sp,1182
 8003f5c:	18c00044 	addi	r3,r3,1
 8003f60:	10800044 	addi	r2,r2,1
 8003f64:	41000015 	stw	r4,0(r8)
 8003f68:	01000044 	movi	r4,1
 8003f6c:	41000115 	stw	r4,4(r8)
 8003f70:	d8c12015 	stw	r3,1152(sp)
 8003f74:	d8811f15 	stw	r2,1148(sp)
 8003f78:	010001c4 	movi	r4,7
 8003f7c:	2082c416 	blt	r4,r2,8004a90 <___vfprintf_internal_r+0x123c>
 8003f80:	42000204 	addi	r8,r8,8
 8003f84:	d8812c17 	ldw	r2,1200(sp)
 8003f88:	10000c26 	beq	r2,zero,8003fbc <___vfprintf_internal_r+0x768>
 8003f8c:	d8811f17 	ldw	r2,1148(sp)
 8003f90:	d9012704 	addi	r4,sp,1180
 8003f94:	18c00084 	addi	r3,r3,2
 8003f98:	10800044 	addi	r2,r2,1
 8003f9c:	41000015 	stw	r4,0(r8)
 8003fa0:	01000084 	movi	r4,2
 8003fa4:	41000115 	stw	r4,4(r8)
 8003fa8:	d8c12015 	stw	r3,1152(sp)
 8003fac:	d8811f15 	stw	r2,1148(sp)
 8003fb0:	010001c4 	movi	r4,7
 8003fb4:	2082be16 	blt	r4,r2,8004ab0 <___vfprintf_internal_r+0x125c>
 8003fb8:	42000204 	addi	r8,r8,8
 8003fbc:	d9013017 	ldw	r4,1216(sp)
 8003fc0:	00802004 	movi	r2,128
 8003fc4:	20822026 	beq	r4,r2,8004848 <___vfprintf_internal_r+0xff4>
 8003fc8:	d9413217 	ldw	r5,1224(sp)
 8003fcc:	2c67c83a 	sub	r19,r5,r17
 8003fd0:	04c0260e 	bge	zero,r19,800406c <___vfprintf_internal_r+0x818>
 8003fd4:	05400404 	movi	r21,16
 8003fd8:	d8811f17 	ldw	r2,1148(sp)
 8003fdc:	acc4720e 	bge	r21,r19,80051a8 <___vfprintf_internal_r+0x1954>
 8003fe0:	01420074 	movhi	r5,2049
 8003fe4:	29470484 	addi	r5,r5,7186
 8003fe8:	d9412c15 	stw	r5,1200(sp)
 8003fec:	048001c4 	movi	r18,7
 8003ff0:	00000306 	br	8004000 <___vfprintf_internal_r+0x7ac>
 8003ff4:	9cfffc04 	addi	r19,r19,-16
 8003ff8:	42000204 	addi	r8,r8,8
 8003ffc:	acc0110e 	bge	r21,r19,8004044 <___vfprintf_internal_r+0x7f0>
 8004000:	18c00404 	addi	r3,r3,16
 8004004:	10800044 	addi	r2,r2,1
 8004008:	45000015 	stw	r20,0(r8)
 800400c:	45400115 	stw	r21,4(r8)
 8004010:	d8c12015 	stw	r3,1152(sp)
 8004014:	d8811f15 	stw	r2,1148(sp)
 8004018:	90bff60e 	bge	r18,r2,8003ff4 <__alt_data_end+0xfc003ff4>
 800401c:	b809883a 	mov	r4,r23
 8004020:	b00b883a 	mov	r5,r22
 8004024:	d9811e04 	addi	r6,sp,1144
 8004028:	80097440 	call	8009744 <__sprint_r>
 800402c:	103f211e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8004030:	9cfffc04 	addi	r19,r19,-16
 8004034:	d8c12017 	ldw	r3,1152(sp)
 8004038:	d8811f17 	ldw	r2,1148(sp)
 800403c:	da000404 	addi	r8,sp,16
 8004040:	acffef16 	blt	r21,r19,8004000 <__alt_data_end+0xfc004000>
 8004044:	d9012c17 	ldw	r4,1200(sp)
 8004048:	1cc7883a 	add	r3,r3,r19
 800404c:	10800044 	addi	r2,r2,1
 8004050:	41000015 	stw	r4,0(r8)
 8004054:	44c00115 	stw	r19,4(r8)
 8004058:	d8c12015 	stw	r3,1152(sp)
 800405c:	d8811f15 	stw	r2,1148(sp)
 8004060:	010001c4 	movi	r4,7
 8004064:	20828216 	blt	r4,r2,8004a70 <___vfprintf_internal_r+0x121c>
 8004068:	42000204 	addi	r8,r8,8
 800406c:	e080400c 	andi	r2,fp,256
 8004070:	1001ac1e 	bne	r2,zero,8004724 <___vfprintf_internal_r+0xed0>
 8004074:	d8811f17 	ldw	r2,1148(sp)
 8004078:	d9413117 	ldw	r5,1220(sp)
 800407c:	1c47883a 	add	r3,r3,r17
 8004080:	10800044 	addi	r2,r2,1
 8004084:	41400015 	stw	r5,0(r8)
 8004088:	44400115 	stw	r17,4(r8)
 800408c:	d8c12015 	stw	r3,1152(sp)
 8004090:	d8811f15 	stw	r2,1148(sp)
 8004094:	010001c4 	movi	r4,7
 8004098:	20825d16 	blt	r4,r2,8004a10 <___vfprintf_internal_r+0x11bc>
 800409c:	42000204 	addi	r8,r8,8
 80040a0:	e080010c 	andi	r2,fp,4
 80040a4:	10003126 	beq	r2,zero,800416c <___vfprintf_internal_r+0x918>
 80040a8:	d8812e17 	ldw	r2,1208(sp)
 80040ac:	d9012b17 	ldw	r4,1196(sp)
 80040b0:	1121c83a 	sub	r16,r2,r4
 80040b4:	04002d0e 	bge	zero,r16,800416c <___vfprintf_internal_r+0x918>
 80040b8:	04400404 	movi	r17,16
 80040bc:	d8811f17 	ldw	r2,1148(sp)
 80040c0:	8c05340e 	bge	r17,r16,8005594 <___vfprintf_internal_r+0x1d40>
 80040c4:	01020074 	movhi	r4,2049
 80040c8:	21070884 	addi	r4,r4,7202
 80040cc:	d9013615 	stw	r4,1240(sp)
 80040d0:	048001c4 	movi	r18,7
 80040d4:	00000306 	br	80040e4 <___vfprintf_internal_r+0x890>
 80040d8:	843ffc04 	addi	r16,r16,-16
 80040dc:	42000204 	addi	r8,r8,8
 80040e0:	8c00130e 	bge	r17,r16,8004130 <___vfprintf_internal_r+0x8dc>
 80040e4:	01420074 	movhi	r5,2049
 80040e8:	18c00404 	addi	r3,r3,16
 80040ec:	10800044 	addi	r2,r2,1
 80040f0:	29470884 	addi	r5,r5,7202
 80040f4:	41400015 	stw	r5,0(r8)
 80040f8:	44400115 	stw	r17,4(r8)
 80040fc:	d8c12015 	stw	r3,1152(sp)
 8004100:	d8811f15 	stw	r2,1148(sp)
 8004104:	90bff40e 	bge	r18,r2,80040d8 <__alt_data_end+0xfc0040d8>
 8004108:	b809883a 	mov	r4,r23
 800410c:	b00b883a 	mov	r5,r22
 8004110:	d9811e04 	addi	r6,sp,1144
 8004114:	80097440 	call	8009744 <__sprint_r>
 8004118:	103ee61e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 800411c:	843ffc04 	addi	r16,r16,-16
 8004120:	d8c12017 	ldw	r3,1152(sp)
 8004124:	d8811f17 	ldw	r2,1148(sp)
 8004128:	da000404 	addi	r8,sp,16
 800412c:	8c3fed16 	blt	r17,r16,80040e4 <__alt_data_end+0xfc0040e4>
 8004130:	d9013617 	ldw	r4,1240(sp)
 8004134:	1c07883a 	add	r3,r3,r16
 8004138:	10800044 	addi	r2,r2,1
 800413c:	41000015 	stw	r4,0(r8)
 8004140:	44000115 	stw	r16,4(r8)
 8004144:	d8c12015 	stw	r3,1152(sp)
 8004148:	d8811f15 	stw	r2,1148(sp)
 800414c:	010001c4 	movi	r4,7
 8004150:	2080060e 	bge	r4,r2,800416c <___vfprintf_internal_r+0x918>
 8004154:	b809883a 	mov	r4,r23
 8004158:	b00b883a 	mov	r5,r22
 800415c:	d9811e04 	addi	r6,sp,1144
 8004160:	80097440 	call	8009744 <__sprint_r>
 8004164:	103ed31e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8004168:	d8c12017 	ldw	r3,1152(sp)
 800416c:	df012b17 	ldw	fp,1196(sp)
 8004170:	d9412e17 	ldw	r5,1208(sp)
 8004174:	e140010e 	bge	fp,r5,800417c <___vfprintf_internal_r+0x928>
 8004178:	2839883a 	mov	fp,r5
 800417c:	d8812f17 	ldw	r2,1212(sp)
 8004180:	1705883a 	add	r2,r2,fp
 8004184:	d8812f15 	stw	r2,1212(sp)
 8004188:	1802291e 	bne	r3,zero,8004a30 <___vfprintf_internal_r+0x11dc>
 800418c:	d8c12a17 	ldw	r3,1192(sp)
 8004190:	d8011f15 	stw	zero,1148(sp)
 8004194:	da000404 	addi	r8,sp,16
 8004198:	18800007 	ldb	r2,0(r3)
 800419c:	103ded1e 	bne	r2,zero,8003954 <__alt_data_end+0xfc003954>
 80041a0:	dc012a17 	ldw	r16,1192(sp)
 80041a4:	003e0506 	br	80039bc <__alt_data_end+0xfc0039bc>
 80041a8:	d9012d17 	ldw	r4,1204(sp)
 80041ac:	d9412d17 	ldw	r5,1204(sp)
 80041b0:	da012a17 	ldw	r8,1192(sp)
 80041b4:	21000017 	ldw	r4,0(r4)
 80041b8:	29400117 	ldw	r5,4(r5)
 80041bc:	df012a15 	stw	fp,1192(sp)
 80041c0:	9839883a 	mov	fp,r19
 80041c4:	dcc12b03 	ldbu	r19,1196(sp)
 80041c8:	d9013715 	stw	r4,1244(sp)
 80041cc:	d9413915 	stw	r5,1252(sp)
 80041d0:	da013f15 	stw	r8,1276(sp)
 80041d4:	da413e15 	stw	r9,1272(sp)
 80041d8:	dcc12785 	stb	r19,1182(sp)
 80041dc:	80095300 	call	8009530 <__fpclassifyd>
 80041e0:	d8c12d17 	ldw	r3,1204(sp)
 80041e4:	04400044 	movi	r17,1
 80041e8:	da013f17 	ldw	r8,1276(sp)
 80041ec:	1c800204 	addi	r18,r3,8
 80041f0:	da413e17 	ldw	r9,1272(sp)
 80041f4:	d9013717 	ldw	r4,1244(sp)
 80041f8:	d9413917 	ldw	r5,1252(sp)
 80041fc:	1443451e 	bne	r2,r17,8004f14 <___vfprintf_internal_r+0x16c0>
 8004200:	000d883a 	mov	r6,zero
 8004204:	000f883a 	mov	r7,zero
 8004208:	800d2f80 	call	800d2f8 <__ledf2>
 800420c:	da013f17 	ldw	r8,1276(sp)
 8004210:	1004fe16 	blt	r2,zero,800560c <___vfprintf_internal_r+0x1db8>
 8004214:	dcc12783 	ldbu	r19,1182(sp)
 8004218:	008011c4 	movi	r2,71
 800421c:	14045d0e 	bge	r2,r16,8005394 <___vfprintf_internal_r+0x1b40>
 8004220:	01420074 	movhi	r5,2049
 8004224:	2946f504 	addi	r5,r5,7124
 8004228:	d9413115 	stw	r5,1220(sp)
 800422c:	00c000c4 	movi	r3,3
 8004230:	00bfdfc4 	movi	r2,-129
 8004234:	d8c12b15 	stw	r3,1196(sp)
 8004238:	e0b8703a 	and	fp,fp,r2
 800423c:	dc812d15 	stw	r18,1204(sp)
 8004240:	1823883a 	mov	r17,r3
 8004244:	d8013215 	stw	zero,1224(sp)
 8004248:	d8013415 	stw	zero,1232(sp)
 800424c:	003f0106 	br	8003e54 <__alt_data_end+0xfc003e54>
 8004250:	9cc00214 	ori	r19,r19,8
 8004254:	e005883a 	mov	r2,fp
 8004258:	e4000007 	ldb	r16,0(fp)
 800425c:	003de506 	br	80039f4 <__alt_data_end+0xfc0039f4>
 8004260:	da012a17 	ldw	r8,1192(sp)
 8004264:	df012a15 	stw	fp,1192(sp)
 8004268:	9f000414 	ori	fp,r19,16
 800426c:	e0c0080c 	andi	r3,fp,32
 8004270:	d8812d17 	ldw	r2,1204(sp)
 8004274:	18007626 	beq	r3,zero,8004450 <___vfprintf_internal_r+0xbfc>
 8004278:	d9412d17 	ldw	r5,1204(sp)
 800427c:	14800017 	ldw	r18,0(r2)
 8004280:	15400117 	ldw	r21,4(r2)
 8004284:	29400204 	addi	r5,r5,8
 8004288:	d9412d15 	stw	r5,1204(sp)
 800428c:	0005883a 	mov	r2,zero
 8004290:	9546b03a 	or	r3,r18,r21
 8004294:	d8012785 	stb	zero,1182(sp)
 8004298:	da413215 	stw	r9,1224(sp)
 800429c:	0027883a 	mov	r19,zero
 80042a0:	003ecd06 	br	8003dd8 <__alt_data_end+0xfc003dd8>
 80042a4:	da012a17 	ldw	r8,1192(sp)
 80042a8:	df012a15 	stw	fp,1192(sp)
 80042ac:	9f000414 	ori	fp,r19,16
 80042b0:	e0c0080c 	andi	r3,fp,32
 80042b4:	d8812d17 	ldw	r2,1204(sp)
 80042b8:	18002c26 	beq	r3,zero,800436c <___vfprintf_internal_r+0xb18>
 80042bc:	d9012d17 	ldw	r4,1204(sp)
 80042c0:	14800017 	ldw	r18,0(r2)
 80042c4:	15400117 	ldw	r21,4(r2)
 80042c8:	21000204 	addi	r4,r4,8
 80042cc:	d9012d15 	stw	r4,1204(sp)
 80042d0:	00800044 	movi	r2,1
 80042d4:	9546b03a 	or	r3,r18,r21
 80042d8:	003fee06 	br	8004294 <__alt_data_end+0xfc004294>
 80042dc:	da012a17 	ldw	r8,1192(sp)
 80042e0:	df012a15 	stw	fp,1192(sp)
 80042e4:	9839883a 	mov	fp,r19
 80042e8:	dcc12b03 	ldbu	r19,1196(sp)
 80042ec:	01420074 	movhi	r5,2049
 80042f0:	2946f804 	addi	r5,r5,7136
 80042f4:	dcc12785 	stb	r19,1182(sp)
 80042f8:	d9413b15 	stw	r5,1260(sp)
 80042fc:	e0c0080c 	andi	r3,fp,32
 8004300:	d8812d17 	ldw	r2,1204(sp)
 8004304:	18002e26 	beq	r3,zero,80043c0 <___vfprintf_internal_r+0xb6c>
 8004308:	d9412d17 	ldw	r5,1204(sp)
 800430c:	14800017 	ldw	r18,0(r2)
 8004310:	15400117 	ldw	r21,4(r2)
 8004314:	29400204 	addi	r5,r5,8
 8004318:	d9412d15 	stw	r5,1204(sp)
 800431c:	e080004c 	andi	r2,fp,1
 8004320:	10025c26 	beq	r2,zero,8004c94 <___vfprintf_internal_r+0x1440>
 8004324:	9546b03a 	or	r3,r18,r21
 8004328:	18038f26 	beq	r3,zero,8005168 <___vfprintf_internal_r+0x1914>
 800432c:	00800c04 	movi	r2,48
 8004330:	d8812705 	stb	r2,1180(sp)
 8004334:	dc012745 	stb	r16,1181(sp)
 8004338:	e7000094 	ori	fp,fp,2
 800433c:	00800084 	movi	r2,2
 8004340:	003fd406 	br	8004294 <__alt_data_end+0xfc004294>
 8004344:	9cc00814 	ori	r19,r19,32
 8004348:	e005883a 	mov	r2,fp
 800434c:	e4000007 	ldb	r16,0(fp)
 8004350:	003da806 	br	80039f4 <__alt_data_end+0xfc0039f4>
 8004354:	da012a17 	ldw	r8,1192(sp)
 8004358:	df012a15 	stw	fp,1192(sp)
 800435c:	9839883a 	mov	fp,r19
 8004360:	e0c0080c 	andi	r3,fp,32
 8004364:	d8812d17 	ldw	r2,1204(sp)
 8004368:	183fd41e 	bne	r3,zero,80042bc <__alt_data_end+0xfc0042bc>
 800436c:	e0c0040c 	andi	r3,fp,16
 8004370:	18035f26 	beq	r3,zero,80050f0 <___vfprintf_internal_r+0x189c>
 8004374:	d9412d17 	ldw	r5,1204(sp)
 8004378:	14800017 	ldw	r18,0(r2)
 800437c:	002b883a 	mov	r21,zero
 8004380:	29400104 	addi	r5,r5,4
 8004384:	d9412d15 	stw	r5,1204(sp)
 8004388:	00800044 	movi	r2,1
 800438c:	9007883a 	mov	r3,r18
 8004390:	003fc006 	br	8004294 <__alt_data_end+0xfc004294>
 8004394:	da012a17 	ldw	r8,1192(sp)
 8004398:	df012a15 	stw	fp,1192(sp)
 800439c:	9839883a 	mov	fp,r19
 80043a0:	dcc12b03 	ldbu	r19,1196(sp)
 80043a4:	01020074 	movhi	r4,2049
 80043a8:	2106fd04 	addi	r4,r4,7156
 80043ac:	d9013b15 	stw	r4,1260(sp)
 80043b0:	dcc12785 	stb	r19,1182(sp)
 80043b4:	e0c0080c 	andi	r3,fp,32
 80043b8:	d8812d17 	ldw	r2,1204(sp)
 80043bc:	183fd21e 	bne	r3,zero,8004308 <__alt_data_end+0xfc004308>
 80043c0:	e0c0040c 	andi	r3,fp,16
 80043c4:	18035426 	beq	r3,zero,8005118 <___vfprintf_internal_r+0x18c4>
 80043c8:	d8c12d17 	ldw	r3,1204(sp)
 80043cc:	14800017 	ldw	r18,0(r2)
 80043d0:	002b883a 	mov	r21,zero
 80043d4:	18c00104 	addi	r3,r3,4
 80043d8:	d8c12d15 	stw	r3,1204(sp)
 80043dc:	003fcf06 	br	800431c <__alt_data_end+0xfc00431c>
 80043e0:	e4000007 	ldb	r16,0(fp)
 80043e4:	00801b04 	movi	r2,108
 80043e8:	8083f726 	beq	r16,r2,80053c8 <___vfprintf_internal_r+0x1b74>
 80043ec:	9cc00414 	ori	r19,r19,16
 80043f0:	e005883a 	mov	r2,fp
 80043f4:	003d7f06 	br	80039f4 <__alt_data_end+0xfc0039f4>
 80043f8:	da012a17 	ldw	r8,1192(sp)
 80043fc:	df012a15 	stw	fp,1192(sp)
 8004400:	9839883a 	mov	fp,r19
 8004404:	dcc12b03 	ldbu	r19,1196(sp)
 8004408:	e080080c 	andi	r2,fp,32
 800440c:	dcc12785 	stb	r19,1182(sp)
 8004410:	10032226 	beq	r2,zero,800509c <___vfprintf_internal_r+0x1848>
 8004414:	d9412d17 	ldw	r5,1204(sp)
 8004418:	d9012f17 	ldw	r4,1212(sp)
 800441c:	28800017 	ldw	r2,0(r5)
 8004420:	2007d7fa 	srai	r3,r4,31
 8004424:	29400104 	addi	r5,r5,4
 8004428:	d9412d15 	stw	r5,1204(sp)
 800442c:	11000015 	stw	r4,0(r2)
 8004430:	10c00115 	stw	r3,4(r2)
 8004434:	003d4406 	br	8003948 <__alt_data_end+0xfc003948>
 8004438:	da012a17 	ldw	r8,1192(sp)
 800443c:	df012a15 	stw	fp,1192(sp)
 8004440:	9839883a 	mov	fp,r19
 8004444:	e0c0080c 	andi	r3,fp,32
 8004448:	d8812d17 	ldw	r2,1204(sp)
 800444c:	183f8a1e 	bne	r3,zero,8004278 <__alt_data_end+0xfc004278>
 8004450:	e0c0040c 	andi	r3,fp,16
 8004454:	18031c26 	beq	r3,zero,80050c8 <___vfprintf_internal_r+0x1874>
 8004458:	14800017 	ldw	r18,0(r2)
 800445c:	d8812d17 	ldw	r2,1204(sp)
 8004460:	002b883a 	mov	r21,zero
 8004464:	9007883a 	mov	r3,r18
 8004468:	10800104 	addi	r2,r2,4
 800446c:	d8812d15 	stw	r2,1204(sp)
 8004470:	0005883a 	mov	r2,zero
 8004474:	003f8706 	br	8004294 <__alt_data_end+0xfc004294>
 8004478:	d9412d17 	ldw	r5,1204(sp)
 800447c:	00800c04 	movi	r2,48
 8004480:	d8812705 	stb	r2,1180(sp)
 8004484:	2c800017 	ldw	r18,0(r5)
 8004488:	00801e04 	movi	r2,120
 800448c:	d8812745 	stb	r2,1181(sp)
 8004490:	00820074 	movhi	r2,2049
 8004494:	1086fd04 	addi	r2,r2,7156
 8004498:	29400104 	addi	r5,r5,4
 800449c:	da012a17 	ldw	r8,1192(sp)
 80044a0:	d8813b15 	stw	r2,1260(sp)
 80044a4:	df012a15 	stw	fp,1192(sp)
 80044a8:	002b883a 	mov	r21,zero
 80044ac:	9f000094 	ori	fp,r19,2
 80044b0:	d9412d15 	stw	r5,1204(sp)
 80044b4:	00800084 	movi	r2,2
 80044b8:	04001e04 	movi	r16,120
 80044bc:	9007883a 	mov	r3,r18
 80044c0:	003f7406 	br	8004294 <__alt_data_end+0xfc004294>
 80044c4:	da012a17 	ldw	r8,1192(sp)
 80044c8:	df012a15 	stw	fp,1192(sp)
 80044cc:	9839883a 	mov	fp,r19
 80044d0:	dcc12b03 	ldbu	r19,1196(sp)
 80044d4:	e080080c 	andi	r2,fp,32
 80044d8:	d8c12d17 	ldw	r3,1204(sp)
 80044dc:	dcc12785 	stb	r19,1182(sp)
 80044e0:	103e321e 	bne	r2,zero,8003dac <__alt_data_end+0xfc003dac>
 80044e4:	e080040c 	andi	r2,fp,16
 80044e8:	10031326 	beq	r2,zero,8005138 <___vfprintf_internal_r+0x18e4>
 80044ec:	1c800017 	ldw	r18,0(r3)
 80044f0:	d9412d17 	ldw	r5,1204(sp)
 80044f4:	902bd7fa 	srai	r21,r18,31
 80044f8:	29400104 	addi	r5,r5,4
 80044fc:	d9412d15 	stw	r5,1204(sp)
 8004500:	a805883a 	mov	r2,r21
 8004504:	003e2f06 	br	8003dc4 <__alt_data_end+0xfc003dc4>
 8004508:	9cc01014 	ori	r19,r19,64
 800450c:	e005883a 	mov	r2,fp
 8004510:	e4000007 	ldb	r16,0(fp)
 8004514:	003d3706 	br	80039f4 <__alt_data_end+0xfc0039f4>
 8004518:	d8c12d17 	ldw	r3,1204(sp)
 800451c:	d9012d17 	ldw	r4,1204(sp)
 8004520:	da012a17 	ldw	r8,1192(sp)
 8004524:	18800017 	ldw	r2,0(r3)
 8004528:	21000104 	addi	r4,r4,4
 800452c:	00c00044 	movi	r3,1
 8004530:	df012a15 	stw	fp,1192(sp)
 8004534:	d8c12b15 	stw	r3,1196(sp)
 8004538:	9839883a 	mov	fp,r19
 800453c:	d8012785 	stb	zero,1182(sp)
 8004540:	d8810405 	stb	r2,1040(sp)
 8004544:	d9012d15 	stw	r4,1204(sp)
 8004548:	1823883a 	mov	r17,r3
 800454c:	d8c10404 	addi	r3,sp,1040
 8004550:	d8013215 	stw	zero,1224(sp)
 8004554:	d8013415 	stw	zero,1232(sp)
 8004558:	d8c13115 	stw	r3,1220(sp)
 800455c:	0005883a 	mov	r2,zero
 8004560:	003e4306 	br	8003e70 <__alt_data_end+0xfc003e70>
 8004564:	d8812b07 	ldb	r2,1196(sp)
 8004568:	1002fc1e 	bne	r2,zero,800515c <___vfprintf_internal_r+0x1908>
 800456c:	00c00804 	movi	r3,32
 8004570:	d8c12b05 	stb	r3,1196(sp)
 8004574:	e005883a 	mov	r2,fp
 8004578:	e4000007 	ldb	r16,0(fp)
 800457c:	003d1d06 	br	80039f4 <__alt_data_end+0xfc0039f4>
 8004580:	9cc00054 	ori	r19,r19,1
 8004584:	e005883a 	mov	r2,fp
 8004588:	e4000007 	ldb	r16,0(fp)
 800458c:	003d1906 	br	80039f4 <__alt_data_end+0xfc0039f4>
 8004590:	d9012d17 	ldw	r4,1204(sp)
 8004594:	d9412d17 	ldw	r5,1204(sp)
 8004598:	21000017 	ldw	r4,0(r4)
 800459c:	28c00104 	addi	r3,r5,4
 80045a0:	d9012e15 	stw	r4,1208(sp)
 80045a4:	20038c16 	blt	r4,zero,80053d8 <___vfprintf_internal_r+0x1b84>
 80045a8:	d8c12d15 	stw	r3,1204(sp)
 80045ac:	e005883a 	mov	r2,fp
 80045b0:	e4000007 	ldb	r16,0(fp)
 80045b4:	003d0f06 	br	80039f4 <__alt_data_end+0xfc0039f4>
 80045b8:	00c00ac4 	movi	r3,43
 80045bc:	d8c12b05 	stb	r3,1196(sp)
 80045c0:	e005883a 	mov	r2,fp
 80045c4:	e4000007 	ldb	r16,0(fp)
 80045c8:	003d0a06 	br	80039f4 <__alt_data_end+0xfc0039f4>
 80045cc:	d8c12d17 	ldw	r3,1204(sp)
 80045d0:	d9012d17 	ldw	r4,1204(sp)
 80045d4:	da012a17 	ldw	r8,1192(sp)
 80045d8:	18c00017 	ldw	r3,0(r3)
 80045dc:	df012a15 	stw	fp,1192(sp)
 80045e0:	d8012785 	stb	zero,1182(sp)
 80045e4:	d8c13115 	stw	r3,1220(sp)
 80045e8:	9839883a 	mov	fp,r19
 80045ec:	24800104 	addi	r18,r4,4
 80045f0:	1803f726 	beq	r3,zero,80055d0 <___vfprintf_internal_r+0x1d7c>
 80045f4:	d9013117 	ldw	r4,1220(sp)
 80045f8:	48038916 	blt	r9,zero,8005420 <___vfprintf_internal_r+0x1bcc>
 80045fc:	480d883a 	mov	r6,r9
 8004600:	000b883a 	mov	r5,zero
 8004604:	da013f15 	stw	r8,1276(sp)
 8004608:	da413e15 	stw	r9,1272(sp)
 800460c:	8007b700 	call	8007b70 <memchr>
 8004610:	da013f17 	ldw	r8,1276(sp)
 8004614:	da413e17 	ldw	r9,1272(sp)
 8004618:	10045926 	beq	r2,zero,8005780 <___vfprintf_internal_r+0x1f2c>
 800461c:	d8c13117 	ldw	r3,1220(sp)
 8004620:	10e3c83a 	sub	r17,r2,r3
 8004624:	4c433516 	blt	r9,r17,80052fc <___vfprintf_internal_r+0x1aa8>
 8004628:	8805883a 	mov	r2,r17
 800462c:	88038116 	blt	r17,zero,8005434 <___vfprintf_internal_r+0x1be0>
 8004630:	dcc12783 	ldbu	r19,1182(sp)
 8004634:	d8812b15 	stw	r2,1196(sp)
 8004638:	dc812d15 	stw	r18,1204(sp)
 800463c:	d8013215 	stw	zero,1224(sp)
 8004640:	d8013415 	stw	zero,1232(sp)
 8004644:	003e0306 	br	8003e54 <__alt_data_end+0xfc003e54>
 8004648:	da012a17 	ldw	r8,1192(sp)
 800464c:	df012a15 	stw	fp,1192(sp)
 8004650:	9839883a 	mov	fp,r19
 8004654:	dcc12b03 	ldbu	r19,1196(sp)
 8004658:	dcc12785 	stb	r19,1182(sp)
 800465c:	803d8f26 	beq	r16,zero,8003c9c <__alt_data_end+0xfc003c9c>
 8004660:	00c00044 	movi	r3,1
 8004664:	d8c12b15 	stw	r3,1196(sp)
 8004668:	dc010405 	stb	r16,1040(sp)
 800466c:	d8012785 	stb	zero,1182(sp)
 8004670:	003fb506 	br	8004548 <__alt_data_end+0xfc004548>
 8004674:	d8c12017 	ldw	r3,1152(sp)
 8004678:	003e3506 	br	8003f50 <__alt_data_end+0xfc003f50>
 800467c:	10803fcc 	andi	r2,r2,255
 8004680:	00c00044 	movi	r3,1
 8004684:	10fddc1e 	bne	r2,r3,8003df8 <__alt_data_end+0xfc003df8>
 8004688:	a800021e 	bne	r21,zero,8004694 <___vfprintf_internal_r+0xe40>
 800468c:	00800244 	movi	r2,9
 8004690:	14801e2e 	bgeu	r2,r18,800470c <___vfprintf_internal_r+0xeb8>
 8004694:	dc012b15 	stw	r16,1196(sp)
 8004698:	dc410e04 	addi	r17,sp,1080
 800469c:	9021883a 	mov	r16,r18
 80046a0:	da012c15 	stw	r8,1200(sp)
 80046a4:	a825883a 	mov	r18,r21
 80046a8:	482b883a 	mov	r21,r9
 80046ac:	8009883a 	mov	r4,r16
 80046b0:	900b883a 	mov	r5,r18
 80046b4:	01800284 	movi	r6,10
 80046b8:	000f883a 	mov	r7,zero
 80046bc:	800b8080 	call	800b808 <__umoddi3>
 80046c0:	10800c04 	addi	r2,r2,48
 80046c4:	8c7fffc4 	addi	r17,r17,-1
 80046c8:	8009883a 	mov	r4,r16
 80046cc:	900b883a 	mov	r5,r18
 80046d0:	01800284 	movi	r6,10
 80046d4:	000f883a 	mov	r7,zero
 80046d8:	88800005 	stb	r2,0(r17)
 80046dc:	800b1c80 	call	800b1c8 <__udivdi3>
 80046e0:	1021883a 	mov	r16,r2
 80046e4:	10c4b03a 	or	r2,r2,r3
 80046e8:	1825883a 	mov	r18,r3
 80046ec:	103fef1e 	bne	r2,zero,80046ac <__alt_data_end+0xfc0046ac>
 80046f0:	d9012817 	ldw	r4,1184(sp)
 80046f4:	dc413115 	stw	r17,1220(sp)
 80046f8:	dc012b17 	ldw	r16,1196(sp)
 80046fc:	da012c17 	ldw	r8,1200(sp)
 8004700:	a813883a 	mov	r9,r21
 8004704:	2463c83a 	sub	r17,r4,r17
 8004708:	003dcd06 	br	8003e40 <__alt_data_end+0xfc003e40>
 800470c:	94800c04 	addi	r18,r18,48
 8004710:	d8c10dc4 	addi	r3,sp,1079
 8004714:	dc810dc5 	stb	r18,1079(sp)
 8004718:	dc413c17 	ldw	r17,1264(sp)
 800471c:	d8c13115 	stw	r3,1220(sp)
 8004720:	003dc706 	br	8003e40 <__alt_data_end+0xfc003e40>
 8004724:	00801944 	movi	r2,101
 8004728:	1400720e 	bge	r2,r16,80048f4 <___vfprintf_internal_r+0x10a0>
 800472c:	d9013717 	ldw	r4,1244(sp)
 8004730:	d9413917 	ldw	r5,1252(sp)
 8004734:	000d883a 	mov	r6,zero
 8004738:	000f883a 	mov	r7,zero
 800473c:	d8c13d15 	stw	r3,1268(sp)
 8004740:	da013f15 	stw	r8,1276(sp)
 8004744:	800d1940 	call	800d194 <__eqdf2>
 8004748:	d8c13d17 	ldw	r3,1268(sp)
 800474c:	da013f17 	ldw	r8,1276(sp)
 8004750:	1000f41e 	bne	r2,zero,8004b24 <___vfprintf_internal_r+0x12d0>
 8004754:	d8811f17 	ldw	r2,1148(sp)
 8004758:	01020074 	movhi	r4,2049
 800475c:	21070404 	addi	r4,r4,7184
 8004760:	18c00044 	addi	r3,r3,1
 8004764:	10800044 	addi	r2,r2,1
 8004768:	41000015 	stw	r4,0(r8)
 800476c:	01000044 	movi	r4,1
 8004770:	41000115 	stw	r4,4(r8)
 8004774:	d8c12015 	stw	r3,1152(sp)
 8004778:	d8811f15 	stw	r2,1148(sp)
 800477c:	010001c4 	movi	r4,7
 8004780:	20828d16 	blt	r4,r2,80051b8 <___vfprintf_internal_r+0x1964>
 8004784:	42000204 	addi	r8,r8,8
 8004788:	d8812617 	ldw	r2,1176(sp)
 800478c:	d9413317 	ldw	r5,1228(sp)
 8004790:	11400216 	blt	r2,r5,800479c <___vfprintf_internal_r+0xf48>
 8004794:	e080004c 	andi	r2,fp,1
 8004798:	103e4126 	beq	r2,zero,80040a0 <__alt_data_end+0xfc0040a0>
 800479c:	d8813817 	ldw	r2,1248(sp)
 80047a0:	d9013517 	ldw	r4,1236(sp)
 80047a4:	d9413817 	ldw	r5,1248(sp)
 80047a8:	1887883a 	add	r3,r3,r2
 80047ac:	d8811f17 	ldw	r2,1148(sp)
 80047b0:	41000015 	stw	r4,0(r8)
 80047b4:	41400115 	stw	r5,4(r8)
 80047b8:	10800044 	addi	r2,r2,1
 80047bc:	d8c12015 	stw	r3,1152(sp)
 80047c0:	d8811f15 	stw	r2,1148(sp)
 80047c4:	010001c4 	movi	r4,7
 80047c8:	20830916 	blt	r4,r2,80053f0 <___vfprintf_internal_r+0x1b9c>
 80047cc:	42000204 	addi	r8,r8,8
 80047d0:	d8813317 	ldw	r2,1228(sp)
 80047d4:	143fffc4 	addi	r16,r2,-1
 80047d8:	043e310e 	bge	zero,r16,80040a0 <__alt_data_end+0xfc0040a0>
 80047dc:	04400404 	movi	r17,16
 80047e0:	d8811f17 	ldw	r2,1148(sp)
 80047e4:	8c007e0e 	bge	r17,r16,80049e0 <___vfprintf_internal_r+0x118c>
 80047e8:	01420074 	movhi	r5,2049
 80047ec:	29470484 	addi	r5,r5,7186
 80047f0:	d9412c15 	stw	r5,1200(sp)
 80047f4:	04c001c4 	movi	r19,7
 80047f8:	00000306 	br	8004808 <___vfprintf_internal_r+0xfb4>
 80047fc:	42000204 	addi	r8,r8,8
 8004800:	843ffc04 	addi	r16,r16,-16
 8004804:	8c00790e 	bge	r17,r16,80049ec <___vfprintf_internal_r+0x1198>
 8004808:	18c00404 	addi	r3,r3,16
 800480c:	10800044 	addi	r2,r2,1
 8004810:	45000015 	stw	r20,0(r8)
 8004814:	44400115 	stw	r17,4(r8)
 8004818:	d8c12015 	stw	r3,1152(sp)
 800481c:	d8811f15 	stw	r2,1148(sp)
 8004820:	98bff60e 	bge	r19,r2,80047fc <__alt_data_end+0xfc0047fc>
 8004824:	b809883a 	mov	r4,r23
 8004828:	b00b883a 	mov	r5,r22
 800482c:	d9811e04 	addi	r6,sp,1144
 8004830:	80097440 	call	8009744 <__sprint_r>
 8004834:	103d1f1e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8004838:	d8c12017 	ldw	r3,1152(sp)
 800483c:	d8811f17 	ldw	r2,1148(sp)
 8004840:	da000404 	addi	r8,sp,16
 8004844:	003fee06 	br	8004800 <__alt_data_end+0xfc004800>
 8004848:	d9412e17 	ldw	r5,1208(sp)
 800484c:	d8812b17 	ldw	r2,1196(sp)
 8004850:	28a7c83a 	sub	r19,r5,r2
 8004854:	04fddc0e 	bge	zero,r19,8003fc8 <__alt_data_end+0xfc003fc8>
 8004858:	05400404 	movi	r21,16
 800485c:	d8811f17 	ldw	r2,1148(sp)
 8004860:	acc3870e 	bge	r21,r19,8005680 <___vfprintf_internal_r+0x1e2c>
 8004864:	01420074 	movhi	r5,2049
 8004868:	29470484 	addi	r5,r5,7186
 800486c:	d9412c15 	stw	r5,1200(sp)
 8004870:	048001c4 	movi	r18,7
 8004874:	00000306 	br	8004884 <___vfprintf_internal_r+0x1030>
 8004878:	9cfffc04 	addi	r19,r19,-16
 800487c:	42000204 	addi	r8,r8,8
 8004880:	acc0110e 	bge	r21,r19,80048c8 <___vfprintf_internal_r+0x1074>
 8004884:	18c00404 	addi	r3,r3,16
 8004888:	10800044 	addi	r2,r2,1
 800488c:	45000015 	stw	r20,0(r8)
 8004890:	45400115 	stw	r21,4(r8)
 8004894:	d8c12015 	stw	r3,1152(sp)
 8004898:	d8811f15 	stw	r2,1148(sp)
 800489c:	90bff60e 	bge	r18,r2,8004878 <__alt_data_end+0xfc004878>
 80048a0:	b809883a 	mov	r4,r23
 80048a4:	b00b883a 	mov	r5,r22
 80048a8:	d9811e04 	addi	r6,sp,1144
 80048ac:	80097440 	call	8009744 <__sprint_r>
 80048b0:	103d001e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 80048b4:	9cfffc04 	addi	r19,r19,-16
 80048b8:	d8c12017 	ldw	r3,1152(sp)
 80048bc:	d8811f17 	ldw	r2,1148(sp)
 80048c0:	da000404 	addi	r8,sp,16
 80048c4:	acffef16 	blt	r21,r19,8004884 <__alt_data_end+0xfc004884>
 80048c8:	d9012c17 	ldw	r4,1200(sp)
 80048cc:	1cc7883a 	add	r3,r3,r19
 80048d0:	10800044 	addi	r2,r2,1
 80048d4:	41000015 	stw	r4,0(r8)
 80048d8:	44c00115 	stw	r19,4(r8)
 80048dc:	d8c12015 	stw	r3,1152(sp)
 80048e0:	d8811f15 	stw	r2,1148(sp)
 80048e4:	010001c4 	movi	r4,7
 80048e8:	20817816 	blt	r4,r2,8004ecc <___vfprintf_internal_r+0x1678>
 80048ec:	42000204 	addi	r8,r8,8
 80048f0:	003db506 	br	8003fc8 <__alt_data_end+0xfc003fc8>
 80048f4:	d9413317 	ldw	r5,1228(sp)
 80048f8:	00800044 	movi	r2,1
 80048fc:	18c00044 	addi	r3,r3,1
 8004900:	11413e0e 	bge	r2,r5,8004dfc <___vfprintf_internal_r+0x15a8>
 8004904:	dc011f17 	ldw	r16,1148(sp)
 8004908:	d8813117 	ldw	r2,1220(sp)
 800490c:	d8c12015 	stw	r3,1152(sp)
 8004910:	84000044 	addi	r16,r16,1
 8004914:	40800015 	stw	r2,0(r8)
 8004918:	00800044 	movi	r2,1
 800491c:	40800115 	stw	r2,4(r8)
 8004920:	dc011f15 	stw	r16,1148(sp)
 8004924:	008001c4 	movi	r2,7
 8004928:	14015616 	blt	r2,r16,8004e84 <___vfprintf_internal_r+0x1630>
 800492c:	42000204 	addi	r8,r8,8
 8004930:	d9013817 	ldw	r4,1248(sp)
 8004934:	d9413517 	ldw	r5,1236(sp)
 8004938:	84000044 	addi	r16,r16,1
 800493c:	1907883a 	add	r3,r3,r4
 8004940:	41400015 	stw	r5,0(r8)
 8004944:	41000115 	stw	r4,4(r8)
 8004948:	d8c12015 	stw	r3,1152(sp)
 800494c:	dc011f15 	stw	r16,1148(sp)
 8004950:	008001c4 	movi	r2,7
 8004954:	14015416 	blt	r2,r16,8004ea8 <___vfprintf_internal_r+0x1654>
 8004958:	44400204 	addi	r17,r8,8
 800495c:	d9013717 	ldw	r4,1244(sp)
 8004960:	d9413917 	ldw	r5,1252(sp)
 8004964:	000d883a 	mov	r6,zero
 8004968:	000f883a 	mov	r7,zero
 800496c:	d8c13d15 	stw	r3,1268(sp)
 8004970:	800d1940 	call	800d194 <__eqdf2>
 8004974:	d8c13d17 	ldw	r3,1268(sp)
 8004978:	1000a726 	beq	r2,zero,8004c18 <___vfprintf_internal_r+0x13c4>
 800497c:	d9013317 	ldw	r4,1228(sp)
 8004980:	d9413117 	ldw	r5,1220(sp)
 8004984:	84000044 	addi	r16,r16,1
 8004988:	20bfffc4 	addi	r2,r4,-1
 800498c:	1887883a 	add	r3,r3,r2
 8004990:	29000044 	addi	r4,r5,1
 8004994:	88800115 	stw	r2,4(r17)
 8004998:	89000015 	stw	r4,0(r17)
 800499c:	d8c12015 	stw	r3,1152(sp)
 80049a0:	dc011f15 	stw	r16,1148(sp)
 80049a4:	008001c4 	movi	r2,7
 80049a8:	14012d16 	blt	r2,r16,8004e60 <___vfprintf_internal_r+0x160c>
 80049ac:	8c400204 	addi	r17,r17,8
 80049b0:	d9413a17 	ldw	r5,1256(sp)
 80049b4:	dcc122c4 	addi	r19,sp,1163
 80049b8:	84000044 	addi	r16,r16,1
 80049bc:	28c7883a 	add	r3,r5,r3
 80049c0:	8cc00015 	stw	r19,0(r17)
 80049c4:	89400115 	stw	r5,4(r17)
 80049c8:	d8c12015 	stw	r3,1152(sp)
 80049cc:	dc011f15 	stw	r16,1148(sp)
 80049d0:	008001c4 	movi	r2,7
 80049d4:	14000e16 	blt	r2,r16,8004a10 <___vfprintf_internal_r+0x11bc>
 80049d8:	8a000204 	addi	r8,r17,8
 80049dc:	003db006 	br	80040a0 <__alt_data_end+0xfc0040a0>
 80049e0:	01020074 	movhi	r4,2049
 80049e4:	21070484 	addi	r4,r4,7186
 80049e8:	d9012c15 	stw	r4,1200(sp)
 80049ec:	d9012c17 	ldw	r4,1200(sp)
 80049f0:	1c07883a 	add	r3,r3,r16
 80049f4:	44000115 	stw	r16,4(r8)
 80049f8:	41000015 	stw	r4,0(r8)
 80049fc:	10800044 	addi	r2,r2,1
 8004a00:	d8c12015 	stw	r3,1152(sp)
 8004a04:	d8811f15 	stw	r2,1148(sp)
 8004a08:	010001c4 	movi	r4,7
 8004a0c:	20bda30e 	bge	r4,r2,800409c <__alt_data_end+0xfc00409c>
 8004a10:	b809883a 	mov	r4,r23
 8004a14:	b00b883a 	mov	r5,r22
 8004a18:	d9811e04 	addi	r6,sp,1144
 8004a1c:	80097440 	call	8009744 <__sprint_r>
 8004a20:	103ca41e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8004a24:	d8c12017 	ldw	r3,1152(sp)
 8004a28:	da000404 	addi	r8,sp,16
 8004a2c:	003d9c06 	br	80040a0 <__alt_data_end+0xfc0040a0>
 8004a30:	b809883a 	mov	r4,r23
 8004a34:	b00b883a 	mov	r5,r22
 8004a38:	d9811e04 	addi	r6,sp,1144
 8004a3c:	80097440 	call	8009744 <__sprint_r>
 8004a40:	103dd226 	beq	r2,zero,800418c <__alt_data_end+0xfc00418c>
 8004a44:	003c9b06 	br	8003cb4 <__alt_data_end+0xfc003cb4>
 8004a48:	10803fcc 	andi	r2,r2,255
 8004a4c:	1000311e 	bne	r2,zero,8004b14 <___vfprintf_internal_r+0x12c0>
 8004a50:	e080004c 	andi	r2,fp,1
 8004a54:	10002f26 	beq	r2,zero,8004b14 <___vfprintf_internal_r+0x12c0>
 8004a58:	00800c04 	movi	r2,48
 8004a5c:	d8c10dc4 	addi	r3,sp,1079
 8004a60:	d8810dc5 	stb	r2,1079(sp)
 8004a64:	dc413c17 	ldw	r17,1264(sp)
 8004a68:	d8c13115 	stw	r3,1220(sp)
 8004a6c:	003cf406 	br	8003e40 <__alt_data_end+0xfc003e40>
 8004a70:	b809883a 	mov	r4,r23
 8004a74:	b00b883a 	mov	r5,r22
 8004a78:	d9811e04 	addi	r6,sp,1144
 8004a7c:	80097440 	call	8009744 <__sprint_r>
 8004a80:	103c8c1e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8004a84:	d8c12017 	ldw	r3,1152(sp)
 8004a88:	da000404 	addi	r8,sp,16
 8004a8c:	003d7706 	br	800406c <__alt_data_end+0xfc00406c>
 8004a90:	b809883a 	mov	r4,r23
 8004a94:	b00b883a 	mov	r5,r22
 8004a98:	d9811e04 	addi	r6,sp,1144
 8004a9c:	80097440 	call	8009744 <__sprint_r>
 8004aa0:	103c841e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8004aa4:	d8c12017 	ldw	r3,1152(sp)
 8004aa8:	da000404 	addi	r8,sp,16
 8004aac:	003d3506 	br	8003f84 <__alt_data_end+0xfc003f84>
 8004ab0:	b809883a 	mov	r4,r23
 8004ab4:	b00b883a 	mov	r5,r22
 8004ab8:	d9811e04 	addi	r6,sp,1144
 8004abc:	80097440 	call	8009744 <__sprint_r>
 8004ac0:	103c7c1e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8004ac4:	d8c12017 	ldw	r3,1152(sp)
 8004ac8:	da000404 	addi	r8,sp,16
 8004acc:	003d3b06 	br	8003fbc <__alt_data_end+0xfc003fbc>
 8004ad0:	d9413b17 	ldw	r5,1260(sp)
 8004ad4:	d8c10e04 	addi	r3,sp,1080
 8004ad8:	908003cc 	andi	r2,r18,15
 8004adc:	a808973a 	slli	r4,r21,28
 8004ae0:	2885883a 	add	r2,r5,r2
 8004ae4:	9024d13a 	srli	r18,r18,4
 8004ae8:	10800003 	ldbu	r2,0(r2)
 8004aec:	a82ad13a 	srli	r21,r21,4
 8004af0:	18ffffc4 	addi	r3,r3,-1
 8004af4:	24a4b03a 	or	r18,r4,r18
 8004af8:	18800005 	stb	r2,0(r3)
 8004afc:	9544b03a 	or	r2,r18,r21
 8004b00:	103ff51e 	bne	r2,zero,8004ad8 <__alt_data_end+0xfc004ad8>
 8004b04:	d9412817 	ldw	r5,1184(sp)
 8004b08:	d8c13115 	stw	r3,1220(sp)
 8004b0c:	28e3c83a 	sub	r17,r5,r3
 8004b10:	003ccb06 	br	8003e40 <__alt_data_end+0xfc003e40>
 8004b14:	d8c10e04 	addi	r3,sp,1080
 8004b18:	0023883a 	mov	r17,zero
 8004b1c:	d8c13115 	stw	r3,1220(sp)
 8004b20:	003cc706 	br	8003e40 <__alt_data_end+0xfc003e40>
 8004b24:	dc012617 	ldw	r16,1176(sp)
 8004b28:	0401ab0e 	bge	zero,r16,80051d8 <___vfprintf_internal_r+0x1984>
 8004b2c:	d8813317 	ldw	r2,1228(sp)
 8004b30:	d9413117 	ldw	r5,1220(sp)
 8004b34:	d9013417 	ldw	r4,1232(sp)
 8004b38:	1023883a 	mov	r17,r2
 8004b3c:	28a1883a 	add	r16,r5,r2
 8004b40:	2080010e 	bge	r4,r2,8004b48 <___vfprintf_internal_r+0x12f4>
 8004b44:	2023883a 	mov	r17,r4
 8004b48:	04400b0e 	bge	zero,r17,8004b78 <___vfprintf_internal_r+0x1324>
 8004b4c:	d8811f17 	ldw	r2,1148(sp)
 8004b50:	d9413117 	ldw	r5,1220(sp)
 8004b54:	1c47883a 	add	r3,r3,r17
 8004b58:	10800044 	addi	r2,r2,1
 8004b5c:	41400015 	stw	r5,0(r8)
 8004b60:	44400115 	stw	r17,4(r8)
 8004b64:	d8c12015 	stw	r3,1152(sp)
 8004b68:	d8811f15 	stw	r2,1148(sp)
 8004b6c:	010001c4 	movi	r4,7
 8004b70:	20826716 	blt	r4,r2,8005510 <___vfprintf_internal_r+0x1cbc>
 8004b74:	42000204 	addi	r8,r8,8
 8004b78:	88026316 	blt	r17,zero,8005508 <___vfprintf_internal_r+0x1cb4>
 8004b7c:	d8813417 	ldw	r2,1232(sp)
 8004b80:	1463c83a 	sub	r17,r2,r17
 8004b84:	0440590e 	bge	zero,r17,8004cec <___vfprintf_internal_r+0x1498>
 8004b88:	04c00404 	movi	r19,16
 8004b8c:	d8811f17 	ldw	r2,1148(sp)
 8004b90:	9c41770e 	bge	r19,r17,8005170 <___vfprintf_internal_r+0x191c>
 8004b94:	01420074 	movhi	r5,2049
 8004b98:	29470484 	addi	r5,r5,7186
 8004b9c:	d9412c15 	stw	r5,1200(sp)
 8004ba0:	054001c4 	movi	r21,7
 8004ba4:	00000306 	br	8004bb4 <___vfprintf_internal_r+0x1360>
 8004ba8:	42000204 	addi	r8,r8,8
 8004bac:	8c7ffc04 	addi	r17,r17,-16
 8004bb0:	9c41720e 	bge	r19,r17,800517c <___vfprintf_internal_r+0x1928>
 8004bb4:	18c00404 	addi	r3,r3,16
 8004bb8:	10800044 	addi	r2,r2,1
 8004bbc:	45000015 	stw	r20,0(r8)
 8004bc0:	44c00115 	stw	r19,4(r8)
 8004bc4:	d8c12015 	stw	r3,1152(sp)
 8004bc8:	d8811f15 	stw	r2,1148(sp)
 8004bcc:	a8bff60e 	bge	r21,r2,8004ba8 <__alt_data_end+0xfc004ba8>
 8004bd0:	b809883a 	mov	r4,r23
 8004bd4:	b00b883a 	mov	r5,r22
 8004bd8:	d9811e04 	addi	r6,sp,1144
 8004bdc:	80097440 	call	8009744 <__sprint_r>
 8004be0:	103c341e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8004be4:	d8c12017 	ldw	r3,1152(sp)
 8004be8:	d8811f17 	ldw	r2,1148(sp)
 8004bec:	da000404 	addi	r8,sp,16
 8004bf0:	003fee06 	br	8004bac <__alt_data_end+0xfc004bac>
 8004bf4:	b809883a 	mov	r4,r23
 8004bf8:	b00b883a 	mov	r5,r22
 8004bfc:	d9811e04 	addi	r6,sp,1144
 8004c00:	80097440 	call	8009744 <__sprint_r>
 8004c04:	103c2b1e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8004c08:	d8c12017 	ldw	r3,1152(sp)
 8004c0c:	d8812787 	ldb	r2,1182(sp)
 8004c10:	da000404 	addi	r8,sp,16
 8004c14:	003cce06 	br	8003f50 <__alt_data_end+0xfc003f50>
 8004c18:	d8813317 	ldw	r2,1228(sp)
 8004c1c:	14ffffc4 	addi	r19,r2,-1
 8004c20:	04ff630e 	bge	zero,r19,80049b0 <__alt_data_end+0xfc0049b0>
 8004c24:	05400404 	movi	r21,16
 8004c28:	acc0810e 	bge	r21,r19,8004e30 <___vfprintf_internal_r+0x15dc>
 8004c2c:	01420074 	movhi	r5,2049
 8004c30:	29470484 	addi	r5,r5,7186
 8004c34:	d9412c15 	stw	r5,1200(sp)
 8004c38:	01c001c4 	movi	r7,7
 8004c3c:	00000306 	br	8004c4c <___vfprintf_internal_r+0x13f8>
 8004c40:	8c400204 	addi	r17,r17,8
 8004c44:	9cfffc04 	addi	r19,r19,-16
 8004c48:	acc07c0e 	bge	r21,r19,8004e3c <___vfprintf_internal_r+0x15e8>
 8004c4c:	18c00404 	addi	r3,r3,16
 8004c50:	84000044 	addi	r16,r16,1
 8004c54:	8d000015 	stw	r20,0(r17)
 8004c58:	8d400115 	stw	r21,4(r17)
 8004c5c:	d8c12015 	stw	r3,1152(sp)
 8004c60:	dc011f15 	stw	r16,1148(sp)
 8004c64:	3c3ff60e 	bge	r7,r16,8004c40 <__alt_data_end+0xfc004c40>
 8004c68:	b809883a 	mov	r4,r23
 8004c6c:	b00b883a 	mov	r5,r22
 8004c70:	d9811e04 	addi	r6,sp,1144
 8004c74:	d9c13d15 	stw	r7,1268(sp)
 8004c78:	80097440 	call	8009744 <__sprint_r>
 8004c7c:	d9c13d17 	ldw	r7,1268(sp)
 8004c80:	103c0c1e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8004c84:	d8c12017 	ldw	r3,1152(sp)
 8004c88:	dc011f17 	ldw	r16,1148(sp)
 8004c8c:	dc400404 	addi	r17,sp,16
 8004c90:	003fec06 	br	8004c44 <__alt_data_end+0xfc004c44>
 8004c94:	00800084 	movi	r2,2
 8004c98:	9546b03a 	or	r3,r18,r21
 8004c9c:	003d7d06 	br	8004294 <__alt_data_end+0xfc004294>
 8004ca0:	10803fcc 	andi	r2,r2,255
 8004ca4:	1080201c 	xori	r2,r2,128
 8004ca8:	10bfe004 	addi	r2,r2,-128
 8004cac:	01000c04 	movi	r4,48
 8004cb0:	1101d726 	beq	r2,r4,8005410 <___vfprintf_internal_r+0x1bbc>
 8004cb4:	d9413117 	ldw	r5,1220(sp)
 8004cb8:	d8812817 	ldw	r2,1184(sp)
 8004cbc:	193fffc5 	stb	r4,-1(r3)
 8004cc0:	297fffc4 	addi	r5,r5,-1
 8004cc4:	d9413115 	stw	r5,1220(sp)
 8004cc8:	1163c83a 	sub	r17,r2,r5
 8004ccc:	003c5c06 	br	8003e40 <__alt_data_end+0xfc003e40>
 8004cd0:	b809883a 	mov	r4,r23
 8004cd4:	b00b883a 	mov	r5,r22
 8004cd8:	d9811e04 	addi	r6,sp,1144
 8004cdc:	80097440 	call	8009744 <__sprint_r>
 8004ce0:	103bf41e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8004ce4:	d8c12017 	ldw	r3,1152(sp)
 8004ce8:	da000404 	addi	r8,sp,16
 8004cec:	d9413117 	ldw	r5,1220(sp)
 8004cf0:	d9013417 	ldw	r4,1232(sp)
 8004cf4:	d8812617 	ldw	r2,1176(sp)
 8004cf8:	2923883a 	add	r17,r5,r4
 8004cfc:	d9413317 	ldw	r5,1228(sp)
 8004d00:	11400216 	blt	r2,r5,8004d0c <___vfprintf_internal_r+0x14b8>
 8004d04:	e100004c 	andi	r4,fp,1
 8004d08:	20000d26 	beq	r4,zero,8004d40 <___vfprintf_internal_r+0x14ec>
 8004d0c:	d9013817 	ldw	r4,1248(sp)
 8004d10:	d9413517 	ldw	r5,1236(sp)
 8004d14:	1907883a 	add	r3,r3,r4
 8004d18:	d9011f17 	ldw	r4,1148(sp)
 8004d1c:	41400015 	stw	r5,0(r8)
 8004d20:	d9413817 	ldw	r5,1248(sp)
 8004d24:	21000044 	addi	r4,r4,1
 8004d28:	d8c12015 	stw	r3,1152(sp)
 8004d2c:	41400115 	stw	r5,4(r8)
 8004d30:	d9011f15 	stw	r4,1148(sp)
 8004d34:	014001c4 	movi	r5,7
 8004d38:	2901fd16 	blt	r5,r4,8005530 <___vfprintf_internal_r+0x1cdc>
 8004d3c:	42000204 	addi	r8,r8,8
 8004d40:	d9013317 	ldw	r4,1228(sp)
 8004d44:	2085c83a 	sub	r2,r4,r2
 8004d48:	8449c83a 	sub	r4,r16,r17
 8004d4c:	1021883a 	mov	r16,r2
 8004d50:	2080010e 	bge	r4,r2,8004d58 <___vfprintf_internal_r+0x1504>
 8004d54:	2021883a 	mov	r16,r4
 8004d58:	04000a0e 	bge	zero,r16,8004d84 <___vfprintf_internal_r+0x1530>
 8004d5c:	d9011f17 	ldw	r4,1148(sp)
 8004d60:	1c07883a 	add	r3,r3,r16
 8004d64:	44400015 	stw	r17,0(r8)
 8004d68:	21000044 	addi	r4,r4,1
 8004d6c:	44000115 	stw	r16,4(r8)
 8004d70:	d8c12015 	stw	r3,1152(sp)
 8004d74:	d9011f15 	stw	r4,1148(sp)
 8004d78:	014001c4 	movi	r5,7
 8004d7c:	29020916 	blt	r5,r4,80055a4 <___vfprintf_internal_r+0x1d50>
 8004d80:	42000204 	addi	r8,r8,8
 8004d84:	80020116 	blt	r16,zero,800558c <___vfprintf_internal_r+0x1d38>
 8004d88:	1421c83a 	sub	r16,r2,r16
 8004d8c:	043cc40e 	bge	zero,r16,80040a0 <__alt_data_end+0xfc0040a0>
 8004d90:	04400404 	movi	r17,16
 8004d94:	d8811f17 	ldw	r2,1148(sp)
 8004d98:	8c3f110e 	bge	r17,r16,80049e0 <__alt_data_end+0xfc0049e0>
 8004d9c:	01420074 	movhi	r5,2049
 8004da0:	29470484 	addi	r5,r5,7186
 8004da4:	d9412c15 	stw	r5,1200(sp)
 8004da8:	04c001c4 	movi	r19,7
 8004dac:	00000306 	br	8004dbc <___vfprintf_internal_r+0x1568>
 8004db0:	42000204 	addi	r8,r8,8
 8004db4:	843ffc04 	addi	r16,r16,-16
 8004db8:	8c3f0c0e 	bge	r17,r16,80049ec <__alt_data_end+0xfc0049ec>
 8004dbc:	18c00404 	addi	r3,r3,16
 8004dc0:	10800044 	addi	r2,r2,1
 8004dc4:	45000015 	stw	r20,0(r8)
 8004dc8:	44400115 	stw	r17,4(r8)
 8004dcc:	d8c12015 	stw	r3,1152(sp)
 8004dd0:	d8811f15 	stw	r2,1148(sp)
 8004dd4:	98bff60e 	bge	r19,r2,8004db0 <__alt_data_end+0xfc004db0>
 8004dd8:	b809883a 	mov	r4,r23
 8004ddc:	b00b883a 	mov	r5,r22
 8004de0:	d9811e04 	addi	r6,sp,1144
 8004de4:	80097440 	call	8009744 <__sprint_r>
 8004de8:	103bb21e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8004dec:	d8c12017 	ldw	r3,1152(sp)
 8004df0:	d8811f17 	ldw	r2,1148(sp)
 8004df4:	da000404 	addi	r8,sp,16
 8004df8:	003fee06 	br	8004db4 <__alt_data_end+0xfc004db4>
 8004dfc:	e088703a 	and	r4,fp,r2
 8004e00:	203ec01e 	bne	r4,zero,8004904 <__alt_data_end+0xfc004904>
 8004e04:	dc011f17 	ldw	r16,1148(sp)
 8004e08:	d9013117 	ldw	r4,1220(sp)
 8004e0c:	40800115 	stw	r2,4(r8)
 8004e10:	84000044 	addi	r16,r16,1
 8004e14:	41000015 	stw	r4,0(r8)
 8004e18:	d8c12015 	stw	r3,1152(sp)
 8004e1c:	dc011f15 	stw	r16,1148(sp)
 8004e20:	008001c4 	movi	r2,7
 8004e24:	14000e16 	blt	r2,r16,8004e60 <___vfprintf_internal_r+0x160c>
 8004e28:	44400204 	addi	r17,r8,8
 8004e2c:	003ee006 	br	80049b0 <__alt_data_end+0xfc0049b0>
 8004e30:	01020074 	movhi	r4,2049
 8004e34:	21070484 	addi	r4,r4,7186
 8004e38:	d9012c15 	stw	r4,1200(sp)
 8004e3c:	d8812c17 	ldw	r2,1200(sp)
 8004e40:	1cc7883a 	add	r3,r3,r19
 8004e44:	84000044 	addi	r16,r16,1
 8004e48:	88800015 	stw	r2,0(r17)
 8004e4c:	8cc00115 	stw	r19,4(r17)
 8004e50:	d8c12015 	stw	r3,1152(sp)
 8004e54:	dc011f15 	stw	r16,1148(sp)
 8004e58:	008001c4 	movi	r2,7
 8004e5c:	143ed30e 	bge	r2,r16,80049ac <__alt_data_end+0xfc0049ac>
 8004e60:	b809883a 	mov	r4,r23
 8004e64:	b00b883a 	mov	r5,r22
 8004e68:	d9811e04 	addi	r6,sp,1144
 8004e6c:	80097440 	call	8009744 <__sprint_r>
 8004e70:	103b901e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8004e74:	d8c12017 	ldw	r3,1152(sp)
 8004e78:	dc011f17 	ldw	r16,1148(sp)
 8004e7c:	dc400404 	addi	r17,sp,16
 8004e80:	003ecb06 	br	80049b0 <__alt_data_end+0xfc0049b0>
 8004e84:	b809883a 	mov	r4,r23
 8004e88:	b00b883a 	mov	r5,r22
 8004e8c:	d9811e04 	addi	r6,sp,1144
 8004e90:	80097440 	call	8009744 <__sprint_r>
 8004e94:	103b871e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8004e98:	d8c12017 	ldw	r3,1152(sp)
 8004e9c:	dc011f17 	ldw	r16,1148(sp)
 8004ea0:	da000404 	addi	r8,sp,16
 8004ea4:	003ea206 	br	8004930 <__alt_data_end+0xfc004930>
 8004ea8:	b809883a 	mov	r4,r23
 8004eac:	b00b883a 	mov	r5,r22
 8004eb0:	d9811e04 	addi	r6,sp,1144
 8004eb4:	80097440 	call	8009744 <__sprint_r>
 8004eb8:	103b7e1e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8004ebc:	d8c12017 	ldw	r3,1152(sp)
 8004ec0:	dc011f17 	ldw	r16,1148(sp)
 8004ec4:	dc400404 	addi	r17,sp,16
 8004ec8:	003ea406 	br	800495c <__alt_data_end+0xfc00495c>
 8004ecc:	b809883a 	mov	r4,r23
 8004ed0:	b00b883a 	mov	r5,r22
 8004ed4:	d9811e04 	addi	r6,sp,1144
 8004ed8:	80097440 	call	8009744 <__sprint_r>
 8004edc:	103b751e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8004ee0:	d8c12017 	ldw	r3,1152(sp)
 8004ee4:	da000404 	addi	r8,sp,16
 8004ee8:	003c3706 	br	8003fc8 <__alt_data_end+0xfc003fc8>
 8004eec:	04a5c83a 	sub	r18,zero,r18
 8004ef0:	9004c03a 	cmpne	r2,r18,zero
 8004ef4:	056bc83a 	sub	r21,zero,r21
 8004ef8:	a8abc83a 	sub	r21,r21,r2
 8004efc:	04c00b44 	movi	r19,45
 8004f00:	dcc12785 	stb	r19,1182(sp)
 8004f04:	da413215 	stw	r9,1224(sp)
 8004f08:	00800044 	movi	r2,1
 8004f0c:	9546b03a 	or	r3,r18,r21
 8004f10:	003bb106 	br	8003dd8 <__alt_data_end+0xfc003dd8>
 8004f14:	da013f15 	stw	r8,1276(sp)
 8004f18:	da413e15 	stw	r9,1272(sp)
 8004f1c:	80095300 	call	8009530 <__fpclassifyd>
 8004f20:	da013f17 	ldw	r8,1276(sp)
 8004f24:	da413e17 	ldw	r9,1272(sp)
 8004f28:	1000e526 	beq	r2,zero,80052c0 <___vfprintf_internal_r+0x1a6c>
 8004f2c:	04fff7c4 	movi	r19,-33
 8004f30:	00bfffc4 	movi	r2,-1
 8004f34:	84e6703a 	and	r19,r16,r19
 8004f38:	48822926 	beq	r9,r2,80057e0 <___vfprintf_internal_r+0x1f8c>
 8004f3c:	008011c4 	movi	r2,71
 8004f40:	98821626 	beq	r19,r2,800579c <___vfprintf_internal_r+0x1f48>
 8004f44:	d9013917 	ldw	r4,1252(sp)
 8004f48:	e0c04014 	ori	r3,fp,256
 8004f4c:	d8c12d15 	stw	r3,1204(sp)
 8004f50:	20021f16 	blt	r4,zero,80057d0 <___vfprintf_internal_r+0x1f7c>
 8004f54:	dc413917 	ldw	r17,1252(sp)
 8004f58:	d8012b05 	stb	zero,1196(sp)
 8004f5c:	00801984 	movi	r2,102
 8004f60:	80814d26 	beq	r16,r2,8005498 <___vfprintf_internal_r+0x1c44>
 8004f64:	00801184 	movi	r2,70
 8004f68:	80814b26 	beq	r16,r2,8005498 <___vfprintf_internal_r+0x1c44>
 8004f6c:	00801144 	movi	r2,69
 8004f70:	98821d26 	beq	r19,r2,80057e8 <___vfprintf_internal_r+0x1f94>
 8004f74:	482b883a 	mov	r21,r9
 8004f78:	d8812604 	addi	r2,sp,1176
 8004f7c:	d8800115 	stw	r2,4(sp)
 8004f80:	d9413717 	ldw	r5,1244(sp)
 8004f84:	d8812504 	addi	r2,sp,1172
 8004f88:	d8800215 	stw	r2,8(sp)
 8004f8c:	d8812104 	addi	r2,sp,1156
 8004f90:	dd400015 	stw	r21,0(sp)
 8004f94:	d8800315 	stw	r2,12(sp)
 8004f98:	b809883a 	mov	r4,r23
 8004f9c:	880d883a 	mov	r6,r17
 8004fa0:	01c00084 	movi	r7,2
 8004fa4:	da013f15 	stw	r8,1276(sp)
 8004fa8:	da413e15 	stw	r9,1272(sp)
 8004fac:	8005d7c0 	call	8005d7c <_dtoa_r>
 8004fb0:	d8813115 	stw	r2,1220(sp)
 8004fb4:	008019c4 	movi	r2,103
 8004fb8:	da013f17 	ldw	r8,1276(sp)
 8004fbc:	da413e17 	ldw	r9,1272(sp)
 8004fc0:	80800226 	beq	r16,r2,8004fcc <___vfprintf_internal_r+0x1778>
 8004fc4:	008011c4 	movi	r2,71
 8004fc8:	8081451e 	bne	r16,r2,80054e0 <___vfprintf_internal_r+0x1c8c>
 8004fcc:	e080004c 	andi	r2,fp,1
 8004fd0:	10021e26 	beq	r2,zero,800584c <___vfprintf_internal_r+0x1ff8>
 8004fd4:	d8c13117 	ldw	r3,1220(sp)
 8004fd8:	1d55883a 	add	r10,r3,r21
 8004fdc:	d9013717 	ldw	r4,1244(sp)
 8004fe0:	880b883a 	mov	r5,r17
 8004fe4:	000d883a 	mov	r6,zero
 8004fe8:	000f883a 	mov	r7,zero
 8004fec:	da013f15 	stw	r8,1276(sp)
 8004ff0:	da413e15 	stw	r9,1272(sp)
 8004ff4:	da813d15 	stw	r10,1268(sp)
 8004ff8:	800d1940 	call	800d194 <__eqdf2>
 8004ffc:	da013f17 	ldw	r8,1276(sp)
 8005000:	da413e17 	ldw	r9,1272(sp)
 8005004:	da813d17 	ldw	r10,1268(sp)
 8005008:	1001a126 	beq	r2,zero,8005690 <___vfprintf_internal_r+0x1e3c>
 800500c:	d8812117 	ldw	r2,1156(sp)
 8005010:	1280062e 	bgeu	r2,r10,800502c <___vfprintf_internal_r+0x17d8>
 8005014:	01000c04 	movi	r4,48
 8005018:	10c00044 	addi	r3,r2,1
 800501c:	d8c12115 	stw	r3,1156(sp)
 8005020:	11000005 	stb	r4,0(r2)
 8005024:	d8812117 	ldw	r2,1156(sp)
 8005028:	12bffb36 	bltu	r2,r10,8005018 <__alt_data_end+0xfc005018>
 800502c:	d8c13117 	ldw	r3,1220(sp)
 8005030:	10c5c83a 	sub	r2,r2,r3
 8005034:	d8813315 	stw	r2,1228(sp)
 8005038:	008011c4 	movi	r2,71
 800503c:	98818926 	beq	r19,r2,8005664 <___vfprintf_internal_r+0x1e10>
 8005040:	00801944 	movi	r2,101
 8005044:	14023c0e 	bge	r2,r16,8005938 <___vfprintf_internal_r+0x20e4>
 8005048:	d8c12617 	ldw	r3,1176(sp)
 800504c:	00801984 	movi	r2,102
 8005050:	d8c13415 	stw	r3,1232(sp)
 8005054:	8081ef26 	beq	r16,r2,8005814 <___vfprintf_internal_r+0x1fc0>
 8005058:	d8c13417 	ldw	r3,1232(sp)
 800505c:	d9013317 	ldw	r4,1228(sp)
 8005060:	1901e316 	blt	r3,r4,80057f0 <___vfprintf_internal_r+0x1f9c>
 8005064:	e080004c 	andi	r2,fp,1
 8005068:	1001f426 	beq	r2,zero,800583c <___vfprintf_internal_r+0x1fe8>
 800506c:	d8c13417 	ldw	r3,1232(sp)
 8005070:	1c400044 	addi	r17,r3,1
 8005074:	8839883a 	mov	fp,r17
 8005078:	8801e416 	blt	r17,zero,800580c <___vfprintf_internal_r+0x1fb8>
 800507c:	dd412b07 	ldb	r21,1196(sp)
 8005080:	a801701e 	bne	r21,zero,8005644 <___vfprintf_internal_r+0x1df0>
 8005084:	df012b15 	stw	fp,1196(sp)
 8005088:	dcc12783 	ldbu	r19,1182(sp)
 800508c:	df012d17 	ldw	fp,1204(sp)
 8005090:	d8013215 	stw	zero,1224(sp)
 8005094:	dc812d15 	stw	r18,1204(sp)
 8005098:	003b6e06 	br	8003e54 <__alt_data_end+0xfc003e54>
 800509c:	e080040c 	andi	r2,fp,16
 80050a0:	1000b51e 	bne	r2,zero,8005378 <___vfprintf_internal_r+0x1b24>
 80050a4:	e080100c 	andi	r2,fp,64
 80050a8:	10015b26 	beq	r2,zero,8005618 <___vfprintf_internal_r+0x1dc4>
 80050ac:	d9012d17 	ldw	r4,1204(sp)
 80050b0:	d9412f17 	ldw	r5,1212(sp)
 80050b4:	20800017 	ldw	r2,0(r4)
 80050b8:	21000104 	addi	r4,r4,4
 80050bc:	d9012d15 	stw	r4,1204(sp)
 80050c0:	1140000d 	sth	r5,0(r2)
 80050c4:	003a2006 	br	8003948 <__alt_data_end+0xfc003948>
 80050c8:	e0c0100c 	andi	r3,fp,64
 80050cc:	1800a226 	beq	r3,zero,8005358 <___vfprintf_internal_r+0x1b04>
 80050d0:	d8c12d17 	ldw	r3,1204(sp)
 80050d4:	1480000b 	ldhu	r18,0(r2)
 80050d8:	002b883a 	mov	r21,zero
 80050dc:	18c00104 	addi	r3,r3,4
 80050e0:	d8c12d15 	stw	r3,1204(sp)
 80050e4:	0005883a 	mov	r2,zero
 80050e8:	9007883a 	mov	r3,r18
 80050ec:	003c6906 	br	8004294 <__alt_data_end+0xfc004294>
 80050f0:	e0c0100c 	andi	r3,fp,64
 80050f4:	18009026 	beq	r3,zero,8005338 <___vfprintf_internal_r+0x1ae4>
 80050f8:	1480000b 	ldhu	r18,0(r2)
 80050fc:	d8812d17 	ldw	r2,1204(sp)
 8005100:	002b883a 	mov	r21,zero
 8005104:	9007883a 	mov	r3,r18
 8005108:	10800104 	addi	r2,r2,4
 800510c:	d8812d15 	stw	r2,1204(sp)
 8005110:	00800044 	movi	r2,1
 8005114:	003c5f06 	br	8004294 <__alt_data_end+0xfc004294>
 8005118:	e0c0100c 	andi	r3,fp,64
 800511c:	18008026 	beq	r3,zero,8005320 <___vfprintf_internal_r+0x1acc>
 8005120:	d9012d17 	ldw	r4,1204(sp)
 8005124:	1480000b 	ldhu	r18,0(r2)
 8005128:	002b883a 	mov	r21,zero
 800512c:	21000104 	addi	r4,r4,4
 8005130:	d9012d15 	stw	r4,1204(sp)
 8005134:	003c7906 	br	800431c <__alt_data_end+0xfc00431c>
 8005138:	e080100c 	andi	r2,fp,64
 800513c:	10007126 	beq	r2,zero,8005304 <___vfprintf_internal_r+0x1ab0>
 8005140:	1c80000f 	ldh	r18,0(r3)
 8005144:	d8812d17 	ldw	r2,1204(sp)
 8005148:	902bd7fa 	srai	r21,r18,31
 800514c:	10800104 	addi	r2,r2,4
 8005150:	d8812d15 	stw	r2,1204(sp)
 8005154:	a805883a 	mov	r2,r21
 8005158:	003b1a06 	br	8003dc4 <__alt_data_end+0xfc003dc4>
 800515c:	e4000007 	ldb	r16,0(fp)
 8005160:	e005883a 	mov	r2,fp
 8005164:	003a2306 	br	80039f4 <__alt_data_end+0xfc0039f4>
 8005168:	00800084 	movi	r2,2
 800516c:	003c4906 	br	8004294 <__alt_data_end+0xfc004294>
 8005170:	01020074 	movhi	r4,2049
 8005174:	21070484 	addi	r4,r4,7186
 8005178:	d9012c15 	stw	r4,1200(sp)
 800517c:	d9012c17 	ldw	r4,1200(sp)
 8005180:	1c47883a 	add	r3,r3,r17
 8005184:	10800044 	addi	r2,r2,1
 8005188:	41000015 	stw	r4,0(r8)
 800518c:	44400115 	stw	r17,4(r8)
 8005190:	d8c12015 	stw	r3,1152(sp)
 8005194:	d8811f15 	stw	r2,1148(sp)
 8005198:	010001c4 	movi	r4,7
 800519c:	20becc16 	blt	r4,r2,8004cd0 <__alt_data_end+0xfc004cd0>
 80051a0:	42000204 	addi	r8,r8,8
 80051a4:	003ed106 	br	8004cec <__alt_data_end+0xfc004cec>
 80051a8:	01020074 	movhi	r4,2049
 80051ac:	21070484 	addi	r4,r4,7186
 80051b0:	d9012c15 	stw	r4,1200(sp)
 80051b4:	003ba306 	br	8004044 <__alt_data_end+0xfc004044>
 80051b8:	b809883a 	mov	r4,r23
 80051bc:	b00b883a 	mov	r5,r22
 80051c0:	d9811e04 	addi	r6,sp,1144
 80051c4:	80097440 	call	8009744 <__sprint_r>
 80051c8:	103aba1e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 80051cc:	d8c12017 	ldw	r3,1152(sp)
 80051d0:	da000404 	addi	r8,sp,16
 80051d4:	003d6c06 	br	8004788 <__alt_data_end+0xfc004788>
 80051d8:	d8811f17 	ldw	r2,1148(sp)
 80051dc:	01420074 	movhi	r5,2049
 80051e0:	01000044 	movi	r4,1
 80051e4:	18c00044 	addi	r3,r3,1
 80051e8:	10800044 	addi	r2,r2,1
 80051ec:	29470404 	addi	r5,r5,7184
 80051f0:	41000115 	stw	r4,4(r8)
 80051f4:	41400015 	stw	r5,0(r8)
 80051f8:	d8c12015 	stw	r3,1152(sp)
 80051fc:	d8811f15 	stw	r2,1148(sp)
 8005200:	010001c4 	movi	r4,7
 8005204:	20806716 	blt	r4,r2,80053a4 <___vfprintf_internal_r+0x1b50>
 8005208:	42000204 	addi	r8,r8,8
 800520c:	8000041e 	bne	r16,zero,8005220 <___vfprintf_internal_r+0x19cc>
 8005210:	d8813317 	ldw	r2,1228(sp)
 8005214:	1000021e 	bne	r2,zero,8005220 <___vfprintf_internal_r+0x19cc>
 8005218:	e080004c 	andi	r2,fp,1
 800521c:	103ba026 	beq	r2,zero,80040a0 <__alt_data_end+0xfc0040a0>
 8005220:	d9013817 	ldw	r4,1248(sp)
 8005224:	d8811f17 	ldw	r2,1148(sp)
 8005228:	d9413517 	ldw	r5,1236(sp)
 800522c:	1907883a 	add	r3,r3,r4
 8005230:	10800044 	addi	r2,r2,1
 8005234:	41000115 	stw	r4,4(r8)
 8005238:	41400015 	stw	r5,0(r8)
 800523c:	d8c12015 	stw	r3,1152(sp)
 8005240:	d8811f15 	stw	r2,1148(sp)
 8005244:	010001c4 	movi	r4,7
 8005248:	20815716 	blt	r4,r2,80057a8 <___vfprintf_internal_r+0x1f54>
 800524c:	42000204 	addi	r8,r8,8
 8005250:	0421c83a 	sub	r16,zero,r16
 8005254:	0400810e 	bge	zero,r16,800545c <___vfprintf_internal_r+0x1c08>
 8005258:	04400404 	movi	r17,16
 800525c:	8c00bd0e 	bge	r17,r16,8005554 <___vfprintf_internal_r+0x1d00>
 8005260:	01420074 	movhi	r5,2049
 8005264:	29470484 	addi	r5,r5,7186
 8005268:	d9412c15 	stw	r5,1200(sp)
 800526c:	04c001c4 	movi	r19,7
 8005270:	00000306 	br	8005280 <___vfprintf_internal_r+0x1a2c>
 8005274:	42000204 	addi	r8,r8,8
 8005278:	843ffc04 	addi	r16,r16,-16
 800527c:	8c00b80e 	bge	r17,r16,8005560 <___vfprintf_internal_r+0x1d0c>
 8005280:	18c00404 	addi	r3,r3,16
 8005284:	10800044 	addi	r2,r2,1
 8005288:	45000015 	stw	r20,0(r8)
 800528c:	44400115 	stw	r17,4(r8)
 8005290:	d8c12015 	stw	r3,1152(sp)
 8005294:	d8811f15 	stw	r2,1148(sp)
 8005298:	98bff60e 	bge	r19,r2,8005274 <__alt_data_end+0xfc005274>
 800529c:	b809883a 	mov	r4,r23
 80052a0:	b00b883a 	mov	r5,r22
 80052a4:	d9811e04 	addi	r6,sp,1144
 80052a8:	80097440 	call	8009744 <__sprint_r>
 80052ac:	103a811e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 80052b0:	d8c12017 	ldw	r3,1152(sp)
 80052b4:	d8811f17 	ldw	r2,1148(sp)
 80052b8:	da000404 	addi	r8,sp,16
 80052bc:	003fee06 	br	8005278 <__alt_data_end+0xfc005278>
 80052c0:	008011c4 	movi	r2,71
 80052c4:	1400db16 	blt	r2,r16,8005634 <___vfprintf_internal_r+0x1de0>
 80052c8:	01020074 	movhi	r4,2049
 80052cc:	2106f604 	addi	r4,r4,7128
 80052d0:	d9013115 	stw	r4,1220(sp)
 80052d4:	00c000c4 	movi	r3,3
 80052d8:	00bfdfc4 	movi	r2,-129
 80052dc:	d8c12b15 	stw	r3,1196(sp)
 80052e0:	e0b8703a 	and	fp,fp,r2
 80052e4:	dcc12783 	ldbu	r19,1182(sp)
 80052e8:	dc812d15 	stw	r18,1204(sp)
 80052ec:	1823883a 	mov	r17,r3
 80052f0:	d8013215 	stw	zero,1224(sp)
 80052f4:	d8013415 	stw	zero,1232(sp)
 80052f8:	003ad606 	br	8003e54 <__alt_data_end+0xfc003e54>
 80052fc:	4823883a 	mov	r17,r9
 8005300:	003cc906 	br	8004628 <__alt_data_end+0xfc004628>
 8005304:	1c800017 	ldw	r18,0(r3)
 8005308:	d8c12d17 	ldw	r3,1204(sp)
 800530c:	902bd7fa 	srai	r21,r18,31
 8005310:	18c00104 	addi	r3,r3,4
 8005314:	d8c12d15 	stw	r3,1204(sp)
 8005318:	a805883a 	mov	r2,r21
 800531c:	003aa906 	br	8003dc4 <__alt_data_end+0xfc003dc4>
 8005320:	d9412d17 	ldw	r5,1204(sp)
 8005324:	14800017 	ldw	r18,0(r2)
 8005328:	002b883a 	mov	r21,zero
 800532c:	29400104 	addi	r5,r5,4
 8005330:	d9412d15 	stw	r5,1204(sp)
 8005334:	003bf906 	br	800431c <__alt_data_end+0xfc00431c>
 8005338:	d8c12d17 	ldw	r3,1204(sp)
 800533c:	14800017 	ldw	r18,0(r2)
 8005340:	002b883a 	mov	r21,zero
 8005344:	18c00104 	addi	r3,r3,4
 8005348:	d8c12d15 	stw	r3,1204(sp)
 800534c:	00800044 	movi	r2,1
 8005350:	9007883a 	mov	r3,r18
 8005354:	003bcf06 	br	8004294 <__alt_data_end+0xfc004294>
 8005358:	d9012d17 	ldw	r4,1204(sp)
 800535c:	14800017 	ldw	r18,0(r2)
 8005360:	002b883a 	mov	r21,zero
 8005364:	21000104 	addi	r4,r4,4
 8005368:	d9012d15 	stw	r4,1204(sp)
 800536c:	0005883a 	mov	r2,zero
 8005370:	9007883a 	mov	r3,r18
 8005374:	003bc706 	br	8004294 <__alt_data_end+0xfc004294>
 8005378:	d9412d17 	ldw	r5,1204(sp)
 800537c:	d8c12f17 	ldw	r3,1212(sp)
 8005380:	28800017 	ldw	r2,0(r5)
 8005384:	29400104 	addi	r5,r5,4
 8005388:	d9412d15 	stw	r5,1204(sp)
 800538c:	10c00015 	stw	r3,0(r2)
 8005390:	00396d06 	br	8003948 <__alt_data_end+0xfc003948>
 8005394:	01020074 	movhi	r4,2049
 8005398:	2106f404 	addi	r4,r4,7120
 800539c:	d9013115 	stw	r4,1220(sp)
 80053a0:	003ba206 	br	800422c <__alt_data_end+0xfc00422c>
 80053a4:	b809883a 	mov	r4,r23
 80053a8:	b00b883a 	mov	r5,r22
 80053ac:	d9811e04 	addi	r6,sp,1144
 80053b0:	80097440 	call	8009744 <__sprint_r>
 80053b4:	103a3f1e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 80053b8:	dc012617 	ldw	r16,1176(sp)
 80053bc:	d8c12017 	ldw	r3,1152(sp)
 80053c0:	da000404 	addi	r8,sp,16
 80053c4:	003f9106 	br	800520c <__alt_data_end+0xfc00520c>
 80053c8:	e0800044 	addi	r2,fp,1
 80053cc:	9cc00814 	ori	r19,r19,32
 80053d0:	e4000047 	ldb	r16,1(fp)
 80053d4:	00398706 	br	80039f4 <__alt_data_end+0xfc0039f4>
 80053d8:	d8812e17 	ldw	r2,1208(sp)
 80053dc:	d8c12d15 	stw	r3,1204(sp)
 80053e0:	0085c83a 	sub	r2,zero,r2
 80053e4:	d8812e15 	stw	r2,1208(sp)
 80053e8:	e005883a 	mov	r2,fp
 80053ec:	003a3a06 	br	8003cd8 <__alt_data_end+0xfc003cd8>
 80053f0:	b809883a 	mov	r4,r23
 80053f4:	b00b883a 	mov	r5,r22
 80053f8:	d9811e04 	addi	r6,sp,1144
 80053fc:	80097440 	call	8009744 <__sprint_r>
 8005400:	103a2c1e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8005404:	d8c12017 	ldw	r3,1152(sp)
 8005408:	da000404 	addi	r8,sp,16
 800540c:	003cf006 	br	80047d0 <__alt_data_end+0xfc0047d0>
 8005410:	d8c12817 	ldw	r3,1184(sp)
 8005414:	d9013117 	ldw	r4,1220(sp)
 8005418:	1923c83a 	sub	r17,r3,r4
 800541c:	003a8806 	br	8003e40 <__alt_data_end+0xfc003e40>
 8005420:	da013f15 	stw	r8,1276(sp)
 8005424:	80034700 	call	8003470 <strlen>
 8005428:	1023883a 	mov	r17,r2
 800542c:	da013f17 	ldw	r8,1276(sp)
 8005430:	883c7f0e 	bge	r17,zero,8004630 <__alt_data_end+0xfc004630>
 8005434:	0005883a 	mov	r2,zero
 8005438:	003c7d06 	br	8004630 <__alt_data_end+0xfc004630>
 800543c:	b809883a 	mov	r4,r23
 8005440:	b00b883a 	mov	r5,r22
 8005444:	d9811e04 	addi	r6,sp,1144
 8005448:	80097440 	call	8009744 <__sprint_r>
 800544c:	103a191e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8005450:	d8c12017 	ldw	r3,1152(sp)
 8005454:	d8811f17 	ldw	r2,1148(sp)
 8005458:	da000404 	addi	r8,sp,16
 800545c:	d9413317 	ldw	r5,1228(sp)
 8005460:	d9013117 	ldw	r4,1220(sp)
 8005464:	10800044 	addi	r2,r2,1
 8005468:	28c7883a 	add	r3,r5,r3
 800546c:	41000015 	stw	r4,0(r8)
 8005470:	41400115 	stw	r5,4(r8)
 8005474:	d8c12015 	stw	r3,1152(sp)
 8005478:	d8811f15 	stw	r2,1148(sp)
 800547c:	010001c4 	movi	r4,7
 8005480:	20bb060e 	bge	r4,r2,800409c <__alt_data_end+0xfc00409c>
 8005484:	003d6206 	br	8004a10 <__alt_data_end+0xfc004a10>
 8005488:	01020074 	movhi	r4,2049
 800548c:	21070884 	addi	r4,r4,7202
 8005490:	d9013615 	stw	r4,1240(sp)
 8005494:	003aa306 	br	8003f24 <__alt_data_end+0xfc003f24>
 8005498:	d8812604 	addi	r2,sp,1176
 800549c:	d8800115 	stw	r2,4(sp)
 80054a0:	d9413717 	ldw	r5,1244(sp)
 80054a4:	d8812504 	addi	r2,sp,1172
 80054a8:	d8800215 	stw	r2,8(sp)
 80054ac:	d8812104 	addi	r2,sp,1156
 80054b0:	da400015 	stw	r9,0(sp)
 80054b4:	d8800315 	stw	r2,12(sp)
 80054b8:	b809883a 	mov	r4,r23
 80054bc:	880d883a 	mov	r6,r17
 80054c0:	01c000c4 	movi	r7,3
 80054c4:	da013f15 	stw	r8,1276(sp)
 80054c8:	da413e15 	stw	r9,1272(sp)
 80054cc:	8005d7c0 	call	8005d7c <_dtoa_r>
 80054d0:	da413e17 	ldw	r9,1272(sp)
 80054d4:	da013f17 	ldw	r8,1276(sp)
 80054d8:	d8813115 	stw	r2,1220(sp)
 80054dc:	482b883a 	mov	r21,r9
 80054e0:	d8c13117 	ldw	r3,1220(sp)
 80054e4:	00801184 	movi	r2,70
 80054e8:	1d55883a 	add	r10,r3,r21
 80054ec:	98bebb1e 	bne	r19,r2,8004fdc <__alt_data_end+0xfc004fdc>
 80054f0:	19000007 	ldb	r4,0(r3)
 80054f4:	00800c04 	movi	r2,48
 80054f8:	2080dd26 	beq	r4,r2,8005870 <___vfprintf_internal_r+0x201c>
 80054fc:	d8c12617 	ldw	r3,1176(sp)
 8005500:	50d5883a 	add	r10,r10,r3
 8005504:	003eb506 	br	8004fdc <__alt_data_end+0xfc004fdc>
 8005508:	0023883a 	mov	r17,zero
 800550c:	003d9b06 	br	8004b7c <__alt_data_end+0xfc004b7c>
 8005510:	b809883a 	mov	r4,r23
 8005514:	b00b883a 	mov	r5,r22
 8005518:	d9811e04 	addi	r6,sp,1144
 800551c:	80097440 	call	8009744 <__sprint_r>
 8005520:	1039e41e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8005524:	d8c12017 	ldw	r3,1152(sp)
 8005528:	da000404 	addi	r8,sp,16
 800552c:	003d9206 	br	8004b78 <__alt_data_end+0xfc004b78>
 8005530:	b809883a 	mov	r4,r23
 8005534:	b00b883a 	mov	r5,r22
 8005538:	d9811e04 	addi	r6,sp,1144
 800553c:	80097440 	call	8009744 <__sprint_r>
 8005540:	1039dc1e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 8005544:	d8812617 	ldw	r2,1176(sp)
 8005548:	d8c12017 	ldw	r3,1152(sp)
 800554c:	da000404 	addi	r8,sp,16
 8005550:	003dfb06 	br	8004d40 <__alt_data_end+0xfc004d40>
 8005554:	01020074 	movhi	r4,2049
 8005558:	21070484 	addi	r4,r4,7186
 800555c:	d9012c15 	stw	r4,1200(sp)
 8005560:	d9012c17 	ldw	r4,1200(sp)
 8005564:	1c07883a 	add	r3,r3,r16
 8005568:	10800044 	addi	r2,r2,1
 800556c:	41000015 	stw	r4,0(r8)
 8005570:	44000115 	stw	r16,4(r8)
 8005574:	d8c12015 	stw	r3,1152(sp)
 8005578:	d8811f15 	stw	r2,1148(sp)
 800557c:	010001c4 	movi	r4,7
 8005580:	20bfae16 	blt	r4,r2,800543c <__alt_data_end+0xfc00543c>
 8005584:	42000204 	addi	r8,r8,8
 8005588:	003fb406 	br	800545c <__alt_data_end+0xfc00545c>
 800558c:	0021883a 	mov	r16,zero
 8005590:	003dfd06 	br	8004d88 <__alt_data_end+0xfc004d88>
 8005594:	01420074 	movhi	r5,2049
 8005598:	29470884 	addi	r5,r5,7202
 800559c:	d9413615 	stw	r5,1240(sp)
 80055a0:	003ae306 	br	8004130 <__alt_data_end+0xfc004130>
 80055a4:	b809883a 	mov	r4,r23
 80055a8:	b00b883a 	mov	r5,r22
 80055ac:	d9811e04 	addi	r6,sp,1144
 80055b0:	80097440 	call	8009744 <__sprint_r>
 80055b4:	1039bf1e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 80055b8:	d8812617 	ldw	r2,1176(sp)
 80055bc:	d9413317 	ldw	r5,1228(sp)
 80055c0:	d8c12017 	ldw	r3,1152(sp)
 80055c4:	da000404 	addi	r8,sp,16
 80055c8:	2885c83a 	sub	r2,r5,r2
 80055cc:	003ded06 	br	8004d84 <__alt_data_end+0xfc004d84>
 80055d0:	00800184 	movi	r2,6
 80055d4:	1240012e 	bgeu	r2,r9,80055dc <___vfprintf_internal_r+0x1d88>
 80055d8:	1013883a 	mov	r9,r2
 80055dc:	4823883a 	mov	r17,r9
 80055e0:	4805883a 	mov	r2,r9
 80055e4:	4800b216 	blt	r9,zero,80058b0 <___vfprintf_internal_r+0x205c>
 80055e8:	01420074 	movhi	r5,2049
 80055ec:	29470204 	addi	r5,r5,7176
 80055f0:	d8812b15 	stw	r2,1196(sp)
 80055f4:	dc812d15 	stw	r18,1204(sp)
 80055f8:	d8013215 	stw	zero,1224(sp)
 80055fc:	d8013415 	stw	zero,1232(sp)
 8005600:	d9413115 	stw	r5,1220(sp)
 8005604:	0005883a 	mov	r2,zero
 8005608:	003a1906 	br	8003e70 <__alt_data_end+0xfc003e70>
 800560c:	04c00b44 	movi	r19,45
 8005610:	dcc12785 	stb	r19,1182(sp)
 8005614:	003b0006 	br	8004218 <__alt_data_end+0xfc004218>
 8005618:	d8c12d17 	ldw	r3,1204(sp)
 800561c:	d9012f17 	ldw	r4,1212(sp)
 8005620:	18800017 	ldw	r2,0(r3)
 8005624:	18c00104 	addi	r3,r3,4
 8005628:	d8c12d15 	stw	r3,1204(sp)
 800562c:	11000015 	stw	r4,0(r2)
 8005630:	0038c506 	br	8003948 <__alt_data_end+0xfc003948>
 8005634:	01420074 	movhi	r5,2049
 8005638:	2946f704 	addi	r5,r5,7132
 800563c:	d9413115 	stw	r5,1220(sp)
 8005640:	003f2406 	br	80052d4 <__alt_data_end+0xfc0052d4>
 8005644:	00800b44 	movi	r2,45
 8005648:	d8812785 	stb	r2,1182(sp)
 800564c:	df012b15 	stw	fp,1196(sp)
 8005650:	d8013215 	stw	zero,1224(sp)
 8005654:	df012d17 	ldw	fp,1204(sp)
 8005658:	00800b44 	movi	r2,45
 800565c:	dc812d15 	stw	r18,1204(sp)
 8005660:	003a0006 	br	8003e64 <__alt_data_end+0xfc003e64>
 8005664:	d8c12617 	ldw	r3,1176(sp)
 8005668:	00bfff44 	movi	r2,-3
 800566c:	18800a16 	blt	r3,r2,8005698 <___vfprintf_internal_r+0x1e44>
 8005670:	48c00916 	blt	r9,r3,8005698 <___vfprintf_internal_r+0x1e44>
 8005674:	d8c13415 	stw	r3,1232(sp)
 8005678:	040019c4 	movi	r16,103
 800567c:	003e7606 	br	8005058 <__alt_data_end+0xfc005058>
 8005680:	01020074 	movhi	r4,2049
 8005684:	21070484 	addi	r4,r4,7186
 8005688:	d9012c15 	stw	r4,1200(sp)
 800568c:	003c8e06 	br	80048c8 <__alt_data_end+0xfc0048c8>
 8005690:	5005883a 	mov	r2,r10
 8005694:	003e6506 	br	800502c <__alt_data_end+0xfc00502c>
 8005698:	843fff84 	addi	r16,r16,-2
 800569c:	1d7fffc4 	addi	r21,r3,-1
 80056a0:	dd412615 	stw	r21,1176(sp)
 80056a4:	dc0122c5 	stb	r16,1163(sp)
 80056a8:	a8009216 	blt	r21,zero,80058f4 <___vfprintf_internal_r+0x20a0>
 80056ac:	00800ac4 	movi	r2,43
 80056b0:	d8812305 	stb	r2,1164(sp)
 80056b4:	00800244 	movi	r2,9
 80056b8:	1540660e 	bge	r2,r21,8005854 <___vfprintf_internal_r+0x2000>
 80056bc:	dcc122c4 	addi	r19,sp,1163
 80056c0:	dc012c15 	stw	r16,1200(sp)
 80056c4:	4023883a 	mov	r17,r8
 80056c8:	9821883a 	mov	r16,r19
 80056cc:	a809883a 	mov	r4,r21
 80056d0:	01400284 	movi	r5,10
 80056d4:	800bee40 	call	800bee4 <__modsi3>
 80056d8:	10800c04 	addi	r2,r2,48
 80056dc:	843fffc4 	addi	r16,r16,-1
 80056e0:	a809883a 	mov	r4,r21
 80056e4:	01400284 	movi	r5,10
 80056e8:	80800005 	stb	r2,0(r16)
 80056ec:	800be900 	call	800be90 <__divsi3>
 80056f0:	01000244 	movi	r4,9
 80056f4:	102b883a 	mov	r21,r2
 80056f8:	20bff416 	blt	r4,r2,80056cc <__alt_data_end+0xfc0056cc>
 80056fc:	8811883a 	mov	r8,r17
 8005700:	10800c04 	addi	r2,r2,48
 8005704:	8023883a 	mov	r17,r16
 8005708:	897fffc4 	addi	r5,r17,-1
 800570c:	88bfffc5 	stb	r2,-1(r17)
 8005710:	dc012c17 	ldw	r16,1200(sp)
 8005714:	2cc08a2e 	bgeu	r5,r19,8005940 <___vfprintf_internal_r+0x20ec>
 8005718:	d9812384 	addi	r6,sp,1166
 800571c:	344dc83a 	sub	r6,r6,r17
 8005720:	d9012344 	addi	r4,sp,1165
 8005724:	998d883a 	add	r6,r19,r6
 8005728:	00000106 	br	8005730 <___vfprintf_internal_r+0x1edc>
 800572c:	28800003 	ldbu	r2,0(r5)
 8005730:	20800005 	stb	r2,0(r4)
 8005734:	21000044 	addi	r4,r4,1
 8005738:	29400044 	addi	r5,r5,1
 800573c:	21bffb1e 	bne	r4,r6,800572c <__alt_data_end+0xfc00572c>
 8005740:	d8812304 	addi	r2,sp,1164
 8005744:	1445c83a 	sub	r2,r2,r17
 8005748:	d9412344 	addi	r5,sp,1165
 800574c:	2885883a 	add	r2,r5,r2
 8005750:	14e7c83a 	sub	r19,r2,r19
 8005754:	d8813317 	ldw	r2,1228(sp)
 8005758:	d8c13317 	ldw	r3,1228(sp)
 800575c:	dcc13a15 	stw	r19,1256(sp)
 8005760:	14e3883a 	add	r17,r2,r19
 8005764:	00800044 	movi	r2,1
 8005768:	10c0550e 	bge	r2,r3,80058c0 <___vfprintf_internal_r+0x206c>
 800576c:	8c400044 	addi	r17,r17,1
 8005770:	8839883a 	mov	fp,r17
 8005774:	88005016 	blt	r17,zero,80058b8 <___vfprintf_internal_r+0x2064>
 8005778:	d8013415 	stw	zero,1232(sp)
 800577c:	003e3f06 	br	800507c <__alt_data_end+0xfc00507c>
 8005780:	da412b15 	stw	r9,1196(sp)
 8005784:	dcc12783 	ldbu	r19,1182(sp)
 8005788:	4823883a 	mov	r17,r9
 800578c:	dc812d15 	stw	r18,1204(sp)
 8005790:	d8013215 	stw	zero,1224(sp)
 8005794:	d8013415 	stw	zero,1232(sp)
 8005798:	0039ae06 	br	8003e54 <__alt_data_end+0xfc003e54>
 800579c:	483de91e 	bne	r9,zero,8004f44 <__alt_data_end+0xfc004f44>
 80057a0:	8813883a 	mov	r9,r17
 80057a4:	003de706 	br	8004f44 <__alt_data_end+0xfc004f44>
 80057a8:	b809883a 	mov	r4,r23
 80057ac:	b00b883a 	mov	r5,r22
 80057b0:	d9811e04 	addi	r6,sp,1144
 80057b4:	80097440 	call	8009744 <__sprint_r>
 80057b8:	10393e1e 	bne	r2,zero,8003cb4 <__alt_data_end+0xfc003cb4>
 80057bc:	dc012617 	ldw	r16,1176(sp)
 80057c0:	d8c12017 	ldw	r3,1152(sp)
 80057c4:	d8811f17 	ldw	r2,1148(sp)
 80057c8:	da000404 	addi	r8,sp,16
 80057cc:	003ea006 	br	8005250 <__alt_data_end+0xfc005250>
 80057d0:	00c00b44 	movi	r3,45
 80057d4:	2460003c 	xorhi	r17,r4,32768
 80057d8:	d8c12b05 	stb	r3,1196(sp)
 80057dc:	003ddf06 	br	8004f5c <__alt_data_end+0xfc004f5c>
 80057e0:	02400184 	movi	r9,6
 80057e4:	003dd706 	br	8004f44 <__alt_data_end+0xfc004f44>
 80057e8:	4d400044 	addi	r21,r9,1
 80057ec:	003de206 	br	8004f78 <__alt_data_end+0xfc004f78>
 80057f0:	d8c13417 	ldw	r3,1232(sp)
 80057f4:	00c0490e 	bge	zero,r3,800591c <___vfprintf_internal_r+0x20c8>
 80057f8:	04400044 	movi	r17,1
 80057fc:	d9013317 	ldw	r4,1228(sp)
 8005800:	8923883a 	add	r17,r17,r4
 8005804:	8839883a 	mov	fp,r17
 8005808:	883e1c0e 	bge	r17,zero,800507c <__alt_data_end+0xfc00507c>
 800580c:	0039883a 	mov	fp,zero
 8005810:	003e1a06 	br	800507c <__alt_data_end+0xfc00507c>
 8005814:	00c03b0e 	bge	zero,r3,8005904 <___vfprintf_internal_r+0x20b0>
 8005818:	4800021e 	bne	r9,zero,8005824 <___vfprintf_internal_r+0x1fd0>
 800581c:	e080004c 	andi	r2,fp,1
 8005820:	10000626 	beq	r2,zero,800583c <___vfprintf_internal_r+0x1fe8>
 8005824:	d8c13417 	ldw	r3,1232(sp)
 8005828:	4a400044 	addi	r9,r9,1
 800582c:	1a63883a 	add	r17,r3,r9
 8005830:	8839883a 	mov	fp,r17
 8005834:	883e110e 	bge	r17,zero,800507c <__alt_data_end+0xfc00507c>
 8005838:	003ff406 	br	800580c <__alt_data_end+0xfc00580c>
 800583c:	1839883a 	mov	fp,r3
 8005840:	18004116 	blt	r3,zero,8005948 <___vfprintf_internal_r+0x20f4>
 8005844:	dc413417 	ldw	r17,1232(sp)
 8005848:	003e0c06 	br	800507c <__alt_data_end+0xfc00507c>
 800584c:	d8812117 	ldw	r2,1156(sp)
 8005850:	003df606 	br	800502c <__alt_data_end+0xfc00502c>
 8005854:	00800c04 	movi	r2,48
 8005858:	a8c00c04 	addi	r3,r21,48
 800585c:	d8812345 	stb	r2,1165(sp)
 8005860:	d8c12385 	stb	r3,1166(sp)
 8005864:	d88123c4 	addi	r2,sp,1167
 8005868:	dcc122c4 	addi	r19,sp,1163
 800586c:	003fb806 	br	8005750 <__alt_data_end+0xfc005750>
 8005870:	d9013717 	ldw	r4,1244(sp)
 8005874:	880b883a 	mov	r5,r17
 8005878:	000d883a 	mov	r6,zero
 800587c:	000f883a 	mov	r7,zero
 8005880:	da013f15 	stw	r8,1276(sp)
 8005884:	da413e15 	stw	r9,1272(sp)
 8005888:	da813d15 	stw	r10,1268(sp)
 800588c:	800d1940 	call	800d194 <__eqdf2>
 8005890:	da013f17 	ldw	r8,1276(sp)
 8005894:	da413e17 	ldw	r9,1272(sp)
 8005898:	da813d17 	ldw	r10,1268(sp)
 800589c:	103f1726 	beq	r2,zero,80054fc <__alt_data_end+0xfc0054fc>
 80058a0:	00800044 	movi	r2,1
 80058a4:	1547c83a 	sub	r3,r2,r21
 80058a8:	d8c12615 	stw	r3,1176(sp)
 80058ac:	003f1406 	br	8005500 <__alt_data_end+0xfc005500>
 80058b0:	0005883a 	mov	r2,zero
 80058b4:	003f4c06 	br	80055e8 <__alt_data_end+0xfc0055e8>
 80058b8:	0039883a 	mov	fp,zero
 80058bc:	003fae06 	br	8005778 <__alt_data_end+0xfc005778>
 80058c0:	e084703a 	and	r2,fp,r2
 80058c4:	103faa26 	beq	r2,zero,8005770 <__alt_data_end+0xfc005770>
 80058c8:	003fa806 	br	800576c <__alt_data_end+0xfc00576c>
 80058cc:	d9412d17 	ldw	r5,1204(sp)
 80058d0:	2a400017 	ldw	r9,0(r5)
 80058d4:	28c00104 	addi	r3,r5,4
 80058d8:	d8c12d15 	stw	r3,1204(sp)
 80058dc:	483ebc0e 	bge	r9,zero,80053d0 <__alt_data_end+0xfc0053d0>
 80058e0:	027fffc4 	movi	r9,-1
 80058e4:	e4000047 	ldb	r16,1(fp)
 80058e8:	00384206 	br	80039f4 <__alt_data_end+0xfc0039f4>
 80058ec:	043fffc4 	movi	r16,-1
 80058f0:	0038ce06 	br	8003c2c <__alt_data_end+0xfc003c2c>
 80058f4:	00800b44 	movi	r2,45
 80058f8:	056bc83a 	sub	r21,zero,r21
 80058fc:	d8812305 	stb	r2,1164(sp)
 8005900:	003f6c06 	br	80056b4 <__alt_data_end+0xfc0056b4>
 8005904:	4800081e 	bne	r9,zero,8005928 <___vfprintf_internal_r+0x20d4>
 8005908:	e080004c 	andi	r2,fp,1
 800590c:	1000061e 	bne	r2,zero,8005928 <___vfprintf_internal_r+0x20d4>
 8005910:	07000044 	movi	fp,1
 8005914:	e023883a 	mov	r17,fp
 8005918:	003dd806 	br	800507c <__alt_data_end+0xfc00507c>
 800591c:	04400084 	movi	r17,2
 8005920:	88e3c83a 	sub	r17,r17,r3
 8005924:	003fb506 	br	80057fc <__alt_data_end+0xfc0057fc>
 8005928:	4c400084 	addi	r17,r9,2
 800592c:	8839883a 	mov	fp,r17
 8005930:	883dd20e 	bge	r17,zero,800507c <__alt_data_end+0xfc00507c>
 8005934:	003fb506 	br	800580c <__alt_data_end+0xfc00580c>
 8005938:	d8c12617 	ldw	r3,1176(sp)
 800593c:	003f5706 	br	800569c <__alt_data_end+0xfc00569c>
 8005940:	d8812344 	addi	r2,sp,1165
 8005944:	003f8206 	br	8005750 <__alt_data_end+0xfc005750>
 8005948:	0039883a 	mov	fp,zero
 800594c:	003fbd06 	br	8005844 <__alt_data_end+0xfc005844>

08005950 <__vfprintf_internal>:
 8005950:	2007883a 	mov	r3,r4
 8005954:	01020074 	movhi	r4,2049
 8005958:	210f3204 	addi	r4,r4,15560
 800595c:	21000017 	ldw	r4,0(r4)
 8005960:	2805883a 	mov	r2,r5
 8005964:	300f883a 	mov	r7,r6
 8005968:	180b883a 	mov	r5,r3
 800596c:	100d883a 	mov	r6,r2
 8005970:	80038541 	jmpi	8003854 <___vfprintf_internal_r>

08005974 <_write_r>:
 8005974:	defffd04 	addi	sp,sp,-12
 8005978:	dc000015 	stw	r16,0(sp)
 800597c:	04020074 	movhi	r16,2049
 8005980:	dc400115 	stw	r17,4(sp)
 8005984:	84162f04 	addi	r16,r16,22716
 8005988:	2023883a 	mov	r17,r4
 800598c:	2809883a 	mov	r4,r5
 8005990:	300b883a 	mov	r5,r6
 8005994:	380d883a 	mov	r6,r7
 8005998:	dfc00215 	stw	ra,8(sp)
 800599c:	80000015 	stw	zero,0(r16)
 80059a0:	800f33c0 	call	800f33c <write>
 80059a4:	00ffffc4 	movi	r3,-1
 80059a8:	10c00526 	beq	r2,r3,80059c0 <_write_r+0x4c>
 80059ac:	dfc00217 	ldw	ra,8(sp)
 80059b0:	dc400117 	ldw	r17,4(sp)
 80059b4:	dc000017 	ldw	r16,0(sp)
 80059b8:	dec00304 	addi	sp,sp,12
 80059bc:	f800283a 	ret
 80059c0:	80c00017 	ldw	r3,0(r16)
 80059c4:	183ff926 	beq	r3,zero,80059ac <__alt_data_end+0xfc0059ac>
 80059c8:	88c00015 	stw	r3,0(r17)
 80059cc:	003ff706 	br	80059ac <__alt_data_end+0xfc0059ac>

080059d0 <__swsetup_r>:
 80059d0:	00820074 	movhi	r2,2049
 80059d4:	defffd04 	addi	sp,sp,-12
 80059d8:	108f3204 	addi	r2,r2,15560
 80059dc:	dc400115 	stw	r17,4(sp)
 80059e0:	2023883a 	mov	r17,r4
 80059e4:	11000017 	ldw	r4,0(r2)
 80059e8:	dc000015 	stw	r16,0(sp)
 80059ec:	dfc00215 	stw	ra,8(sp)
 80059f0:	2821883a 	mov	r16,r5
 80059f4:	20000226 	beq	r4,zero,8005a00 <__swsetup_r+0x30>
 80059f8:	20c00e17 	ldw	r3,56(r4)
 80059fc:	18002e26 	beq	r3,zero,8005ab8 <__swsetup_r+0xe8>
 8005a00:	8080030b 	ldhu	r2,12(r16)
 8005a04:	10c0020c 	andi	r3,r2,8
 8005a08:	100d883a 	mov	r6,r2
 8005a0c:	18000f26 	beq	r3,zero,8005a4c <__swsetup_r+0x7c>
 8005a10:	80c00417 	ldw	r3,16(r16)
 8005a14:	18001526 	beq	r3,zero,8005a6c <__swsetup_r+0x9c>
 8005a18:	1100004c 	andi	r4,r2,1
 8005a1c:	20001c1e 	bne	r4,zero,8005a90 <__swsetup_r+0xc0>
 8005a20:	1080008c 	andi	r2,r2,2
 8005a24:	1000261e 	bne	r2,zero,8005ac0 <__swsetup_r+0xf0>
 8005a28:	80800517 	ldw	r2,20(r16)
 8005a2c:	80800215 	stw	r2,8(r16)
 8005a30:	18001c26 	beq	r3,zero,8005aa4 <__swsetup_r+0xd4>
 8005a34:	0005883a 	mov	r2,zero
 8005a38:	dfc00217 	ldw	ra,8(sp)
 8005a3c:	dc400117 	ldw	r17,4(sp)
 8005a40:	dc000017 	ldw	r16,0(sp)
 8005a44:	dec00304 	addi	sp,sp,12
 8005a48:	f800283a 	ret
 8005a4c:	3080040c 	andi	r2,r6,16
 8005a50:	10001726 	beq	r2,zero,8005ab0 <__swsetup_r+0xe0>
 8005a54:	3080010c 	andi	r2,r6,4
 8005a58:	10001b1e 	bne	r2,zero,8005ac8 <__swsetup_r+0xf8>
 8005a5c:	80c00417 	ldw	r3,16(r16)
 8005a60:	30800214 	ori	r2,r6,8
 8005a64:	8080030d 	sth	r2,12(r16)
 8005a68:	183feb1e 	bne	r3,zero,8005a18 <__alt_data_end+0xfc005a18>
 8005a6c:	1140a00c 	andi	r5,r2,640
 8005a70:	01008004 	movi	r4,512
 8005a74:	293fe826 	beq	r5,r4,8005a18 <__alt_data_end+0xfc005a18>
 8005a78:	8809883a 	mov	r4,r17
 8005a7c:	800b883a 	mov	r5,r16
 8005a80:	80024800 	call	8002480 <__smakebuf_r>
 8005a84:	8080030b 	ldhu	r2,12(r16)
 8005a88:	80c00417 	ldw	r3,16(r16)
 8005a8c:	003fe206 	br	8005a18 <__alt_data_end+0xfc005a18>
 8005a90:	80800517 	ldw	r2,20(r16)
 8005a94:	80000215 	stw	zero,8(r16)
 8005a98:	0085c83a 	sub	r2,zero,r2
 8005a9c:	80800615 	stw	r2,24(r16)
 8005aa0:	183fe41e 	bne	r3,zero,8005a34 <__alt_data_end+0xfc005a34>
 8005aa4:	8080030b 	ldhu	r2,12(r16)
 8005aa8:	1080200c 	andi	r2,r2,128
 8005aac:	103fe226 	beq	r2,zero,8005a38 <__alt_data_end+0xfc005a38>
 8005ab0:	00bfffc4 	movi	r2,-1
 8005ab4:	003fe006 	br	8005a38 <__alt_data_end+0xfc005a38>
 8005ab8:	80016ac0 	call	80016ac <__sinit>
 8005abc:	003fd006 	br	8005a00 <__alt_data_end+0xfc005a00>
 8005ac0:	0005883a 	mov	r2,zero
 8005ac4:	003fd906 	br	8005a2c <__alt_data_end+0xfc005a2c>
 8005ac8:	81400c17 	ldw	r5,48(r16)
 8005acc:	28000626 	beq	r5,zero,8005ae8 <__swsetup_r+0x118>
 8005ad0:	80801004 	addi	r2,r16,64
 8005ad4:	28800326 	beq	r5,r2,8005ae4 <__swsetup_r+0x114>
 8005ad8:	8809883a 	mov	r4,r17
 8005adc:	800192c0 	call	800192c <_free_r>
 8005ae0:	8180030b 	ldhu	r6,12(r16)
 8005ae4:	80000c15 	stw	zero,48(r16)
 8005ae8:	80c00417 	ldw	r3,16(r16)
 8005aec:	00bff6c4 	movi	r2,-37
 8005af0:	118c703a 	and	r6,r2,r6
 8005af4:	80000115 	stw	zero,4(r16)
 8005af8:	80c00015 	stw	r3,0(r16)
 8005afc:	003fd806 	br	8005a60 <__alt_data_end+0xfc005a60>

08005b00 <_close_r>:
 8005b00:	defffd04 	addi	sp,sp,-12
 8005b04:	dc000015 	stw	r16,0(sp)
 8005b08:	04020074 	movhi	r16,2049
 8005b0c:	dc400115 	stw	r17,4(sp)
 8005b10:	84162f04 	addi	r16,r16,22716
 8005b14:	2023883a 	mov	r17,r4
 8005b18:	2809883a 	mov	r4,r5
 8005b1c:	dfc00215 	stw	ra,8(sp)
 8005b20:	80000015 	stw	zero,0(r16)
 8005b24:	800e7c40 	call	800e7c4 <close>
 8005b28:	00ffffc4 	movi	r3,-1
 8005b2c:	10c00526 	beq	r2,r3,8005b44 <_close_r+0x44>
 8005b30:	dfc00217 	ldw	ra,8(sp)
 8005b34:	dc400117 	ldw	r17,4(sp)
 8005b38:	dc000017 	ldw	r16,0(sp)
 8005b3c:	dec00304 	addi	sp,sp,12
 8005b40:	f800283a 	ret
 8005b44:	80c00017 	ldw	r3,0(r16)
 8005b48:	183ff926 	beq	r3,zero,8005b30 <__alt_data_end+0xfc005b30>
 8005b4c:	88c00015 	stw	r3,0(r17)
 8005b50:	003ff706 	br	8005b30 <__alt_data_end+0xfc005b30>

08005b54 <quorem>:
 8005b54:	defff204 	addi	sp,sp,-56
 8005b58:	ddc00b15 	stw	r23,44(sp)
 8005b5c:	20800417 	ldw	r2,16(r4)
 8005b60:	2dc00417 	ldw	r23,16(r5)
 8005b64:	dfc00d15 	stw	ra,52(sp)
 8005b68:	df000c15 	stw	fp,48(sp)
 8005b6c:	dd800a15 	stw	r22,40(sp)
 8005b70:	dd400915 	stw	r21,36(sp)
 8005b74:	dd000815 	stw	r20,32(sp)
 8005b78:	dcc00715 	stw	r19,28(sp)
 8005b7c:	dc800615 	stw	r18,24(sp)
 8005b80:	dc400515 	stw	r17,20(sp)
 8005b84:	dc000415 	stw	r16,16(sp)
 8005b88:	15c07a16 	blt	r2,r23,8005d74 <quorem+0x220>
 8005b8c:	bdffffc4 	addi	r23,r23,-1
 8005b90:	bde9883a 	add	r20,r23,r23
 8005b94:	28c00504 	addi	r3,r5,20
 8005b98:	a529883a 	add	r20,r20,r20
 8005b9c:	1d39883a 	add	fp,r3,r20
 8005ba0:	24c00504 	addi	r19,r4,20
 8005ba4:	d9400215 	stw	r5,8(sp)
 8005ba8:	9d29883a 	add	r20,r19,r20
 8005bac:	e1400017 	ldw	r5,0(fp)
 8005bb0:	d9000015 	stw	r4,0(sp)
 8005bb4:	a1000017 	ldw	r4,0(r20)
 8005bb8:	29400044 	addi	r5,r5,1
 8005bbc:	d8c00115 	stw	r3,4(sp)
 8005bc0:	dd000315 	stw	r20,12(sp)
 8005bc4:	800bf400 	call	800bf40 <__udivsi3>
 8005bc8:	1025883a 	mov	r18,r2
 8005bcc:	10003026 	beq	r2,zero,8005c90 <quorem+0x13c>
 8005bd0:	dc400117 	ldw	r17,4(sp)
 8005bd4:	9829883a 	mov	r20,r19
 8005bd8:	002d883a 	mov	r22,zero
 8005bdc:	0021883a 	mov	r16,zero
 8005be0:	8d400017 	ldw	r21,0(r17)
 8005be4:	900b883a 	mov	r5,r18
 8005be8:	8c400104 	addi	r17,r17,4
 8005bec:	a93fffcc 	andi	r4,r21,65535
 8005bf0:	800bf500 	call	800bf50 <__mulsi3>
 8005bf4:	a808d43a 	srli	r4,r21,16
 8005bf8:	900b883a 	mov	r5,r18
 8005bfc:	b0ad883a 	add	r22,r22,r2
 8005c00:	800bf500 	call	800bf50 <__mulsi3>
 8005c04:	a1000017 	ldw	r4,0(r20)
 8005c08:	b00cd43a 	srli	r6,r22,16
 8005c0c:	b0ffffcc 	andi	r3,r22,65535
 8005c10:	217fffcc 	andi	r5,r4,65535
 8005c14:	2c21883a 	add	r16,r5,r16
 8005c18:	80c7c83a 	sub	r3,r16,r3
 8005c1c:	2008d43a 	srli	r4,r4,16
 8005c20:	3085883a 	add	r2,r6,r2
 8005c24:	1821d43a 	srai	r16,r3,16
 8005c28:	117fffcc 	andi	r5,r2,65535
 8005c2c:	2149c83a 	sub	r4,r4,r5
 8005c30:	2421883a 	add	r16,r4,r16
 8005c34:	8008943a 	slli	r4,r16,16
 8005c38:	18ffffcc 	andi	r3,r3,65535
 8005c3c:	102cd43a 	srli	r22,r2,16
 8005c40:	20c8b03a 	or	r4,r4,r3
 8005c44:	a1000015 	stw	r4,0(r20)
 8005c48:	8021d43a 	srai	r16,r16,16
 8005c4c:	a5000104 	addi	r20,r20,4
 8005c50:	e47fe32e 	bgeu	fp,r17,8005be0 <__alt_data_end+0xfc005be0>
 8005c54:	d8c00317 	ldw	r3,12(sp)
 8005c58:	18800017 	ldw	r2,0(r3)
 8005c5c:	10000c1e 	bne	r2,zero,8005c90 <quorem+0x13c>
 8005c60:	18bfff04 	addi	r2,r3,-4
 8005c64:	9880082e 	bgeu	r19,r2,8005c88 <quorem+0x134>
 8005c68:	18ffff17 	ldw	r3,-4(r3)
 8005c6c:	18000326 	beq	r3,zero,8005c7c <quorem+0x128>
 8005c70:	00000506 	br	8005c88 <quorem+0x134>
 8005c74:	10c00017 	ldw	r3,0(r2)
 8005c78:	1800031e 	bne	r3,zero,8005c88 <quorem+0x134>
 8005c7c:	10bfff04 	addi	r2,r2,-4
 8005c80:	bdffffc4 	addi	r23,r23,-1
 8005c84:	98bffb36 	bltu	r19,r2,8005c74 <__alt_data_end+0xfc005c74>
 8005c88:	d8c00017 	ldw	r3,0(sp)
 8005c8c:	1dc00415 	stw	r23,16(r3)
 8005c90:	d9000017 	ldw	r4,0(sp)
 8005c94:	d9400217 	ldw	r5,8(sp)
 8005c98:	80088680 	call	8008868 <__mcmp>
 8005c9c:	10002816 	blt	r2,zero,8005d40 <quorem+0x1ec>
 8005ca0:	dc400117 	ldw	r17,4(sp)
 8005ca4:	94800044 	addi	r18,r18,1
 8005ca8:	980d883a 	mov	r6,r19
 8005cac:	0007883a 	mov	r3,zero
 8005cb0:	31000017 	ldw	r4,0(r6)
 8005cb4:	89400017 	ldw	r5,0(r17)
 8005cb8:	31800104 	addi	r6,r6,4
 8005cbc:	20bfffcc 	andi	r2,r4,65535
 8005cc0:	10c7883a 	add	r3,r2,r3
 8005cc4:	28bfffcc 	andi	r2,r5,65535
 8005cc8:	1885c83a 	sub	r2,r3,r2
 8005ccc:	280ad43a 	srli	r5,r5,16
 8005cd0:	2008d43a 	srli	r4,r4,16
 8005cd4:	1007d43a 	srai	r3,r2,16
 8005cd8:	10bfffcc 	andi	r2,r2,65535
 8005cdc:	2149c83a 	sub	r4,r4,r5
 8005ce0:	20c9883a 	add	r4,r4,r3
 8005ce4:	200a943a 	slli	r5,r4,16
 8005ce8:	8c400104 	addi	r17,r17,4
 8005cec:	2007d43a 	srai	r3,r4,16
 8005cf0:	2884b03a 	or	r2,r5,r2
 8005cf4:	30bfff15 	stw	r2,-4(r6)
 8005cf8:	e47fed2e 	bgeu	fp,r17,8005cb0 <__alt_data_end+0xfc005cb0>
 8005cfc:	bdc5883a 	add	r2,r23,r23
 8005d00:	1085883a 	add	r2,r2,r2
 8005d04:	9887883a 	add	r3,r19,r2
 8005d08:	18800017 	ldw	r2,0(r3)
 8005d0c:	10000c1e 	bne	r2,zero,8005d40 <quorem+0x1ec>
 8005d10:	18bfff04 	addi	r2,r3,-4
 8005d14:	9880082e 	bgeu	r19,r2,8005d38 <quorem+0x1e4>
 8005d18:	18ffff17 	ldw	r3,-4(r3)
 8005d1c:	18000326 	beq	r3,zero,8005d2c <quorem+0x1d8>
 8005d20:	00000506 	br	8005d38 <quorem+0x1e4>
 8005d24:	10c00017 	ldw	r3,0(r2)
 8005d28:	1800031e 	bne	r3,zero,8005d38 <quorem+0x1e4>
 8005d2c:	10bfff04 	addi	r2,r2,-4
 8005d30:	bdffffc4 	addi	r23,r23,-1
 8005d34:	98bffb36 	bltu	r19,r2,8005d24 <__alt_data_end+0xfc005d24>
 8005d38:	d8c00017 	ldw	r3,0(sp)
 8005d3c:	1dc00415 	stw	r23,16(r3)
 8005d40:	9005883a 	mov	r2,r18
 8005d44:	dfc00d17 	ldw	ra,52(sp)
 8005d48:	df000c17 	ldw	fp,48(sp)
 8005d4c:	ddc00b17 	ldw	r23,44(sp)
 8005d50:	dd800a17 	ldw	r22,40(sp)
 8005d54:	dd400917 	ldw	r21,36(sp)
 8005d58:	dd000817 	ldw	r20,32(sp)
 8005d5c:	dcc00717 	ldw	r19,28(sp)
 8005d60:	dc800617 	ldw	r18,24(sp)
 8005d64:	dc400517 	ldw	r17,20(sp)
 8005d68:	dc000417 	ldw	r16,16(sp)
 8005d6c:	dec00e04 	addi	sp,sp,56
 8005d70:	f800283a 	ret
 8005d74:	0005883a 	mov	r2,zero
 8005d78:	003ff206 	br	8005d44 <__alt_data_end+0xfc005d44>

08005d7c <_dtoa_r>:
 8005d7c:	20801017 	ldw	r2,64(r4)
 8005d80:	deffde04 	addi	sp,sp,-136
 8005d84:	dd401d15 	stw	r21,116(sp)
 8005d88:	dcc01b15 	stw	r19,108(sp)
 8005d8c:	dc801a15 	stw	r18,104(sp)
 8005d90:	dc401915 	stw	r17,100(sp)
 8005d94:	dc001815 	stw	r16,96(sp)
 8005d98:	dfc02115 	stw	ra,132(sp)
 8005d9c:	df002015 	stw	fp,128(sp)
 8005da0:	ddc01f15 	stw	r23,124(sp)
 8005da4:	dd801e15 	stw	r22,120(sp)
 8005da8:	dd001c15 	stw	r20,112(sp)
 8005dac:	d9c00315 	stw	r7,12(sp)
 8005db0:	2021883a 	mov	r16,r4
 8005db4:	302b883a 	mov	r21,r6
 8005db8:	2825883a 	mov	r18,r5
 8005dbc:	dc402417 	ldw	r17,144(sp)
 8005dc0:	3027883a 	mov	r19,r6
 8005dc4:	10000826 	beq	r2,zero,8005de8 <_dtoa_r+0x6c>
 8005dc8:	21801117 	ldw	r6,68(r4)
 8005dcc:	00c00044 	movi	r3,1
 8005dd0:	100b883a 	mov	r5,r2
 8005dd4:	1986983a 	sll	r3,r3,r6
 8005dd8:	11800115 	stw	r6,4(r2)
 8005ddc:	10c00215 	stw	r3,8(r2)
 8005de0:	8007f940 	call	8007f94 <_Bfree>
 8005de4:	80001015 	stw	zero,64(r16)
 8005de8:	a8002d16 	blt	r21,zero,8005ea0 <_dtoa_r+0x124>
 8005dec:	88000015 	stw	zero,0(r17)
 8005df0:	a8dffc2c 	andhi	r3,r21,32752
 8005df4:	009ffc34 	movhi	r2,32752
 8005df8:	18801b26 	beq	r3,r2,8005e68 <_dtoa_r+0xec>
 8005dfc:	9009883a 	mov	r4,r18
 8005e00:	980b883a 	mov	r5,r19
 8005e04:	000d883a 	mov	r6,zero
 8005e08:	000f883a 	mov	r7,zero
 8005e0c:	800d1940 	call	800d194 <__eqdf2>
 8005e10:	10002a1e 	bne	r2,zero,8005ebc <_dtoa_r+0x140>
 8005e14:	d8c02317 	ldw	r3,140(sp)
 8005e18:	d9002517 	ldw	r4,148(sp)
 8005e1c:	00800044 	movi	r2,1
 8005e20:	18800015 	stw	r2,0(r3)
 8005e24:	2001a226 	beq	r4,zero,80064b0 <_dtoa_r+0x734>
 8005e28:	00820074 	movhi	r2,2049
 8005e2c:	10870444 	addi	r2,r2,7185
 8005e30:	20800015 	stw	r2,0(r4)
 8005e34:	10bfffc4 	addi	r2,r2,-1
 8005e38:	dfc02117 	ldw	ra,132(sp)
 8005e3c:	df002017 	ldw	fp,128(sp)
 8005e40:	ddc01f17 	ldw	r23,124(sp)
 8005e44:	dd801e17 	ldw	r22,120(sp)
 8005e48:	dd401d17 	ldw	r21,116(sp)
 8005e4c:	dd001c17 	ldw	r20,112(sp)
 8005e50:	dcc01b17 	ldw	r19,108(sp)
 8005e54:	dc801a17 	ldw	r18,104(sp)
 8005e58:	dc401917 	ldw	r17,100(sp)
 8005e5c:	dc001817 	ldw	r16,96(sp)
 8005e60:	dec02204 	addi	sp,sp,136
 8005e64:	f800283a 	ret
 8005e68:	d8c02317 	ldw	r3,140(sp)
 8005e6c:	0089c3c4 	movi	r2,9999
 8005e70:	18800015 	stw	r2,0(r3)
 8005e74:	90017c26 	beq	r18,zero,8006468 <_dtoa_r+0x6ec>
 8005e78:	00820074 	movhi	r2,2049
 8005e7c:	1087b004 	addi	r2,r2,7872
 8005e80:	d9002517 	ldw	r4,148(sp)
 8005e84:	203fec26 	beq	r4,zero,8005e38 <__alt_data_end+0xfc005e38>
 8005e88:	10c000c7 	ldb	r3,3(r2)
 8005e8c:	18017d1e 	bne	r3,zero,8006484 <_dtoa_r+0x708>
 8005e90:	10c000c4 	addi	r3,r2,3
 8005e94:	d9802517 	ldw	r6,148(sp)
 8005e98:	30c00015 	stw	r3,0(r6)
 8005e9c:	003fe606 	br	8005e38 <__alt_data_end+0xfc005e38>
 8005ea0:	04e00034 	movhi	r19,32768
 8005ea4:	9cffffc4 	addi	r19,r19,-1
 8005ea8:	00800044 	movi	r2,1
 8005eac:	ace6703a 	and	r19,r21,r19
 8005eb0:	88800015 	stw	r2,0(r17)
 8005eb4:	982b883a 	mov	r21,r19
 8005eb8:	003fcd06 	br	8005df0 <__alt_data_end+0xfc005df0>
 8005ebc:	d8800204 	addi	r2,sp,8
 8005ec0:	a822d53a 	srli	r17,r21,20
 8005ec4:	d8800015 	stw	r2,0(sp)
 8005ec8:	8009883a 	mov	r4,r16
 8005ecc:	900b883a 	mov	r5,r18
 8005ed0:	980d883a 	mov	r6,r19
 8005ed4:	d9c00104 	addi	r7,sp,4
 8005ed8:	8008bdc0 	call	8008bdc <__d2b>
 8005edc:	1039883a 	mov	fp,r2
 8005ee0:	88016a1e 	bne	r17,zero,800648c <_dtoa_r+0x710>
 8005ee4:	dd000217 	ldw	r20,8(sp)
 8005ee8:	dc400117 	ldw	r17,4(sp)
 8005eec:	00befbc4 	movi	r2,-1041
 8005ef0:	a463883a 	add	r17,r20,r17
 8005ef4:	8882ea16 	blt	r17,r2,8006aa0 <_dtoa_r+0xd24>
 8005ef8:	00bf0384 	movi	r2,-1010
 8005efc:	1445c83a 	sub	r2,r2,r17
 8005f00:	89010484 	addi	r4,r17,1042
 8005f04:	a8aa983a 	sll	r21,r21,r2
 8005f08:	9108d83a 	srl	r4,r18,r4
 8005f0c:	a908b03a 	or	r4,r21,r4
 8005f10:	800e66c0 	call	800e66c <__floatunsidf>
 8005f14:	017f8434 	movhi	r5,65040
 8005f18:	01800044 	movi	r6,1
 8005f1c:	1009883a 	mov	r4,r2
 8005f20:	194b883a 	add	r5,r3,r5
 8005f24:	8c7fffc4 	addi	r17,r17,-1
 8005f28:	d9800f15 	stw	r6,60(sp)
 8005f2c:	000d883a 	mov	r6,zero
 8005f30:	01cffe34 	movhi	r7,16376
 8005f34:	800dc440 	call	800dc44 <__subdf3>
 8005f38:	0198dbf4 	movhi	r6,25455
 8005f3c:	01cff4f4 	movhi	r7,16339
 8005f40:	1009883a 	mov	r4,r2
 8005f44:	180b883a 	mov	r5,r3
 8005f48:	3190d844 	addi	r6,r6,17249
 8005f4c:	39e1e9c4 	addi	r7,r7,-30809
 8005f50:	800d3d80 	call	800d3d8 <__muldf3>
 8005f54:	01a2d874 	movhi	r6,35681
 8005f58:	01cff1f4 	movhi	r7,16327
 8005f5c:	180b883a 	mov	r5,r3
 8005f60:	31b22cc4 	addi	r6,r6,-14157
 8005f64:	39e28a04 	addi	r7,r7,-30168
 8005f68:	1009883a 	mov	r4,r2
 8005f6c:	800bf780 	call	800bf78 <__adddf3>
 8005f70:	8809883a 	mov	r4,r17
 8005f74:	102d883a 	mov	r22,r2
 8005f78:	182b883a 	mov	r21,r3
 8005f7c:	800e59c0 	call	800e59c <__floatsidf>
 8005f80:	019427f4 	movhi	r6,20639
 8005f84:	01cff4f4 	movhi	r7,16339
 8005f88:	1009883a 	mov	r4,r2
 8005f8c:	180b883a 	mov	r5,r3
 8005f90:	319e7ec4 	addi	r6,r6,31227
 8005f94:	39d104c4 	addi	r7,r7,17427
 8005f98:	800d3d80 	call	800d3d8 <__muldf3>
 8005f9c:	b009883a 	mov	r4,r22
 8005fa0:	a80b883a 	mov	r5,r21
 8005fa4:	100d883a 	mov	r6,r2
 8005fa8:	180f883a 	mov	r7,r3
 8005fac:	800bf780 	call	800bf78 <__adddf3>
 8005fb0:	1009883a 	mov	r4,r2
 8005fb4:	180b883a 	mov	r5,r3
 8005fb8:	102d883a 	mov	r22,r2
 8005fbc:	182b883a 	mov	r21,r3
 8005fc0:	800e5140 	call	800e514 <__fixdfsi>
 8005fc4:	b009883a 	mov	r4,r22
 8005fc8:	a80b883a 	mov	r5,r21
 8005fcc:	000d883a 	mov	r6,zero
 8005fd0:	000f883a 	mov	r7,zero
 8005fd4:	d8800515 	stw	r2,20(sp)
 8005fd8:	800d2f80 	call	800d2f8 <__ledf2>
 8005fdc:	10023116 	blt	r2,zero,80068a4 <_dtoa_r+0xb28>
 8005fe0:	d8c00517 	ldw	r3,20(sp)
 8005fe4:	00800584 	movi	r2,22
 8005fe8:	10c21f36 	bltu	r2,r3,8006868 <_dtoa_r+0xaec>
 8005fec:	180490fa 	slli	r2,r3,3
 8005ff0:	00c20074 	movhi	r3,2049
 8005ff4:	18c7cb04 	addi	r3,r3,7980
 8005ff8:	1885883a 	add	r2,r3,r2
 8005ffc:	11000017 	ldw	r4,0(r2)
 8006000:	11400117 	ldw	r5,4(r2)
 8006004:	900d883a 	mov	r6,r18
 8006008:	980f883a 	mov	r7,r19
 800600c:	800d2180 	call	800d218 <__gedf2>
 8006010:	0082a70e 	bge	zero,r2,8006ab0 <_dtoa_r+0xd34>
 8006014:	d9000517 	ldw	r4,20(sp)
 8006018:	d8000c15 	stw	zero,48(sp)
 800601c:	213fffc4 	addi	r4,r4,-1
 8006020:	d9000515 	stw	r4,20(sp)
 8006024:	a463c83a 	sub	r17,r20,r17
 8006028:	8dbfffc4 	addi	r22,r17,-1
 800602c:	b0021916 	blt	r22,zero,8006894 <_dtoa_r+0xb18>
 8006030:	d8000815 	stw	zero,32(sp)
 8006034:	d8800517 	ldw	r2,20(sp)
 8006038:	10020e16 	blt	r2,zero,8006874 <_dtoa_r+0xaf8>
 800603c:	b0ad883a 	add	r22,r22,r2
 8006040:	d8800a15 	stw	r2,40(sp)
 8006044:	d8000915 	stw	zero,36(sp)
 8006048:	d8c00317 	ldw	r3,12(sp)
 800604c:	00800244 	movi	r2,9
 8006050:	10c11a36 	bltu	r2,r3,80064bc <_dtoa_r+0x740>
 8006054:	00800144 	movi	r2,5
 8006058:	10c4fc0e 	bge	r2,r3,800744c <_dtoa_r+0x16d0>
 800605c:	18ffff04 	addi	r3,r3,-4
 8006060:	d8c00315 	stw	r3,12(sp)
 8006064:	0029883a 	mov	r20,zero
 8006068:	d9800317 	ldw	r6,12(sp)
 800606c:	008000c4 	movi	r2,3
 8006070:	3083bd26 	beq	r6,r2,8006f68 <_dtoa_r+0x11ec>
 8006074:	1183670e 	bge	r2,r6,8006e14 <_dtoa_r+0x1098>
 8006078:	d8c00317 	ldw	r3,12(sp)
 800607c:	00800104 	movi	r2,4
 8006080:	1882e726 	beq	r3,r2,8006c20 <_dtoa_r+0xea4>
 8006084:	00800144 	movi	r2,5
 8006088:	1884f21e 	bne	r3,r2,8007454 <_dtoa_r+0x16d8>
 800608c:	00800044 	movi	r2,1
 8006090:	d8800b15 	stw	r2,44(sp)
 8006094:	d8c02217 	ldw	r3,136(sp)
 8006098:	d9000517 	ldw	r4,20(sp)
 800609c:	1907883a 	add	r3,r3,r4
 80060a0:	19800044 	addi	r6,r3,1
 80060a4:	d8c00d15 	stw	r3,52(sp)
 80060a8:	d9800615 	stw	r6,24(sp)
 80060ac:	0183c30e 	bge	zero,r6,8006fbc <_dtoa_r+0x1240>
 80060b0:	d9800617 	ldw	r6,24(sp)
 80060b4:	3023883a 	mov	r17,r6
 80060b8:	80001115 	stw	zero,68(r16)
 80060bc:	008005c4 	movi	r2,23
 80060c0:	1184f62e 	bgeu	r2,r6,800749c <_dtoa_r+0x1720>
 80060c4:	00c00044 	movi	r3,1
 80060c8:	00800104 	movi	r2,4
 80060cc:	1085883a 	add	r2,r2,r2
 80060d0:	11000504 	addi	r4,r2,20
 80060d4:	180b883a 	mov	r5,r3
 80060d8:	18c00044 	addi	r3,r3,1
 80060dc:	313ffb2e 	bgeu	r6,r4,80060cc <__alt_data_end+0xfc0060cc>
 80060e0:	81401115 	stw	r5,68(r16)
 80060e4:	8009883a 	mov	r4,r16
 80060e8:	8007eec0 	call	8007eec <_Balloc>
 80060ec:	d8800715 	stw	r2,28(sp)
 80060f0:	80801015 	stw	r2,64(r16)
 80060f4:	00800384 	movi	r2,14
 80060f8:	1440fd36 	bltu	r2,r17,80064f0 <_dtoa_r+0x774>
 80060fc:	a000fc26 	beq	r20,zero,80064f0 <_dtoa_r+0x774>
 8006100:	d8800517 	ldw	r2,20(sp)
 8006104:	0083b90e 	bge	zero,r2,8006fec <_dtoa_r+0x1270>
 8006108:	d8c00517 	ldw	r3,20(sp)
 800610c:	108003cc 	andi	r2,r2,15
 8006110:	100490fa 	slli	r2,r2,3
 8006114:	182fd13a 	srai	r23,r3,4
 8006118:	00c20074 	movhi	r3,2049
 800611c:	18c7cb04 	addi	r3,r3,7980
 8006120:	1885883a 	add	r2,r3,r2
 8006124:	b8c0040c 	andi	r3,r23,16
 8006128:	12c00017 	ldw	r11,0(r2)
 800612c:	12800117 	ldw	r10,4(r2)
 8006130:	18039726 	beq	r3,zero,8006f90 <_dtoa_r+0x1214>
 8006134:	00820074 	movhi	r2,2049
 8006138:	1087c104 	addi	r2,r2,7940
 800613c:	11800817 	ldw	r6,32(r2)
 8006140:	11c00917 	ldw	r7,36(r2)
 8006144:	9009883a 	mov	r4,r18
 8006148:	980b883a 	mov	r5,r19
 800614c:	da801615 	stw	r10,88(sp)
 8006150:	dac01515 	stw	r11,84(sp)
 8006154:	800c8140 	call	800c814 <__divdf3>
 8006158:	da801617 	ldw	r10,88(sp)
 800615c:	dac01517 	ldw	r11,84(sp)
 8006160:	bdc003cc 	andi	r23,r23,15
 8006164:	044000c4 	movi	r17,3
 8006168:	d8800e15 	stw	r2,56(sp)
 800616c:	182b883a 	mov	r21,r3
 8006170:	b8001126 	beq	r23,zero,80061b8 <_dtoa_r+0x43c>
 8006174:	05020074 	movhi	r20,2049
 8006178:	a507c104 	addi	r20,r20,7940
 800617c:	5805883a 	mov	r2,r11
 8006180:	5007883a 	mov	r3,r10
 8006184:	b980004c 	andi	r6,r23,1
 8006188:	1009883a 	mov	r4,r2
 800618c:	b82fd07a 	srai	r23,r23,1
 8006190:	180b883a 	mov	r5,r3
 8006194:	30000426 	beq	r6,zero,80061a8 <_dtoa_r+0x42c>
 8006198:	a1800017 	ldw	r6,0(r20)
 800619c:	a1c00117 	ldw	r7,4(r20)
 80061a0:	8c400044 	addi	r17,r17,1
 80061a4:	800d3d80 	call	800d3d8 <__muldf3>
 80061a8:	a5000204 	addi	r20,r20,8
 80061ac:	b83ff51e 	bne	r23,zero,8006184 <__alt_data_end+0xfc006184>
 80061b0:	1017883a 	mov	r11,r2
 80061b4:	1815883a 	mov	r10,r3
 80061b8:	d9000e17 	ldw	r4,56(sp)
 80061bc:	a80b883a 	mov	r5,r21
 80061c0:	580d883a 	mov	r6,r11
 80061c4:	500f883a 	mov	r7,r10
 80061c8:	800c8140 	call	800c814 <__divdf3>
 80061cc:	1029883a 	mov	r20,r2
 80061d0:	182b883a 	mov	r21,r3
 80061d4:	d9800c17 	ldw	r6,48(sp)
 80061d8:	30000626 	beq	r6,zero,80061f4 <_dtoa_r+0x478>
 80061dc:	a009883a 	mov	r4,r20
 80061e0:	a80b883a 	mov	r5,r21
 80061e4:	000d883a 	mov	r6,zero
 80061e8:	01cffc34 	movhi	r7,16368
 80061ec:	800d2f80 	call	800d2f8 <__ledf2>
 80061f0:	10043216 	blt	r2,zero,80072bc <_dtoa_r+0x1540>
 80061f4:	8809883a 	mov	r4,r17
 80061f8:	800e59c0 	call	800e59c <__floatsidf>
 80061fc:	1009883a 	mov	r4,r2
 8006200:	180b883a 	mov	r5,r3
 8006204:	a00d883a 	mov	r6,r20
 8006208:	a80f883a 	mov	r7,r21
 800620c:	800d3d80 	call	800d3d8 <__muldf3>
 8006210:	000d883a 	mov	r6,zero
 8006214:	1009883a 	mov	r4,r2
 8006218:	180b883a 	mov	r5,r3
 800621c:	01d00734 	movhi	r7,16412
 8006220:	800bf780 	call	800bf78 <__adddf3>
 8006224:	1023883a 	mov	r17,r2
 8006228:	d9800617 	ldw	r6,24(sp)
 800622c:	00bf3034 	movhi	r2,64704
 8006230:	1885883a 	add	r2,r3,r2
 8006234:	d8800e15 	stw	r2,56(sp)
 8006238:	30032e26 	beq	r6,zero,8006ef4 <_dtoa_r+0x1178>
 800623c:	d8c00517 	ldw	r3,20(sp)
 8006240:	da800617 	ldw	r10,24(sp)
 8006244:	d8c01215 	stw	r3,72(sp)
 8006248:	d9000b17 	ldw	r4,44(sp)
 800624c:	2003b026 	beq	r4,zero,8007110 <_dtoa_r+0x1394>
 8006250:	50bfffc4 	addi	r2,r10,-1
 8006254:	100490fa 	slli	r2,r2,3
 8006258:	00c20074 	movhi	r3,2049
 800625c:	18c7cb04 	addi	r3,r3,7980
 8006260:	1885883a 	add	r2,r3,r2
 8006264:	11800017 	ldw	r6,0(r2)
 8006268:	11c00117 	ldw	r7,4(r2)
 800626c:	d8800717 	ldw	r2,28(sp)
 8006270:	0009883a 	mov	r4,zero
 8006274:	014ff834 	movhi	r5,16352
 8006278:	da801615 	stw	r10,88(sp)
 800627c:	15c00044 	addi	r23,r2,1
 8006280:	800c8140 	call	800c814 <__divdf3>
 8006284:	d9c00e17 	ldw	r7,56(sp)
 8006288:	880d883a 	mov	r6,r17
 800628c:	1009883a 	mov	r4,r2
 8006290:	180b883a 	mov	r5,r3
 8006294:	800dc440 	call	800dc44 <__subdf3>
 8006298:	a80b883a 	mov	r5,r21
 800629c:	a009883a 	mov	r4,r20
 80062a0:	d8c01015 	stw	r3,64(sp)
 80062a4:	d8800e15 	stw	r2,56(sp)
 80062a8:	800e5140 	call	800e514 <__fixdfsi>
 80062ac:	1009883a 	mov	r4,r2
 80062b0:	d8801715 	stw	r2,92(sp)
 80062b4:	800e59c0 	call	800e59c <__floatsidf>
 80062b8:	a009883a 	mov	r4,r20
 80062bc:	a80b883a 	mov	r5,r21
 80062c0:	100d883a 	mov	r6,r2
 80062c4:	180f883a 	mov	r7,r3
 80062c8:	800dc440 	call	800dc44 <__subdf3>
 80062cc:	da001717 	ldw	r8,92(sp)
 80062d0:	1829883a 	mov	r20,r3
 80062d4:	d8c00717 	ldw	r3,28(sp)
 80062d8:	d9000e17 	ldw	r4,56(sp)
 80062dc:	d9401017 	ldw	r5,64(sp)
 80062e0:	42000c04 	addi	r8,r8,48
 80062e4:	1023883a 	mov	r17,r2
 80062e8:	1a000005 	stb	r8,0(r3)
 80062ec:	880d883a 	mov	r6,r17
 80062f0:	a00f883a 	mov	r7,r20
 80062f4:	402b883a 	mov	r21,r8
 80062f8:	800d2180 	call	800d218 <__gedf2>
 80062fc:	00844516 	blt	zero,r2,8007414 <_dtoa_r+0x1698>
 8006300:	0009883a 	mov	r4,zero
 8006304:	014ffc34 	movhi	r5,16368
 8006308:	880d883a 	mov	r6,r17
 800630c:	a00f883a 	mov	r7,r20
 8006310:	800dc440 	call	800dc44 <__subdf3>
 8006314:	d9000e17 	ldw	r4,56(sp)
 8006318:	d9401017 	ldw	r5,64(sp)
 800631c:	100d883a 	mov	r6,r2
 8006320:	180f883a 	mov	r7,r3
 8006324:	800d2180 	call	800d218 <__gedf2>
 8006328:	da801617 	ldw	r10,88(sp)
 800632c:	00843616 	blt	zero,r2,8007408 <_dtoa_r+0x168c>
 8006330:	00800044 	movi	r2,1
 8006334:	12806e0e 	bge	r2,r10,80064f0 <_dtoa_r+0x774>
 8006338:	d9000717 	ldw	r4,28(sp)
 800633c:	dd801315 	stw	r22,76(sp)
 8006340:	dc001115 	stw	r16,68(sp)
 8006344:	2295883a 	add	r10,r4,r10
 8006348:	dcc01415 	stw	r19,80(sp)
 800634c:	502d883a 	mov	r22,r10
 8006350:	dcc01017 	ldw	r19,64(sp)
 8006354:	b821883a 	mov	r16,r23
 8006358:	dc801015 	stw	r18,64(sp)
 800635c:	dc800e17 	ldw	r18,56(sp)
 8006360:	00000906 	br	8006388 <_dtoa_r+0x60c>
 8006364:	800dc440 	call	800dc44 <__subdf3>
 8006368:	1009883a 	mov	r4,r2
 800636c:	180b883a 	mov	r5,r3
 8006370:	900d883a 	mov	r6,r18
 8006374:	980f883a 	mov	r7,r19
 8006378:	800d2f80 	call	800d2f8 <__ledf2>
 800637c:	10040e16 	blt	r2,zero,80073b8 <_dtoa_r+0x163c>
 8006380:	b821883a 	mov	r16,r23
 8006384:	bd841026 	beq	r23,r22,80073c8 <_dtoa_r+0x164c>
 8006388:	9009883a 	mov	r4,r18
 800638c:	980b883a 	mov	r5,r19
 8006390:	000d883a 	mov	r6,zero
 8006394:	01d00934 	movhi	r7,16420
 8006398:	800d3d80 	call	800d3d8 <__muldf3>
 800639c:	000d883a 	mov	r6,zero
 80063a0:	01d00934 	movhi	r7,16420
 80063a4:	8809883a 	mov	r4,r17
 80063a8:	a00b883a 	mov	r5,r20
 80063ac:	1025883a 	mov	r18,r2
 80063b0:	1827883a 	mov	r19,r3
 80063b4:	800d3d80 	call	800d3d8 <__muldf3>
 80063b8:	180b883a 	mov	r5,r3
 80063bc:	1009883a 	mov	r4,r2
 80063c0:	1823883a 	mov	r17,r3
 80063c4:	1029883a 	mov	r20,r2
 80063c8:	800e5140 	call	800e514 <__fixdfsi>
 80063cc:	1009883a 	mov	r4,r2
 80063d0:	102b883a 	mov	r21,r2
 80063d4:	800e59c0 	call	800e59c <__floatsidf>
 80063d8:	a009883a 	mov	r4,r20
 80063dc:	880b883a 	mov	r5,r17
 80063e0:	100d883a 	mov	r6,r2
 80063e4:	180f883a 	mov	r7,r3
 80063e8:	800dc440 	call	800dc44 <__subdf3>
 80063ec:	ad400c04 	addi	r21,r21,48
 80063f0:	1009883a 	mov	r4,r2
 80063f4:	180b883a 	mov	r5,r3
 80063f8:	900d883a 	mov	r6,r18
 80063fc:	980f883a 	mov	r7,r19
 8006400:	85400005 	stb	r21,0(r16)
 8006404:	1023883a 	mov	r17,r2
 8006408:	1829883a 	mov	r20,r3
 800640c:	800d2f80 	call	800d2f8 <__ledf2>
 8006410:	bdc00044 	addi	r23,r23,1
 8006414:	0009883a 	mov	r4,zero
 8006418:	014ffc34 	movhi	r5,16368
 800641c:	880d883a 	mov	r6,r17
 8006420:	a00f883a 	mov	r7,r20
 8006424:	103fcf0e 	bge	r2,zero,8006364 <__alt_data_end+0xfc006364>
 8006428:	d9801217 	ldw	r6,72(sp)
 800642c:	dc001117 	ldw	r16,68(sp)
 8006430:	d9800515 	stw	r6,20(sp)
 8006434:	8009883a 	mov	r4,r16
 8006438:	e00b883a 	mov	r5,fp
 800643c:	8007f940 	call	8007f94 <_Bfree>
 8006440:	d8c00517 	ldw	r3,20(sp)
 8006444:	d9002317 	ldw	r4,140(sp)
 8006448:	d9802517 	ldw	r6,148(sp)
 800644c:	b8000005 	stb	zero,0(r23)
 8006450:	18800044 	addi	r2,r3,1
 8006454:	20800015 	stw	r2,0(r4)
 8006458:	30027226 	beq	r6,zero,8006e24 <_dtoa_r+0x10a8>
 800645c:	35c00015 	stw	r23,0(r6)
 8006460:	d8800717 	ldw	r2,28(sp)
 8006464:	003e7406 	br	8005e38 <__alt_data_end+0xfc005e38>
 8006468:	00800434 	movhi	r2,16
 800646c:	10bfffc4 	addi	r2,r2,-1
 8006470:	a8aa703a 	and	r21,r21,r2
 8006474:	a83e801e 	bne	r21,zero,8005e78 <__alt_data_end+0xfc005e78>
 8006478:	00820074 	movhi	r2,2049
 800647c:	1087ad04 	addi	r2,r2,7860
 8006480:	003e7f06 	br	8005e80 <__alt_data_end+0xfc005e80>
 8006484:	10c00204 	addi	r3,r2,8
 8006488:	003e8206 	br	8005e94 <__alt_data_end+0xfc005e94>
 800648c:	01400434 	movhi	r5,16
 8006490:	297fffc4 	addi	r5,r5,-1
 8006494:	994a703a 	and	r5,r19,r5
 8006498:	9009883a 	mov	r4,r18
 800649c:	8c7f0044 	addi	r17,r17,-1023
 80064a0:	294ffc34 	orhi	r5,r5,16368
 80064a4:	dd000217 	ldw	r20,8(sp)
 80064a8:	d8000f15 	stw	zero,60(sp)
 80064ac:	003e9f06 	br	8005f2c <__alt_data_end+0xfc005f2c>
 80064b0:	00820074 	movhi	r2,2049
 80064b4:	10870404 	addi	r2,r2,7184
 80064b8:	003e5f06 	br	8005e38 <__alt_data_end+0xfc005e38>
 80064bc:	80001115 	stw	zero,68(r16)
 80064c0:	8009883a 	mov	r4,r16
 80064c4:	000b883a 	mov	r5,zero
 80064c8:	8007eec0 	call	8007eec <_Balloc>
 80064cc:	01bfffc4 	movi	r6,-1
 80064d0:	d8800715 	stw	r2,28(sp)
 80064d4:	80801015 	stw	r2,64(r16)
 80064d8:	00800044 	movi	r2,1
 80064dc:	d9800615 	stw	r6,24(sp)
 80064e0:	d8800b15 	stw	r2,44(sp)
 80064e4:	d8002215 	stw	zero,136(sp)
 80064e8:	d9800d15 	stw	r6,52(sp)
 80064ec:	d8000315 	stw	zero,12(sp)
 80064f0:	d8800117 	ldw	r2,4(sp)
 80064f4:	10008e16 	blt	r2,zero,8006730 <_dtoa_r+0x9b4>
 80064f8:	d9000517 	ldw	r4,20(sp)
 80064fc:	00c00384 	movi	r3,14
 8006500:	19008b16 	blt	r3,r4,8006730 <_dtoa_r+0x9b4>
 8006504:	200490fa 	slli	r2,r4,3
 8006508:	00c20074 	movhi	r3,2049
 800650c:	d9802217 	ldw	r6,136(sp)
 8006510:	18c7cb04 	addi	r3,r3,7980
 8006514:	1885883a 	add	r2,r3,r2
 8006518:	14400017 	ldw	r17,0(r2)
 800651c:	15000117 	ldw	r20,4(r2)
 8006520:	3001c716 	blt	r6,zero,8006c40 <_dtoa_r+0xec4>
 8006524:	880d883a 	mov	r6,r17
 8006528:	a00f883a 	mov	r7,r20
 800652c:	9009883a 	mov	r4,r18
 8006530:	980b883a 	mov	r5,r19
 8006534:	800c8140 	call	800c814 <__divdf3>
 8006538:	180b883a 	mov	r5,r3
 800653c:	1009883a 	mov	r4,r2
 8006540:	800e5140 	call	800e514 <__fixdfsi>
 8006544:	1009883a 	mov	r4,r2
 8006548:	102d883a 	mov	r22,r2
 800654c:	800e59c0 	call	800e59c <__floatsidf>
 8006550:	1009883a 	mov	r4,r2
 8006554:	180b883a 	mov	r5,r3
 8006558:	880d883a 	mov	r6,r17
 800655c:	a00f883a 	mov	r7,r20
 8006560:	800d3d80 	call	800d3d8 <__muldf3>
 8006564:	9009883a 	mov	r4,r18
 8006568:	980b883a 	mov	r5,r19
 800656c:	100d883a 	mov	r6,r2
 8006570:	180f883a 	mov	r7,r3
 8006574:	800dc440 	call	800dc44 <__subdf3>
 8006578:	d9000717 	ldw	r4,28(sp)
 800657c:	d9800617 	ldw	r6,24(sp)
 8006580:	180b883a 	mov	r5,r3
 8006584:	b0c00c04 	addi	r3,r22,48
 8006588:	20c00005 	stb	r3,0(r4)
 800658c:	25c00044 	addi	r23,r4,1
 8006590:	01000044 	movi	r4,1
 8006594:	1011883a 	mov	r8,r2
 8006598:	2807883a 	mov	r3,r5
 800659c:	31003d26 	beq	r6,r4,8006694 <_dtoa_r+0x918>
 80065a0:	000d883a 	mov	r6,zero
 80065a4:	01d00934 	movhi	r7,16420
 80065a8:	1009883a 	mov	r4,r2
 80065ac:	800d3d80 	call	800d3d8 <__muldf3>
 80065b0:	1009883a 	mov	r4,r2
 80065b4:	180b883a 	mov	r5,r3
 80065b8:	000d883a 	mov	r6,zero
 80065bc:	000f883a 	mov	r7,zero
 80065c0:	1027883a 	mov	r19,r2
 80065c4:	182b883a 	mov	r21,r3
 80065c8:	800d1940 	call	800d194 <__eqdf2>
 80065cc:	103f9926 	beq	r2,zero,8006434 <__alt_data_end+0xfc006434>
 80065d0:	d8c00617 	ldw	r3,24(sp)
 80065d4:	d9000717 	ldw	r4,28(sp)
 80065d8:	b825883a 	mov	r18,r23
 80065dc:	18bfffc4 	addi	r2,r3,-1
 80065e0:	20ad883a 	add	r22,r4,r2
 80065e4:	dc000315 	stw	r16,12(sp)
 80065e8:	00000a06 	br	8006614 <_dtoa_r+0x898>
 80065ec:	800d3d80 	call	800d3d8 <__muldf3>
 80065f0:	1009883a 	mov	r4,r2
 80065f4:	180b883a 	mov	r5,r3
 80065f8:	000d883a 	mov	r6,zero
 80065fc:	000f883a 	mov	r7,zero
 8006600:	1027883a 	mov	r19,r2
 8006604:	182b883a 	mov	r21,r3
 8006608:	b825883a 	mov	r18,r23
 800660c:	800d1940 	call	800d194 <__eqdf2>
 8006610:	10022626 	beq	r2,zero,8006eac <_dtoa_r+0x1130>
 8006614:	880d883a 	mov	r6,r17
 8006618:	a00f883a 	mov	r7,r20
 800661c:	9809883a 	mov	r4,r19
 8006620:	a80b883a 	mov	r5,r21
 8006624:	800c8140 	call	800c814 <__divdf3>
 8006628:	180b883a 	mov	r5,r3
 800662c:	1009883a 	mov	r4,r2
 8006630:	800e5140 	call	800e514 <__fixdfsi>
 8006634:	1009883a 	mov	r4,r2
 8006638:	1021883a 	mov	r16,r2
 800663c:	800e59c0 	call	800e59c <__floatsidf>
 8006640:	1009883a 	mov	r4,r2
 8006644:	180b883a 	mov	r5,r3
 8006648:	880d883a 	mov	r6,r17
 800664c:	a00f883a 	mov	r7,r20
 8006650:	800d3d80 	call	800d3d8 <__muldf3>
 8006654:	9809883a 	mov	r4,r19
 8006658:	a80b883a 	mov	r5,r21
 800665c:	100d883a 	mov	r6,r2
 8006660:	180f883a 	mov	r7,r3
 8006664:	800dc440 	call	800dc44 <__subdf3>
 8006668:	82000c04 	addi	r8,r16,48
 800666c:	92000005 	stb	r8,0(r18)
 8006670:	1009883a 	mov	r4,r2
 8006674:	180b883a 	mov	r5,r3
 8006678:	000d883a 	mov	r6,zero
 800667c:	01d00934 	movhi	r7,16420
 8006680:	1011883a 	mov	r8,r2
 8006684:	bdc00044 	addi	r23,r23,1
 8006688:	95bfd81e 	bne	r18,r22,80065ec <__alt_data_end+0xfc0065ec>
 800668c:	802d883a 	mov	r22,r16
 8006690:	dc000317 	ldw	r16,12(sp)
 8006694:	4009883a 	mov	r4,r8
 8006698:	180b883a 	mov	r5,r3
 800669c:	400d883a 	mov	r6,r8
 80066a0:	180f883a 	mov	r7,r3
 80066a4:	800bf780 	call	800bf78 <__adddf3>
 80066a8:	8809883a 	mov	r4,r17
 80066ac:	a00b883a 	mov	r5,r20
 80066b0:	100d883a 	mov	r6,r2
 80066b4:	180f883a 	mov	r7,r3
 80066b8:	1027883a 	mov	r19,r2
 80066bc:	1825883a 	mov	r18,r3
 80066c0:	800d2f80 	call	800d2f8 <__ledf2>
 80066c4:	10000816 	blt	r2,zero,80066e8 <_dtoa_r+0x96c>
 80066c8:	8809883a 	mov	r4,r17
 80066cc:	a00b883a 	mov	r5,r20
 80066d0:	980d883a 	mov	r6,r19
 80066d4:	900f883a 	mov	r7,r18
 80066d8:	800d1940 	call	800d194 <__eqdf2>
 80066dc:	103f551e 	bne	r2,zero,8006434 <__alt_data_end+0xfc006434>
 80066e0:	b580004c 	andi	r22,r22,1
 80066e4:	b03f5326 	beq	r22,zero,8006434 <__alt_data_end+0xfc006434>
 80066e8:	bd7fffc3 	ldbu	r21,-1(r23)
 80066ec:	b8bfffc4 	addi	r2,r23,-1
 80066f0:	1007883a 	mov	r3,r2
 80066f4:	01400e44 	movi	r5,57
 80066f8:	d9800717 	ldw	r6,28(sp)
 80066fc:	00000506 	br	8006714 <_dtoa_r+0x998>
 8006700:	18ffffc4 	addi	r3,r3,-1
 8006704:	30825e26 	beq	r6,r2,8007080 <_dtoa_r+0x1304>
 8006708:	1d400003 	ldbu	r21,0(r3)
 800670c:	102f883a 	mov	r23,r2
 8006710:	10bfffc4 	addi	r2,r2,-1
 8006714:	a9003fcc 	andi	r4,r21,255
 8006718:	2100201c 	xori	r4,r4,128
 800671c:	213fe004 	addi	r4,r4,-128
 8006720:	217ff726 	beq	r4,r5,8006700 <__alt_data_end+0xfc006700>
 8006724:	aa000044 	addi	r8,r21,1
 8006728:	12000005 	stb	r8,0(r2)
 800672c:	003f4106 	br	8006434 <__alt_data_end+0xfc006434>
 8006730:	d8c00b17 	ldw	r3,44(sp)
 8006734:	18006726 	beq	r3,zero,80068d4 <_dtoa_r+0xb58>
 8006738:	d9000317 	ldw	r4,12(sp)
 800673c:	00c00044 	movi	r3,1
 8006740:	19016a0e 	bge	r3,r4,8006cec <_dtoa_r+0xf70>
 8006744:	d8800617 	ldw	r2,24(sp)
 8006748:	d8c00917 	ldw	r3,36(sp)
 800674c:	157fffc4 	addi	r21,r2,-1
 8006750:	1d420716 	blt	r3,r21,8006f70 <_dtoa_r+0x11f4>
 8006754:	1d6bc83a 	sub	r21,r3,r21
 8006758:	d8800617 	ldw	r2,24(sp)
 800675c:	1002c716 	blt	r2,zero,800727c <_dtoa_r+0x1500>
 8006760:	dd000817 	ldw	r20,32(sp)
 8006764:	d8800617 	ldw	r2,24(sp)
 8006768:	d9800817 	ldw	r6,32(sp)
 800676c:	8009883a 	mov	r4,r16
 8006770:	01400044 	movi	r5,1
 8006774:	308d883a 	add	r6,r6,r2
 8006778:	d9800815 	stw	r6,32(sp)
 800677c:	b0ad883a 	add	r22,r22,r2
 8006780:	80083140 	call	8008314 <__i2b>
 8006784:	1023883a 	mov	r17,r2
 8006788:	a0000826 	beq	r20,zero,80067ac <_dtoa_r+0xa30>
 800678c:	0580070e 	bge	zero,r22,80067ac <_dtoa_r+0xa30>
 8006790:	b005883a 	mov	r2,r22
 8006794:	a5812016 	blt	r20,r22,8006c18 <_dtoa_r+0xe9c>
 8006798:	d8c00817 	ldw	r3,32(sp)
 800679c:	a0a9c83a 	sub	r20,r20,r2
 80067a0:	b0adc83a 	sub	r22,r22,r2
 80067a4:	1887c83a 	sub	r3,r3,r2
 80067a8:	d8c00815 	stw	r3,32(sp)
 80067ac:	d9000917 	ldw	r4,36(sp)
 80067b0:	0100140e 	bge	zero,r4,8006804 <_dtoa_r+0xa88>
 80067b4:	d9800b17 	ldw	r6,44(sp)
 80067b8:	3001e526 	beq	r6,zero,8006f50 <_dtoa_r+0x11d4>
 80067bc:	05400e0e 	bge	zero,r21,80067f8 <_dtoa_r+0xa7c>
 80067c0:	880b883a 	mov	r5,r17
 80067c4:	8009883a 	mov	r4,r16
 80067c8:	a80d883a 	mov	r6,r21
 80067cc:	80085e00 	call	80085e0 <__pow5mult>
 80067d0:	e00d883a 	mov	r6,fp
 80067d4:	8009883a 	mov	r4,r16
 80067d8:	100b883a 	mov	r5,r2
 80067dc:	1023883a 	mov	r17,r2
 80067e0:	80083500 	call	8008350 <__multiply>
 80067e4:	102f883a 	mov	r23,r2
 80067e8:	e00b883a 	mov	r5,fp
 80067ec:	8009883a 	mov	r4,r16
 80067f0:	8007f940 	call	8007f94 <_Bfree>
 80067f4:	b839883a 	mov	fp,r23
 80067f8:	d8800917 	ldw	r2,36(sp)
 80067fc:	154dc83a 	sub	r6,r2,r21
 8006800:	3001281e 	bne	r6,zero,8006ca4 <_dtoa_r+0xf28>
 8006804:	05c00044 	movi	r23,1
 8006808:	8009883a 	mov	r4,r16
 800680c:	b80b883a 	mov	r5,r23
 8006810:	80083140 	call	8008314 <__i2b>
 8006814:	d8c00a17 	ldw	r3,40(sp)
 8006818:	102b883a 	mov	r21,r2
 800681c:	00c0310e 	bge	zero,r3,80068e4 <_dtoa_r+0xb68>
 8006820:	8009883a 	mov	r4,r16
 8006824:	100b883a 	mov	r5,r2
 8006828:	180d883a 	mov	r6,r3
 800682c:	80085e00 	call	80085e0 <__pow5mult>
 8006830:	d9000317 	ldw	r4,12(sp)
 8006834:	102b883a 	mov	r21,r2
 8006838:	b9011f0e 	bge	r23,r4,8006cb8 <_dtoa_r+0xf3c>
 800683c:	0027883a 	mov	r19,zero
 8006840:	a8800417 	ldw	r2,16(r21)
 8006844:	10800104 	addi	r2,r2,4
 8006848:	1085883a 	add	r2,r2,r2
 800684c:	1085883a 	add	r2,r2,r2
 8006850:	a885883a 	add	r2,r21,r2
 8006854:	11000017 	ldw	r4,0(r2)
 8006858:	80081fc0 	call	80081fc <__hi0bits>
 800685c:	00c00804 	movi	r3,32
 8006860:	1885c83a 	sub	r2,r3,r2
 8006864:	00002506 	br	80068fc <_dtoa_r+0xb80>
 8006868:	01800044 	movi	r6,1
 800686c:	d9800c15 	stw	r6,48(sp)
 8006870:	003dec06 	br	8006024 <__alt_data_end+0xfc006024>
 8006874:	d8c00817 	ldw	r3,32(sp)
 8006878:	d9000517 	ldw	r4,20(sp)
 800687c:	d8000a15 	stw	zero,40(sp)
 8006880:	1907c83a 	sub	r3,r3,r4
 8006884:	010dc83a 	sub	r6,zero,r4
 8006888:	d8c00815 	stw	r3,32(sp)
 800688c:	d9800915 	stw	r6,36(sp)
 8006890:	003ded06 	br	8006048 <__alt_data_end+0xfc006048>
 8006894:	05adc83a 	sub	r22,zero,r22
 8006898:	dd800815 	stw	r22,32(sp)
 800689c:	002d883a 	mov	r22,zero
 80068a0:	003de406 	br	8006034 <__alt_data_end+0xfc006034>
 80068a4:	d9000517 	ldw	r4,20(sp)
 80068a8:	800e59c0 	call	800e59c <__floatsidf>
 80068ac:	1009883a 	mov	r4,r2
 80068b0:	180b883a 	mov	r5,r3
 80068b4:	b00d883a 	mov	r6,r22
 80068b8:	a80f883a 	mov	r7,r21
 80068bc:	800d1940 	call	800d194 <__eqdf2>
 80068c0:	103dc726 	beq	r2,zero,8005fe0 <__alt_data_end+0xfc005fe0>
 80068c4:	d8800517 	ldw	r2,20(sp)
 80068c8:	10bfffc4 	addi	r2,r2,-1
 80068cc:	d8800515 	stw	r2,20(sp)
 80068d0:	003dc306 	br	8005fe0 <__alt_data_end+0xfc005fe0>
 80068d4:	dd400917 	ldw	r21,36(sp)
 80068d8:	dd000817 	ldw	r20,32(sp)
 80068dc:	0023883a 	mov	r17,zero
 80068e0:	003fa906 	br	8006788 <__alt_data_end+0xfc006788>
 80068e4:	d9800317 	ldw	r6,12(sp)
 80068e8:	b981670e 	bge	r23,r6,8006e88 <_dtoa_r+0x110c>
 80068ec:	0027883a 	mov	r19,zero
 80068f0:	d8c00a17 	ldw	r3,40(sp)
 80068f4:	183fd21e 	bne	r3,zero,8006840 <__alt_data_end+0xfc006840>
 80068f8:	00800044 	movi	r2,1
 80068fc:	1585883a 	add	r2,r2,r22
 8006900:	108007cc 	andi	r2,r2,31
 8006904:	10005f26 	beq	r2,zero,8006a84 <_dtoa_r+0xd08>
 8006908:	00c00804 	movi	r3,32
 800690c:	1887c83a 	sub	r3,r3,r2
 8006910:	01000104 	movi	r4,4
 8006914:	20c2dd0e 	bge	r4,r3,800748c <_dtoa_r+0x1710>
 8006918:	d9000817 	ldw	r4,32(sp)
 800691c:	00c00704 	movi	r3,28
 8006920:	1885c83a 	sub	r2,r3,r2
 8006924:	2089883a 	add	r4,r4,r2
 8006928:	d9000815 	stw	r4,32(sp)
 800692c:	a0a9883a 	add	r20,r20,r2
 8006930:	b0ad883a 	add	r22,r22,r2
 8006934:	d8800817 	ldw	r2,32(sp)
 8006938:	0080050e 	bge	zero,r2,8006950 <_dtoa_r+0xbd4>
 800693c:	e00b883a 	mov	r5,fp
 8006940:	8009883a 	mov	r4,r16
 8006944:	100d883a 	mov	r6,r2
 8006948:	80087200 	call	8008720 <__lshift>
 800694c:	1039883a 	mov	fp,r2
 8006950:	0580050e 	bge	zero,r22,8006968 <_dtoa_r+0xbec>
 8006954:	a80b883a 	mov	r5,r21
 8006958:	8009883a 	mov	r4,r16
 800695c:	b00d883a 	mov	r6,r22
 8006960:	80087200 	call	8008720 <__lshift>
 8006964:	102b883a 	mov	r21,r2
 8006968:	d8c00c17 	ldw	r3,48(sp)
 800696c:	1801161e 	bne	r3,zero,8006dc8 <_dtoa_r+0x104c>
 8006970:	d8c00617 	ldw	r3,24(sp)
 8006974:	00c12d0e 	bge	zero,r3,8006e2c <_dtoa_r+0x10b0>
 8006978:	d8c00b17 	ldw	r3,44(sp)
 800697c:	1800571e 	bne	r3,zero,8006adc <_dtoa_r+0xd60>
 8006980:	dc800717 	ldw	r18,28(sp)
 8006984:	dcc00617 	ldw	r19,24(sp)
 8006988:	9029883a 	mov	r20,r18
 800698c:	00000206 	br	8006998 <_dtoa_r+0xc1c>
 8006990:	8007fbc0 	call	8007fbc <__multadd>
 8006994:	1039883a 	mov	fp,r2
 8006998:	e009883a 	mov	r4,fp
 800699c:	a80b883a 	mov	r5,r21
 80069a0:	8005b540 	call	8005b54 <quorem>
 80069a4:	10800c04 	addi	r2,r2,48
 80069a8:	90800005 	stb	r2,0(r18)
 80069ac:	94800044 	addi	r18,r18,1
 80069b0:	9507c83a 	sub	r3,r18,r20
 80069b4:	8009883a 	mov	r4,r16
 80069b8:	e00b883a 	mov	r5,fp
 80069bc:	01800284 	movi	r6,10
 80069c0:	000f883a 	mov	r7,zero
 80069c4:	1cfff216 	blt	r3,r19,8006990 <__alt_data_end+0xfc006990>
 80069c8:	1011883a 	mov	r8,r2
 80069cc:	d8800617 	ldw	r2,24(sp)
 80069d0:	00822e0e 	bge	zero,r2,800728c <_dtoa_r+0x1510>
 80069d4:	d9000717 	ldw	r4,28(sp)
 80069d8:	0025883a 	mov	r18,zero
 80069dc:	20af883a 	add	r23,r4,r2
 80069e0:	e00b883a 	mov	r5,fp
 80069e4:	01800044 	movi	r6,1
 80069e8:	8009883a 	mov	r4,r16
 80069ec:	da001715 	stw	r8,92(sp)
 80069f0:	80087200 	call	8008720 <__lshift>
 80069f4:	1009883a 	mov	r4,r2
 80069f8:	a80b883a 	mov	r5,r21
 80069fc:	1039883a 	mov	fp,r2
 8006a00:	80088680 	call	8008868 <__mcmp>
 8006a04:	da001717 	ldw	r8,92(sp)
 8006a08:	00816e0e 	bge	zero,r2,8006fc4 <_dtoa_r+0x1248>
 8006a0c:	b93fffc3 	ldbu	r4,-1(r23)
 8006a10:	b8bfffc4 	addi	r2,r23,-1
 8006a14:	1007883a 	mov	r3,r2
 8006a18:	01800e44 	movi	r6,57
 8006a1c:	d9c00717 	ldw	r7,28(sp)
 8006a20:	00000506 	br	8006a38 <_dtoa_r+0xcbc>
 8006a24:	18ffffc4 	addi	r3,r3,-1
 8006a28:	38811926 	beq	r7,r2,8006e90 <_dtoa_r+0x1114>
 8006a2c:	19000003 	ldbu	r4,0(r3)
 8006a30:	102f883a 	mov	r23,r2
 8006a34:	10bfffc4 	addi	r2,r2,-1
 8006a38:	21403fcc 	andi	r5,r4,255
 8006a3c:	2940201c 	xori	r5,r5,128
 8006a40:	297fe004 	addi	r5,r5,-128
 8006a44:	29bff726 	beq	r5,r6,8006a24 <__alt_data_end+0xfc006a24>
 8006a48:	21000044 	addi	r4,r4,1
 8006a4c:	11000005 	stb	r4,0(r2)
 8006a50:	8009883a 	mov	r4,r16
 8006a54:	a80b883a 	mov	r5,r21
 8006a58:	8007f940 	call	8007f94 <_Bfree>
 8006a5c:	883e7526 	beq	r17,zero,8006434 <__alt_data_end+0xfc006434>
 8006a60:	90000426 	beq	r18,zero,8006a74 <_dtoa_r+0xcf8>
 8006a64:	94400326 	beq	r18,r17,8006a74 <_dtoa_r+0xcf8>
 8006a68:	8009883a 	mov	r4,r16
 8006a6c:	900b883a 	mov	r5,r18
 8006a70:	8007f940 	call	8007f94 <_Bfree>
 8006a74:	8009883a 	mov	r4,r16
 8006a78:	880b883a 	mov	r5,r17
 8006a7c:	8007f940 	call	8007f94 <_Bfree>
 8006a80:	003e6c06 	br	8006434 <__alt_data_end+0xfc006434>
 8006a84:	00800704 	movi	r2,28
 8006a88:	d9800817 	ldw	r6,32(sp)
 8006a8c:	a0a9883a 	add	r20,r20,r2
 8006a90:	b0ad883a 	add	r22,r22,r2
 8006a94:	308d883a 	add	r6,r6,r2
 8006a98:	d9800815 	stw	r6,32(sp)
 8006a9c:	003fa506 	br	8006934 <__alt_data_end+0xfc006934>
 8006aa0:	013efb84 	movi	r4,-1042
 8006aa4:	246bc83a 	sub	r21,r4,r17
 8006aa8:	9548983a 	sll	r4,r18,r21
 8006aac:	003d1806 	br	8005f10 <__alt_data_end+0xfc005f10>
 8006ab0:	d8000c15 	stw	zero,48(sp)
 8006ab4:	003d5b06 	br	8006024 <__alt_data_end+0xfc006024>
 8006ab8:	880b883a 	mov	r5,r17
 8006abc:	8009883a 	mov	r4,r16
 8006ac0:	01800284 	movi	r6,10
 8006ac4:	000f883a 	mov	r7,zero
 8006ac8:	8007fbc0 	call	8007fbc <__multadd>
 8006acc:	1023883a 	mov	r17,r2
 8006ad0:	d8800d17 	ldw	r2,52(sp)
 8006ad4:	0082550e 	bge	zero,r2,800742c <_dtoa_r+0x16b0>
 8006ad8:	d8800615 	stw	r2,24(sp)
 8006adc:	0500050e 	bge	zero,r20,8006af4 <_dtoa_r+0xd78>
 8006ae0:	880b883a 	mov	r5,r17
 8006ae4:	8009883a 	mov	r4,r16
 8006ae8:	a00d883a 	mov	r6,r20
 8006aec:	80087200 	call	8008720 <__lshift>
 8006af0:	1023883a 	mov	r17,r2
 8006af4:	98016a1e 	bne	r19,zero,80070a0 <_dtoa_r+0x1324>
 8006af8:	8829883a 	mov	r20,r17
 8006afc:	d9000617 	ldw	r4,24(sp)
 8006b00:	dcc00717 	ldw	r19,28(sp)
 8006b04:	9480004c 	andi	r18,r18,1
 8006b08:	20bfffc4 	addi	r2,r4,-1
 8006b0c:	9885883a 	add	r2,r19,r2
 8006b10:	d8800415 	stw	r2,16(sp)
 8006b14:	dc800615 	stw	r18,24(sp)
 8006b18:	e009883a 	mov	r4,fp
 8006b1c:	a80b883a 	mov	r5,r21
 8006b20:	8005b540 	call	8005b54 <quorem>
 8006b24:	e009883a 	mov	r4,fp
 8006b28:	880b883a 	mov	r5,r17
 8006b2c:	102f883a 	mov	r23,r2
 8006b30:	80088680 	call	8008868 <__mcmp>
 8006b34:	8009883a 	mov	r4,r16
 8006b38:	a80b883a 	mov	r5,r21
 8006b3c:	a00d883a 	mov	r6,r20
 8006b40:	102d883a 	mov	r22,r2
 8006b44:	80088c80 	call	80088c8 <__mdiff>
 8006b48:	1007883a 	mov	r3,r2
 8006b4c:	10800317 	ldw	r2,12(r2)
 8006b50:	bc800c04 	addi	r18,r23,48
 8006b54:	1000971e 	bne	r2,zero,8006db4 <_dtoa_r+0x1038>
 8006b58:	180b883a 	mov	r5,r3
 8006b5c:	e009883a 	mov	r4,fp
 8006b60:	d8c01515 	stw	r3,84(sp)
 8006b64:	80088680 	call	8008868 <__mcmp>
 8006b68:	d8c01517 	ldw	r3,84(sp)
 8006b6c:	8009883a 	mov	r4,r16
 8006b70:	d8801515 	stw	r2,84(sp)
 8006b74:	180b883a 	mov	r5,r3
 8006b78:	8007f940 	call	8007f94 <_Bfree>
 8006b7c:	d8801517 	ldw	r2,84(sp)
 8006b80:	1000041e 	bne	r2,zero,8006b94 <_dtoa_r+0xe18>
 8006b84:	d9800317 	ldw	r6,12(sp)
 8006b88:	3000021e 	bne	r6,zero,8006b94 <_dtoa_r+0xe18>
 8006b8c:	d8c00617 	ldw	r3,24(sp)
 8006b90:	18007626 	beq	r3,zero,8006d6c <_dtoa_r+0xff0>
 8006b94:	b0005b16 	blt	r22,zero,8006d04 <_dtoa_r+0xf88>
 8006b98:	b000041e 	bne	r22,zero,8006bac <_dtoa_r+0xe30>
 8006b9c:	d9000317 	ldw	r4,12(sp)
 8006ba0:	2000021e 	bne	r4,zero,8006bac <_dtoa_r+0xe30>
 8006ba4:	d8c00617 	ldw	r3,24(sp)
 8006ba8:	18005626 	beq	r3,zero,8006d04 <_dtoa_r+0xf88>
 8006bac:	00814d16 	blt	zero,r2,80070e4 <_dtoa_r+0x1368>
 8006bb0:	d8c00417 	ldw	r3,16(sp)
 8006bb4:	9d800044 	addi	r22,r19,1
 8006bb8:	9c800005 	stb	r18,0(r19)
 8006bbc:	b02f883a 	mov	r23,r22
 8006bc0:	98c14c26 	beq	r19,r3,80070f4 <_dtoa_r+0x1378>
 8006bc4:	e00b883a 	mov	r5,fp
 8006bc8:	8009883a 	mov	r4,r16
 8006bcc:	01800284 	movi	r6,10
 8006bd0:	000f883a 	mov	r7,zero
 8006bd4:	8007fbc0 	call	8007fbc <__multadd>
 8006bd8:	1039883a 	mov	fp,r2
 8006bdc:	8d006d26 	beq	r17,r20,8006d94 <_dtoa_r+0x1018>
 8006be0:	880b883a 	mov	r5,r17
 8006be4:	01800284 	movi	r6,10
 8006be8:	000f883a 	mov	r7,zero
 8006bec:	8009883a 	mov	r4,r16
 8006bf0:	8007fbc0 	call	8007fbc <__multadd>
 8006bf4:	a00b883a 	mov	r5,r20
 8006bf8:	8009883a 	mov	r4,r16
 8006bfc:	01800284 	movi	r6,10
 8006c00:	000f883a 	mov	r7,zero
 8006c04:	1023883a 	mov	r17,r2
 8006c08:	8007fbc0 	call	8007fbc <__multadd>
 8006c0c:	1029883a 	mov	r20,r2
 8006c10:	b027883a 	mov	r19,r22
 8006c14:	003fc006 	br	8006b18 <__alt_data_end+0xfc006b18>
 8006c18:	a005883a 	mov	r2,r20
 8006c1c:	003ede06 	br	8006798 <__alt_data_end+0xfc006798>
 8006c20:	01000044 	movi	r4,1
 8006c24:	d9000b15 	stw	r4,44(sp)
 8006c28:	d9802217 	ldw	r6,136(sp)
 8006c2c:	0180dc0e 	bge	zero,r6,8006fa0 <_dtoa_r+0x1224>
 8006c30:	3023883a 	mov	r17,r6
 8006c34:	d9800d15 	stw	r6,52(sp)
 8006c38:	d9800615 	stw	r6,24(sp)
 8006c3c:	003d1e06 	br	80060b8 <__alt_data_end+0xfc0060b8>
 8006c40:	d8800617 	ldw	r2,24(sp)
 8006c44:	00be3716 	blt	zero,r2,8006524 <__alt_data_end+0xfc006524>
 8006c48:	1000be1e 	bne	r2,zero,8006f44 <_dtoa_r+0x11c8>
 8006c4c:	8809883a 	mov	r4,r17
 8006c50:	a00b883a 	mov	r5,r20
 8006c54:	000d883a 	mov	r6,zero
 8006c58:	01d00534 	movhi	r7,16404
 8006c5c:	800d3d80 	call	800d3d8 <__muldf3>
 8006c60:	1009883a 	mov	r4,r2
 8006c64:	180b883a 	mov	r5,r3
 8006c68:	900d883a 	mov	r6,r18
 8006c6c:	980f883a 	mov	r7,r19
 8006c70:	800d2180 	call	800d218 <__gedf2>
 8006c74:	002b883a 	mov	r21,zero
 8006c78:	0023883a 	mov	r17,zero
 8006c7c:	10007a16 	blt	r2,zero,8006e68 <_dtoa_r+0x10ec>
 8006c80:	d9002217 	ldw	r4,136(sp)
 8006c84:	ddc00717 	ldw	r23,28(sp)
 8006c88:	0108303a 	nor	r4,zero,r4
 8006c8c:	d9000515 	stw	r4,20(sp)
 8006c90:	8009883a 	mov	r4,r16
 8006c94:	a80b883a 	mov	r5,r21
 8006c98:	8007f940 	call	8007f94 <_Bfree>
 8006c9c:	883f751e 	bne	r17,zero,8006a74 <__alt_data_end+0xfc006a74>
 8006ca0:	003de406 	br	8006434 <__alt_data_end+0xfc006434>
 8006ca4:	e00b883a 	mov	r5,fp
 8006ca8:	8009883a 	mov	r4,r16
 8006cac:	80085e00 	call	80085e0 <__pow5mult>
 8006cb0:	1039883a 	mov	fp,r2
 8006cb4:	003ed306 	br	8006804 <__alt_data_end+0xfc006804>
 8006cb8:	903ee01e 	bne	r18,zero,800683c <__alt_data_end+0xfc00683c>
 8006cbc:	00800434 	movhi	r2,16
 8006cc0:	10bfffc4 	addi	r2,r2,-1
 8006cc4:	9884703a 	and	r2,r19,r2
 8006cc8:	103f081e 	bne	r2,zero,80068ec <__alt_data_end+0xfc0068ec>
 8006ccc:	9cdffc2c 	andhi	r19,r19,32752
 8006cd0:	983f0626 	beq	r19,zero,80068ec <__alt_data_end+0xfc0068ec>
 8006cd4:	d8800817 	ldw	r2,32(sp)
 8006cd8:	b5800044 	addi	r22,r22,1
 8006cdc:	04c00044 	movi	r19,1
 8006ce0:	10800044 	addi	r2,r2,1
 8006ce4:	d8800815 	stw	r2,32(sp)
 8006ce8:	003f0106 	br	80068f0 <__alt_data_end+0xfc0068f0>
 8006cec:	d9800f17 	ldw	r6,60(sp)
 8006cf0:	30016826 	beq	r6,zero,8007294 <_dtoa_r+0x1518>
 8006cf4:	10810cc4 	addi	r2,r2,1075
 8006cf8:	dd400917 	ldw	r21,36(sp)
 8006cfc:	dd000817 	ldw	r20,32(sp)
 8006d00:	003e9906 	br	8006768 <__alt_data_end+0xfc006768>
 8006d04:	9011883a 	mov	r8,r18
 8006d08:	4007883a 	mov	r3,r8
 8006d0c:	e02d883a 	mov	r22,fp
 8006d10:	0080100e 	bge	zero,r2,8006d54 <_dtoa_r+0xfd8>
 8006d14:	01800044 	movi	r6,1
 8006d18:	8009883a 	mov	r4,r16
 8006d1c:	e00b883a 	mov	r5,fp
 8006d20:	da001515 	stw	r8,84(sp)
 8006d24:	da001715 	stw	r8,92(sp)
 8006d28:	80087200 	call	8008720 <__lshift>
 8006d2c:	1009883a 	mov	r4,r2
 8006d30:	a80b883a 	mov	r5,r21
 8006d34:	102d883a 	mov	r22,r2
 8006d38:	80088680 	call	8008868 <__mcmp>
 8006d3c:	d8c01517 	ldw	r3,84(sp)
 8006d40:	da001717 	ldw	r8,92(sp)
 8006d44:	0081a50e 	bge	zero,r2,80073dc <_dtoa_r+0x1660>
 8006d48:	00800e44 	movi	r2,57
 8006d4c:	40817b26 	beq	r8,r2,800733c <_dtoa_r+0x15c0>
 8006d50:	40c00044 	addi	r3,r8,1
 8006d54:	8825883a 	mov	r18,r17
 8006d58:	9dc00044 	addi	r23,r19,1
 8006d5c:	98c00005 	stb	r3,0(r19)
 8006d60:	a023883a 	mov	r17,r20
 8006d64:	b039883a 	mov	fp,r22
 8006d68:	003f3906 	br	8006a50 <__alt_data_end+0xfc006a50>
 8006d6c:	00800e44 	movi	r2,57
 8006d70:	9011883a 	mov	r8,r18
 8006d74:	90817226 	beq	r18,r2,8007340 <_dtoa_r+0x15c4>
 8006d78:	0580010e 	bge	zero,r22,8006d80 <_dtoa_r+0x1004>
 8006d7c:	ba000c44 	addi	r8,r23,49
 8006d80:	8825883a 	mov	r18,r17
 8006d84:	9dc00044 	addi	r23,r19,1
 8006d88:	9a000005 	stb	r8,0(r19)
 8006d8c:	a023883a 	mov	r17,r20
 8006d90:	003f2f06 	br	8006a50 <__alt_data_end+0xfc006a50>
 8006d94:	880b883a 	mov	r5,r17
 8006d98:	8009883a 	mov	r4,r16
 8006d9c:	01800284 	movi	r6,10
 8006da0:	000f883a 	mov	r7,zero
 8006da4:	8007fbc0 	call	8007fbc <__multadd>
 8006da8:	1023883a 	mov	r17,r2
 8006dac:	1029883a 	mov	r20,r2
 8006db0:	003f9706 	br	8006c10 <__alt_data_end+0xfc006c10>
 8006db4:	8009883a 	mov	r4,r16
 8006db8:	180b883a 	mov	r5,r3
 8006dbc:	8007f940 	call	8007f94 <_Bfree>
 8006dc0:	00800044 	movi	r2,1
 8006dc4:	003f7306 	br	8006b94 <__alt_data_end+0xfc006b94>
 8006dc8:	e009883a 	mov	r4,fp
 8006dcc:	a80b883a 	mov	r5,r21
 8006dd0:	80088680 	call	8008868 <__mcmp>
 8006dd4:	103ee60e 	bge	r2,zero,8006970 <__alt_data_end+0xfc006970>
 8006dd8:	8009883a 	mov	r4,r16
 8006ddc:	e00b883a 	mov	r5,fp
 8006de0:	01800284 	movi	r6,10
 8006de4:	000f883a 	mov	r7,zero
 8006de8:	8007fbc0 	call	8007fbc <__multadd>
 8006dec:	d9000517 	ldw	r4,20(sp)
 8006df0:	d9800b17 	ldw	r6,44(sp)
 8006df4:	1039883a 	mov	fp,r2
 8006df8:	213fffc4 	addi	r4,r4,-1
 8006dfc:	d9000515 	stw	r4,20(sp)
 8006e00:	303f2d1e 	bne	r6,zero,8006ab8 <__alt_data_end+0xfc006ab8>
 8006e04:	d9000d17 	ldw	r4,52(sp)
 8006e08:	0101780e 	bge	zero,r4,80073ec <_dtoa_r+0x1670>
 8006e0c:	d9000615 	stw	r4,24(sp)
 8006e10:	003edb06 	br	8006980 <__alt_data_end+0xfc006980>
 8006e14:	00800084 	movi	r2,2
 8006e18:	30818e1e 	bne	r6,r2,8007454 <_dtoa_r+0x16d8>
 8006e1c:	d8000b15 	stw	zero,44(sp)
 8006e20:	003f8106 	br	8006c28 <__alt_data_end+0xfc006c28>
 8006e24:	d8800717 	ldw	r2,28(sp)
 8006e28:	003c0306 	br	8005e38 <__alt_data_end+0xfc005e38>
 8006e2c:	d9000317 	ldw	r4,12(sp)
 8006e30:	00800084 	movi	r2,2
 8006e34:	113ed00e 	bge	r2,r4,8006978 <__alt_data_end+0xfc006978>
 8006e38:	d8c00617 	ldw	r3,24(sp)
 8006e3c:	183f901e 	bne	r3,zero,8006c80 <__alt_data_end+0xfc006c80>
 8006e40:	a80b883a 	mov	r5,r21
 8006e44:	8009883a 	mov	r4,r16
 8006e48:	01800144 	movi	r6,5
 8006e4c:	000f883a 	mov	r7,zero
 8006e50:	8007fbc0 	call	8007fbc <__multadd>
 8006e54:	e009883a 	mov	r4,fp
 8006e58:	100b883a 	mov	r5,r2
 8006e5c:	102b883a 	mov	r21,r2
 8006e60:	80088680 	call	8008868 <__mcmp>
 8006e64:	00bf860e 	bge	zero,r2,8006c80 <__alt_data_end+0xfc006c80>
 8006e68:	d9800717 	ldw	r6,28(sp)
 8006e6c:	00800c44 	movi	r2,49
 8006e70:	30800005 	stb	r2,0(r6)
 8006e74:	d8800517 	ldw	r2,20(sp)
 8006e78:	35c00044 	addi	r23,r6,1
 8006e7c:	10800044 	addi	r2,r2,1
 8006e80:	d8800515 	stw	r2,20(sp)
 8006e84:	003f8206 	br	8006c90 <__alt_data_end+0xfc006c90>
 8006e88:	903e981e 	bne	r18,zero,80068ec <__alt_data_end+0xfc0068ec>
 8006e8c:	003f8b06 	br	8006cbc <__alt_data_end+0xfc006cbc>
 8006e90:	d9800517 	ldw	r6,20(sp)
 8006e94:	d8c00717 	ldw	r3,28(sp)
 8006e98:	00800c44 	movi	r2,49
 8006e9c:	31800044 	addi	r6,r6,1
 8006ea0:	d9800515 	stw	r6,20(sp)
 8006ea4:	18800005 	stb	r2,0(r3)
 8006ea8:	003ee906 	br	8006a50 <__alt_data_end+0xfc006a50>
 8006eac:	dc000317 	ldw	r16,12(sp)
 8006eb0:	003d6006 	br	8006434 <__alt_data_end+0xfc006434>
 8006eb4:	8809883a 	mov	r4,r17
 8006eb8:	800e59c0 	call	800e59c <__floatsidf>
 8006ebc:	a009883a 	mov	r4,r20
 8006ec0:	a80b883a 	mov	r5,r21
 8006ec4:	100d883a 	mov	r6,r2
 8006ec8:	180f883a 	mov	r7,r3
 8006ecc:	800d3d80 	call	800d3d8 <__muldf3>
 8006ed0:	1009883a 	mov	r4,r2
 8006ed4:	180b883a 	mov	r5,r3
 8006ed8:	000d883a 	mov	r6,zero
 8006edc:	01d00734 	movhi	r7,16412
 8006ee0:	800bf780 	call	800bf78 <__adddf3>
 8006ee4:	1023883a 	mov	r17,r2
 8006ee8:	00bf3034 	movhi	r2,64704
 8006eec:	1885883a 	add	r2,r3,r2
 8006ef0:	d8800e15 	stw	r2,56(sp)
 8006ef4:	a009883a 	mov	r4,r20
 8006ef8:	a80b883a 	mov	r5,r21
 8006efc:	000d883a 	mov	r6,zero
 8006f00:	01d00534 	movhi	r7,16404
 8006f04:	800dc440 	call	800dc44 <__subdf3>
 8006f08:	d9c00e17 	ldw	r7,56(sp)
 8006f0c:	1009883a 	mov	r4,r2
 8006f10:	180b883a 	mov	r5,r3
 8006f14:	880d883a 	mov	r6,r17
 8006f18:	102b883a 	mov	r21,r2
 8006f1c:	1829883a 	mov	r20,r3
 8006f20:	800d2180 	call	800d218 <__gedf2>
 8006f24:	00807716 	blt	zero,r2,8007104 <_dtoa_r+0x1388>
 8006f28:	d8800e17 	ldw	r2,56(sp)
 8006f2c:	a809883a 	mov	r4,r21
 8006f30:	a00b883a 	mov	r5,r20
 8006f34:	11e0003c 	xorhi	r7,r2,32768
 8006f38:	880d883a 	mov	r6,r17
 8006f3c:	800d2f80 	call	800d2f8 <__ledf2>
 8006f40:	103d6b0e 	bge	r2,zero,80064f0 <__alt_data_end+0xfc0064f0>
 8006f44:	002b883a 	mov	r21,zero
 8006f48:	0023883a 	mov	r17,zero
 8006f4c:	003f4c06 	br	8006c80 <__alt_data_end+0xfc006c80>
 8006f50:	d9800917 	ldw	r6,36(sp)
 8006f54:	e00b883a 	mov	r5,fp
 8006f58:	8009883a 	mov	r4,r16
 8006f5c:	80085e00 	call	80085e0 <__pow5mult>
 8006f60:	1039883a 	mov	fp,r2
 8006f64:	003e2706 	br	8006804 <__alt_data_end+0xfc006804>
 8006f68:	d8000b15 	stw	zero,44(sp)
 8006f6c:	003c4906 	br	8006094 <__alt_data_end+0xfc006094>
 8006f70:	d9000917 	ldw	r4,36(sp)
 8006f74:	d9800a17 	ldw	r6,40(sp)
 8006f78:	dd400915 	stw	r21,36(sp)
 8006f7c:	a905c83a 	sub	r2,r21,r4
 8006f80:	308d883a 	add	r6,r6,r2
 8006f84:	d9800a15 	stw	r6,40(sp)
 8006f88:	002b883a 	mov	r21,zero
 8006f8c:	003df206 	br	8006758 <__alt_data_end+0xfc006758>
 8006f90:	dc800e15 	stw	r18,56(sp)
 8006f94:	982b883a 	mov	r21,r19
 8006f98:	04400084 	movi	r17,2
 8006f9c:	003c7406 	br	8006170 <__alt_data_end+0xfc006170>
 8006fa0:	04400044 	movi	r17,1
 8006fa4:	dc400d15 	stw	r17,52(sp)
 8006fa8:	dc400615 	stw	r17,24(sp)
 8006fac:	dc402215 	stw	r17,136(sp)
 8006fb0:	80001115 	stw	zero,68(r16)
 8006fb4:	000b883a 	mov	r5,zero
 8006fb8:	003c4a06 	br	80060e4 <__alt_data_end+0xfc0060e4>
 8006fbc:	3023883a 	mov	r17,r6
 8006fc0:	003ffb06 	br	8006fb0 <__alt_data_end+0xfc006fb0>
 8006fc4:	1000021e 	bne	r2,zero,8006fd0 <_dtoa_r+0x1254>
 8006fc8:	4200004c 	andi	r8,r8,1
 8006fcc:	403e8f1e 	bne	r8,zero,8006a0c <__alt_data_end+0xfc006a0c>
 8006fd0:	01000c04 	movi	r4,48
 8006fd4:	00000106 	br	8006fdc <_dtoa_r+0x1260>
 8006fd8:	102f883a 	mov	r23,r2
 8006fdc:	b8bfffc4 	addi	r2,r23,-1
 8006fe0:	10c00007 	ldb	r3,0(r2)
 8006fe4:	193ffc26 	beq	r3,r4,8006fd8 <__alt_data_end+0xfc006fd8>
 8006fe8:	003e9906 	br	8006a50 <__alt_data_end+0xfc006a50>
 8006fec:	d9000517 	ldw	r4,20(sp)
 8006ff0:	012fc83a 	sub	r23,zero,r4
 8006ff4:	b800ad26 	beq	r23,zero,80072ac <_dtoa_r+0x1530>
 8006ff8:	b88003cc 	andi	r2,r23,15
 8006ffc:	100490fa 	slli	r2,r2,3
 8007000:	00c20074 	movhi	r3,2049
 8007004:	18c7cb04 	addi	r3,r3,7980
 8007008:	1885883a 	add	r2,r3,r2
 800700c:	11800017 	ldw	r6,0(r2)
 8007010:	11c00117 	ldw	r7,4(r2)
 8007014:	b82fd13a 	srai	r23,r23,4
 8007018:	9009883a 	mov	r4,r18
 800701c:	980b883a 	mov	r5,r19
 8007020:	800d3d80 	call	800d3d8 <__muldf3>
 8007024:	1029883a 	mov	r20,r2
 8007028:	182b883a 	mov	r21,r3
 800702c:	b800f426 	beq	r23,zero,8007400 <_dtoa_r+0x1684>
 8007030:	02020074 	movhi	r8,2049
 8007034:	4207c104 	addi	r8,r8,7940
 8007038:	8029883a 	mov	r20,r16
 800703c:	04400084 	movi	r17,2
 8007040:	4021883a 	mov	r16,r8
 8007044:	b980004c 	andi	r6,r23,1
 8007048:	1009883a 	mov	r4,r2
 800704c:	b82fd07a 	srai	r23,r23,1
 8007050:	180b883a 	mov	r5,r3
 8007054:	30000426 	beq	r6,zero,8007068 <_dtoa_r+0x12ec>
 8007058:	81800017 	ldw	r6,0(r16)
 800705c:	81c00117 	ldw	r7,4(r16)
 8007060:	8c400044 	addi	r17,r17,1
 8007064:	800d3d80 	call	800d3d8 <__muldf3>
 8007068:	84000204 	addi	r16,r16,8
 800706c:	b83ff51e 	bne	r23,zero,8007044 <__alt_data_end+0xfc007044>
 8007070:	a021883a 	mov	r16,r20
 8007074:	182b883a 	mov	r21,r3
 8007078:	1029883a 	mov	r20,r2
 800707c:	003c5506 	br	80061d4 <__alt_data_end+0xfc0061d4>
 8007080:	d9800517 	ldw	r6,20(sp)
 8007084:	d9000717 	ldw	r4,28(sp)
 8007088:	00c00c04 	movi	r3,48
 800708c:	31800044 	addi	r6,r6,1
 8007090:	d9800515 	stw	r6,20(sp)
 8007094:	20c00005 	stb	r3,0(r4)
 8007098:	02000c44 	movi	r8,49
 800709c:	003da206 	br	8006728 <__alt_data_end+0xfc006728>
 80070a0:	89400117 	ldw	r5,4(r17)
 80070a4:	8009883a 	mov	r4,r16
 80070a8:	8007eec0 	call	8007eec <_Balloc>
 80070ac:	89800417 	ldw	r6,16(r17)
 80070b0:	11000304 	addi	r4,r2,12
 80070b4:	89400304 	addi	r5,r17,12
 80070b8:	31800084 	addi	r6,r6,2
 80070bc:	318d883a 	add	r6,r6,r6
 80070c0:	318d883a 	add	r6,r6,r6
 80070c4:	1027883a 	mov	r19,r2
 80070c8:	8007c580 	call	8007c58 <memcpy>
 80070cc:	8009883a 	mov	r4,r16
 80070d0:	980b883a 	mov	r5,r19
 80070d4:	01800044 	movi	r6,1
 80070d8:	80087200 	call	8008720 <__lshift>
 80070dc:	1029883a 	mov	r20,r2
 80070e0:	003e8606 	br	8006afc <__alt_data_end+0xfc006afc>
 80070e4:	00800e44 	movi	r2,57
 80070e8:	90809526 	beq	r18,r2,8007340 <_dtoa_r+0x15c4>
 80070ec:	92000044 	addi	r8,r18,1
 80070f0:	003f2306 	br	8006d80 <__alt_data_end+0xfc006d80>
 80070f4:	9011883a 	mov	r8,r18
 80070f8:	8825883a 	mov	r18,r17
 80070fc:	a023883a 	mov	r17,r20
 8007100:	003e3706 	br	80069e0 <__alt_data_end+0xfc0069e0>
 8007104:	002b883a 	mov	r21,zero
 8007108:	0023883a 	mov	r17,zero
 800710c:	003f5606 	br	8006e68 <__alt_data_end+0xfc006e68>
 8007110:	51bfffc4 	addi	r6,r10,-1
 8007114:	300490fa 	slli	r2,r6,3
 8007118:	00c20074 	movhi	r3,2049
 800711c:	18c7cb04 	addi	r3,r3,7980
 8007120:	1885883a 	add	r2,r3,r2
 8007124:	d9c00e17 	ldw	r7,56(sp)
 8007128:	11000017 	ldw	r4,0(r2)
 800712c:	11400117 	ldw	r5,4(r2)
 8007130:	d8800717 	ldw	r2,28(sp)
 8007134:	d9801015 	stw	r6,64(sp)
 8007138:	880d883a 	mov	r6,r17
 800713c:	da801615 	stw	r10,88(sp)
 8007140:	15c00044 	addi	r23,r2,1
 8007144:	800d3d80 	call	800d3d8 <__muldf3>
 8007148:	a80b883a 	mov	r5,r21
 800714c:	a009883a 	mov	r4,r20
 8007150:	d8c01115 	stw	r3,68(sp)
 8007154:	d8800e15 	stw	r2,56(sp)
 8007158:	800e5140 	call	800e514 <__fixdfsi>
 800715c:	1009883a 	mov	r4,r2
 8007160:	1023883a 	mov	r17,r2
 8007164:	800e59c0 	call	800e59c <__floatsidf>
 8007168:	a009883a 	mov	r4,r20
 800716c:	a80b883a 	mov	r5,r21
 8007170:	100d883a 	mov	r6,r2
 8007174:	180f883a 	mov	r7,r3
 8007178:	800dc440 	call	800dc44 <__subdf3>
 800717c:	1813883a 	mov	r9,r3
 8007180:	d8c00717 	ldw	r3,28(sp)
 8007184:	8c400c04 	addi	r17,r17,48
 8007188:	1011883a 	mov	r8,r2
 800718c:	1c400005 	stb	r17,0(r3)
 8007190:	da801617 	ldw	r10,88(sp)
 8007194:	00800044 	movi	r2,1
 8007198:	50802326 	beq	r10,r2,8007228 <_dtoa_r+0x14ac>
 800719c:	d8800717 	ldw	r2,28(sp)
 80071a0:	b82b883a 	mov	r21,r23
 80071a4:	dc001315 	stw	r16,76(sp)
 80071a8:	12a9883a 	add	r20,r2,r10
 80071ac:	4807883a 	mov	r3,r9
 80071b0:	4005883a 	mov	r2,r8
 80071b4:	dc801415 	stw	r18,80(sp)
 80071b8:	000d883a 	mov	r6,zero
 80071bc:	01d00934 	movhi	r7,16420
 80071c0:	1009883a 	mov	r4,r2
 80071c4:	180b883a 	mov	r5,r3
 80071c8:	800d3d80 	call	800d3d8 <__muldf3>
 80071cc:	180b883a 	mov	r5,r3
 80071d0:	1009883a 	mov	r4,r2
 80071d4:	1821883a 	mov	r16,r3
 80071d8:	1025883a 	mov	r18,r2
 80071dc:	800e5140 	call	800e514 <__fixdfsi>
 80071e0:	1009883a 	mov	r4,r2
 80071e4:	1023883a 	mov	r17,r2
 80071e8:	800e59c0 	call	800e59c <__floatsidf>
 80071ec:	9009883a 	mov	r4,r18
 80071f0:	800b883a 	mov	r5,r16
 80071f4:	100d883a 	mov	r6,r2
 80071f8:	180f883a 	mov	r7,r3
 80071fc:	8c400c04 	addi	r17,r17,48
 8007200:	800dc440 	call	800dc44 <__subdf3>
 8007204:	ad400044 	addi	r21,r21,1
 8007208:	ac7fffc5 	stb	r17,-1(r21)
 800720c:	ad3fea1e 	bne	r21,r20,80071b8 <__alt_data_end+0xfc0071b8>
 8007210:	1813883a 	mov	r9,r3
 8007214:	d8c01017 	ldw	r3,64(sp)
 8007218:	dc001317 	ldw	r16,76(sp)
 800721c:	dc801417 	ldw	r18,80(sp)
 8007220:	1011883a 	mov	r8,r2
 8007224:	b8ef883a 	add	r23,r23,r3
 8007228:	d9000e17 	ldw	r4,56(sp)
 800722c:	d9401117 	ldw	r5,68(sp)
 8007230:	000d883a 	mov	r6,zero
 8007234:	01cff834 	movhi	r7,16352
 8007238:	da001715 	stw	r8,92(sp)
 800723c:	da401515 	stw	r9,84(sp)
 8007240:	800bf780 	call	800bf78 <__adddf3>
 8007244:	da001717 	ldw	r8,92(sp)
 8007248:	da401517 	ldw	r9,84(sp)
 800724c:	1009883a 	mov	r4,r2
 8007250:	400d883a 	mov	r6,r8
 8007254:	480f883a 	mov	r7,r9
 8007258:	180b883a 	mov	r5,r3
 800725c:	800d2f80 	call	800d2f8 <__ledf2>
 8007260:	da001717 	ldw	r8,92(sp)
 8007264:	da401517 	ldw	r9,84(sp)
 8007268:	10003b0e 	bge	r2,zero,8007358 <_dtoa_r+0x15dc>
 800726c:	d9001217 	ldw	r4,72(sp)
 8007270:	bd7fffc3 	ldbu	r21,-1(r23)
 8007274:	d9000515 	stw	r4,20(sp)
 8007278:	003d1c06 	br	80066ec <__alt_data_end+0xfc0066ec>
 800727c:	d8c00817 	ldw	r3,32(sp)
 8007280:	18a9c83a 	sub	r20,r3,r2
 8007284:	0005883a 	mov	r2,zero
 8007288:	003d3706 	br	8006768 <__alt_data_end+0xfc006768>
 800728c:	00800044 	movi	r2,1
 8007290:	003dd006 	br	80069d4 <__alt_data_end+0xfc0069d4>
 8007294:	d8c00217 	ldw	r3,8(sp)
 8007298:	00800d84 	movi	r2,54
 800729c:	dd400917 	ldw	r21,36(sp)
 80072a0:	10c5c83a 	sub	r2,r2,r3
 80072a4:	dd000817 	ldw	r20,32(sp)
 80072a8:	003d2f06 	br	8006768 <__alt_data_end+0xfc006768>
 80072ac:	9029883a 	mov	r20,r18
 80072b0:	982b883a 	mov	r21,r19
 80072b4:	04400084 	movi	r17,2
 80072b8:	003bc606 	br	80061d4 <__alt_data_end+0xfc0061d4>
 80072bc:	d8800617 	ldw	r2,24(sp)
 80072c0:	103efc26 	beq	r2,zero,8006eb4 <__alt_data_end+0xfc006eb4>
 80072c4:	d8c00d17 	ldw	r3,52(sp)
 80072c8:	00fc890e 	bge	zero,r3,80064f0 <__alt_data_end+0xfc0064f0>
 80072cc:	a80b883a 	mov	r5,r21
 80072d0:	a009883a 	mov	r4,r20
 80072d4:	000d883a 	mov	r6,zero
 80072d8:	01d00934 	movhi	r7,16420
 80072dc:	800d3d80 	call	800d3d8 <__muldf3>
 80072e0:	89000044 	addi	r4,r17,1
 80072e4:	1029883a 	mov	r20,r2
 80072e8:	182b883a 	mov	r21,r3
 80072ec:	800e59c0 	call	800e59c <__floatsidf>
 80072f0:	a009883a 	mov	r4,r20
 80072f4:	a80b883a 	mov	r5,r21
 80072f8:	100d883a 	mov	r6,r2
 80072fc:	180f883a 	mov	r7,r3
 8007300:	800d3d80 	call	800d3d8 <__muldf3>
 8007304:	1009883a 	mov	r4,r2
 8007308:	180b883a 	mov	r5,r3
 800730c:	000d883a 	mov	r6,zero
 8007310:	01d00734 	movhi	r7,16412
 8007314:	800bf780 	call	800bf78 <__adddf3>
 8007318:	d9000517 	ldw	r4,20(sp)
 800731c:	1023883a 	mov	r17,r2
 8007320:	00bf3034 	movhi	r2,64704
 8007324:	213fffc4 	addi	r4,r4,-1
 8007328:	1885883a 	add	r2,r3,r2
 800732c:	d9001215 	stw	r4,72(sp)
 8007330:	d8800e15 	stw	r2,56(sp)
 8007334:	da800d17 	ldw	r10,52(sp)
 8007338:	003bc306 	br	8006248 <__alt_data_end+0xfc006248>
 800733c:	b039883a 	mov	fp,r22
 8007340:	01000e44 	movi	r4,57
 8007344:	8825883a 	mov	r18,r17
 8007348:	9dc00044 	addi	r23,r19,1
 800734c:	99000005 	stb	r4,0(r19)
 8007350:	a023883a 	mov	r17,r20
 8007354:	003dae06 	br	8006a10 <__alt_data_end+0xfc006a10>
 8007358:	d9800e17 	ldw	r6,56(sp)
 800735c:	d9c01117 	ldw	r7,68(sp)
 8007360:	0009883a 	mov	r4,zero
 8007364:	014ff834 	movhi	r5,16352
 8007368:	da001715 	stw	r8,92(sp)
 800736c:	da401515 	stw	r9,84(sp)
 8007370:	800dc440 	call	800dc44 <__subdf3>
 8007374:	da001717 	ldw	r8,92(sp)
 8007378:	da401517 	ldw	r9,84(sp)
 800737c:	1009883a 	mov	r4,r2
 8007380:	180b883a 	mov	r5,r3
 8007384:	400d883a 	mov	r6,r8
 8007388:	480f883a 	mov	r7,r9
 800738c:	800d2180 	call	800d218 <__gedf2>
 8007390:	00bc570e 	bge	zero,r2,80064f0 <__alt_data_end+0xfc0064f0>
 8007394:	01000c04 	movi	r4,48
 8007398:	00000106 	br	80073a0 <_dtoa_r+0x1624>
 800739c:	102f883a 	mov	r23,r2
 80073a0:	b8bfffc4 	addi	r2,r23,-1
 80073a4:	10c00007 	ldb	r3,0(r2)
 80073a8:	193ffc26 	beq	r3,r4,800739c <__alt_data_end+0xfc00739c>
 80073ac:	d9801217 	ldw	r6,72(sp)
 80073b0:	d9800515 	stw	r6,20(sp)
 80073b4:	003c1f06 	br	8006434 <__alt_data_end+0xfc006434>
 80073b8:	d8801217 	ldw	r2,72(sp)
 80073bc:	dc001117 	ldw	r16,68(sp)
 80073c0:	d8800515 	stw	r2,20(sp)
 80073c4:	003cc906 	br	80066ec <__alt_data_end+0xfc0066ec>
 80073c8:	dd801317 	ldw	r22,76(sp)
 80073cc:	dc001117 	ldw	r16,68(sp)
 80073d0:	dcc01417 	ldw	r19,80(sp)
 80073d4:	dc801017 	ldw	r18,64(sp)
 80073d8:	003c4506 	br	80064f0 <__alt_data_end+0xfc0064f0>
 80073dc:	103e5d1e 	bne	r2,zero,8006d54 <__alt_data_end+0xfc006d54>
 80073e0:	4080004c 	andi	r2,r8,1
 80073e4:	103e5b26 	beq	r2,zero,8006d54 <__alt_data_end+0xfc006d54>
 80073e8:	003e5706 	br	8006d48 <__alt_data_end+0xfc006d48>
 80073ec:	d8c00317 	ldw	r3,12(sp)
 80073f0:	00800084 	movi	r2,2
 80073f4:	10c00a16 	blt	r2,r3,8007420 <_dtoa_r+0x16a4>
 80073f8:	d9000d17 	ldw	r4,52(sp)
 80073fc:	003e8306 	br	8006e0c <__alt_data_end+0xfc006e0c>
 8007400:	04400084 	movi	r17,2
 8007404:	003b7306 	br	80061d4 <__alt_data_end+0xfc0061d4>
 8007408:	d9801217 	ldw	r6,72(sp)
 800740c:	d9800515 	stw	r6,20(sp)
 8007410:	003cb606 	br	80066ec <__alt_data_end+0xfc0066ec>
 8007414:	d9001217 	ldw	r4,72(sp)
 8007418:	d9000515 	stw	r4,20(sp)
 800741c:	003c0506 	br	8006434 <__alt_data_end+0xfc006434>
 8007420:	d9800d17 	ldw	r6,52(sp)
 8007424:	d9800615 	stw	r6,24(sp)
 8007428:	003e8306 	br	8006e38 <__alt_data_end+0xfc006e38>
 800742c:	d9800317 	ldw	r6,12(sp)
 8007430:	00800084 	movi	r2,2
 8007434:	11800216 	blt	r2,r6,8007440 <_dtoa_r+0x16c4>
 8007438:	d8800d17 	ldw	r2,52(sp)
 800743c:	003da606 	br	8006ad8 <__alt_data_end+0xfc006ad8>
 8007440:	d8800d17 	ldw	r2,52(sp)
 8007444:	d8800615 	stw	r2,24(sp)
 8007448:	003e7b06 	br	8006e38 <__alt_data_end+0xfc006e38>
 800744c:	05000044 	movi	r20,1
 8007450:	003b0506 	br	8006068 <__alt_data_end+0xfc006068>
 8007454:	8009883a 	mov	r4,r16
 8007458:	80001115 	stw	zero,68(r16)
 800745c:	000b883a 	mov	r5,zero
 8007460:	8007eec0 	call	8007eec <_Balloc>
 8007464:	d8800715 	stw	r2,28(sp)
 8007468:	d8c00717 	ldw	r3,28(sp)
 800746c:	00bfffc4 	movi	r2,-1
 8007470:	01000044 	movi	r4,1
 8007474:	d8800615 	stw	r2,24(sp)
 8007478:	80c01015 	stw	r3,64(r16)
 800747c:	d9000b15 	stw	r4,44(sp)
 8007480:	d8002215 	stw	zero,136(sp)
 8007484:	d8800d15 	stw	r2,52(sp)
 8007488:	003c1906 	br	80064f0 <__alt_data_end+0xfc0064f0>
 800748c:	193d2926 	beq	r3,r4,8006934 <__alt_data_end+0xfc006934>
 8007490:	00c00f04 	movi	r3,60
 8007494:	1885c83a 	sub	r2,r3,r2
 8007498:	003d7b06 	br	8006a88 <__alt_data_end+0xfc006a88>
 800749c:	000b883a 	mov	r5,zero
 80074a0:	003b1006 	br	80060e4 <__alt_data_end+0xfc0060e4>

080074a4 <__sflags>:
 80074a4:	28800007 	ldb	r2,0(r5)
 80074a8:	00c01c84 	movi	r3,114
 80074ac:	10c01826 	beq	r2,r3,8007510 <__sflags+0x6c>
 80074b0:	00c01dc4 	movi	r3,119
 80074b4:	10c01226 	beq	r2,r3,8007500 <__sflags+0x5c>
 80074b8:	00c01844 	movi	r3,97
 80074bc:	10c00426 	beq	r2,r3,80074d0 <__sflags+0x2c>
 80074c0:	00800584 	movi	r2,22
 80074c4:	20800015 	stw	r2,0(r4)
 80074c8:	0005883a 	mov	r2,zero
 80074cc:	f800283a 	ret
 80074d0:	00c08204 	movi	r3,520
 80074d4:	01c00044 	movi	r7,1
 80074d8:	00804204 	movi	r2,264
 80074dc:	29000047 	ldb	r4,1(r5)
 80074e0:	20000426 	beq	r4,zero,80074f4 <__sflags+0x50>
 80074e4:	02000ac4 	movi	r8,43
 80074e8:	22000d26 	beq	r4,r8,8007520 <__sflags+0x7c>
 80074ec:	29000087 	ldb	r4,2(r5)
 80074f0:	22000b26 	beq	r4,r8,8007520 <__sflags+0x7c>
 80074f4:	38c6b03a 	or	r3,r7,r3
 80074f8:	30c00015 	stw	r3,0(r6)
 80074fc:	f800283a 	ret
 8007500:	00c18004 	movi	r3,1536
 8007504:	01c00044 	movi	r7,1
 8007508:	00800204 	movi	r2,8
 800750c:	003ff306 	br	80074dc <__alt_data_end+0xfc0074dc>
 8007510:	0007883a 	mov	r3,zero
 8007514:	000f883a 	mov	r7,zero
 8007518:	00800104 	movi	r2,4
 800751c:	003fef06 	br	80074dc <__alt_data_end+0xfc0074dc>
 8007520:	013ff8c4 	movi	r4,-29
 8007524:	01c00084 	movi	r7,2
 8007528:	1104703a 	and	r2,r2,r4
 800752c:	38c6b03a 	or	r3,r7,r3
 8007530:	10800414 	ori	r2,r2,16
 8007534:	30c00015 	stw	r3,0(r6)
 8007538:	f800283a 	ret

0800753c <__sfvwrite_r>:
 800753c:	30800217 	ldw	r2,8(r6)
 8007540:	10004526 	beq	r2,zero,8007658 <__sfvwrite_r+0x11c>
 8007544:	28c0030b 	ldhu	r3,12(r5)
 8007548:	defff404 	addi	sp,sp,-48
 800754c:	dd400715 	stw	r21,28(sp)
 8007550:	dcc00515 	stw	r19,20(sp)
 8007554:	dc000215 	stw	r16,8(sp)
 8007558:	dfc00b15 	stw	ra,44(sp)
 800755c:	df000a15 	stw	fp,40(sp)
 8007560:	ddc00915 	stw	r23,36(sp)
 8007564:	dd800815 	stw	r22,32(sp)
 8007568:	dd000615 	stw	r20,24(sp)
 800756c:	dc800415 	stw	r18,16(sp)
 8007570:	dc400315 	stw	r17,12(sp)
 8007574:	1880020c 	andi	r2,r3,8
 8007578:	2821883a 	mov	r16,r5
 800757c:	202b883a 	mov	r21,r4
 8007580:	3027883a 	mov	r19,r6
 8007584:	10002526 	beq	r2,zero,800761c <__sfvwrite_r+0xe0>
 8007588:	28800417 	ldw	r2,16(r5)
 800758c:	10002326 	beq	r2,zero,800761c <__sfvwrite_r+0xe0>
 8007590:	1880008c 	andi	r2,r3,2
 8007594:	9c400017 	ldw	r17,0(r19)
 8007598:	10003126 	beq	r2,zero,8007660 <__sfvwrite_r+0x124>
 800759c:	0029883a 	mov	r20,zero
 80075a0:	0025883a 	mov	r18,zero
 80075a4:	05810004 	movi	r22,1024
 80075a8:	a00d883a 	mov	r6,r20
 80075ac:	a809883a 	mov	r4,r21
 80075b0:	90002526 	beq	r18,zero,8007648 <__sfvwrite_r+0x10c>
 80075b4:	900f883a 	mov	r7,r18
 80075b8:	81400717 	ldw	r5,28(r16)
 80075bc:	b480012e 	bgeu	r22,r18,80075c4 <__sfvwrite_r+0x88>
 80075c0:	01c10004 	movi	r7,1024
 80075c4:	80800917 	ldw	r2,36(r16)
 80075c8:	103ee83a 	callr	r2
 80075cc:	0080510e 	bge	zero,r2,8007714 <__sfvwrite_r+0x1d8>
 80075d0:	98c00217 	ldw	r3,8(r19)
 80075d4:	a0a9883a 	add	r20,r20,r2
 80075d8:	90a5c83a 	sub	r18,r18,r2
 80075dc:	1885c83a 	sub	r2,r3,r2
 80075e0:	98800215 	stw	r2,8(r19)
 80075e4:	103ff01e 	bne	r2,zero,80075a8 <__alt_data_end+0xfc0075a8>
 80075e8:	0005883a 	mov	r2,zero
 80075ec:	dfc00b17 	ldw	ra,44(sp)
 80075f0:	df000a17 	ldw	fp,40(sp)
 80075f4:	ddc00917 	ldw	r23,36(sp)
 80075f8:	dd800817 	ldw	r22,32(sp)
 80075fc:	dd400717 	ldw	r21,28(sp)
 8007600:	dd000617 	ldw	r20,24(sp)
 8007604:	dcc00517 	ldw	r19,20(sp)
 8007608:	dc800417 	ldw	r18,16(sp)
 800760c:	dc400317 	ldw	r17,12(sp)
 8007610:	dc000217 	ldw	r16,8(sp)
 8007614:	dec00c04 	addi	sp,sp,48
 8007618:	f800283a 	ret
 800761c:	a809883a 	mov	r4,r21
 8007620:	800b883a 	mov	r5,r16
 8007624:	80059d00 	call	80059d0 <__swsetup_r>
 8007628:	80c0030b 	ldhu	r3,12(r16)
 800762c:	103fd826 	beq	r2,zero,8007590 <__alt_data_end+0xfc007590>
 8007630:	18c01014 	ori	r3,r3,64
 8007634:	80c0030d 	sth	r3,12(r16)
 8007638:	00c00244 	movi	r3,9
 800763c:	00bfffc4 	movi	r2,-1
 8007640:	a8c00015 	stw	r3,0(r21)
 8007644:	003fe906 	br	80075ec <__alt_data_end+0xfc0075ec>
 8007648:	8d000017 	ldw	r20,0(r17)
 800764c:	8c800117 	ldw	r18,4(r17)
 8007650:	8c400204 	addi	r17,r17,8
 8007654:	003fd406 	br	80075a8 <__alt_data_end+0xfc0075a8>
 8007658:	0005883a 	mov	r2,zero
 800765c:	f800283a 	ret
 8007660:	1880004c 	andi	r2,r3,1
 8007664:	1000301e 	bne	r2,zero,8007728 <__sfvwrite_r+0x1ec>
 8007668:	002f883a 	mov	r23,zero
 800766c:	0025883a 	mov	r18,zero
 8007670:	90001c26 	beq	r18,zero,80076e4 <__sfvwrite_r+0x1a8>
 8007674:	1880800c 	andi	r2,r3,512
 8007678:	85000217 	ldw	r20,8(r16)
 800767c:	10006c26 	beq	r2,zero,8007830 <__sfvwrite_r+0x2f4>
 8007680:	a02d883a 	mov	r22,r20
 8007684:	95008536 	bltu	r18,r20,800789c <__sfvwrite_r+0x360>
 8007688:	1881200c 	andi	r2,r3,1152
 800768c:	10009d1e 	bne	r2,zero,8007904 <__sfvwrite_r+0x3c8>
 8007690:	81000017 	ldw	r4,0(r16)
 8007694:	a039883a 	mov	fp,r20
 8007698:	9029883a 	mov	r20,r18
 800769c:	b80b883a 	mov	r5,r23
 80076a0:	b00d883a 	mov	r6,r22
 80076a4:	8007d900 	call	8007d90 <memmove>
 80076a8:	80c00217 	ldw	r3,8(r16)
 80076ac:	81000017 	ldw	r4,0(r16)
 80076b0:	9005883a 	mov	r2,r18
 80076b4:	1f39c83a 	sub	fp,r3,fp
 80076b8:	258f883a 	add	r7,r4,r22
 80076bc:	87000215 	stw	fp,8(r16)
 80076c0:	81c00015 	stw	r7,0(r16)
 80076c4:	98c00217 	ldw	r3,8(r19)
 80076c8:	b8af883a 	add	r23,r23,r2
 80076cc:	90a5c83a 	sub	r18,r18,r2
 80076d0:	1d05c83a 	sub	r2,r3,r20
 80076d4:	98800215 	stw	r2,8(r19)
 80076d8:	103fc326 	beq	r2,zero,80075e8 <__alt_data_end+0xfc0075e8>
 80076dc:	80c0030b 	ldhu	r3,12(r16)
 80076e0:	903fe41e 	bne	r18,zero,8007674 <__alt_data_end+0xfc007674>
 80076e4:	8dc00017 	ldw	r23,0(r17)
 80076e8:	8c800117 	ldw	r18,4(r17)
 80076ec:	8c400204 	addi	r17,r17,8
 80076f0:	003fdf06 	br	8007670 <__alt_data_end+0xfc007670>
 80076f4:	8008f900 	call	8008f90 <_realloc_r>
 80076f8:	102d883a 	mov	r22,r2
 80076fc:	1000a01e 	bne	r2,zero,8007980 <__sfvwrite_r+0x444>
 8007700:	81400417 	ldw	r5,16(r16)
 8007704:	a809883a 	mov	r4,r21
 8007708:	800192c0 	call	800192c <_free_r>
 800770c:	00800304 	movi	r2,12
 8007710:	a8800015 	stw	r2,0(r21)
 8007714:	80c0030b 	ldhu	r3,12(r16)
 8007718:	00bfffc4 	movi	r2,-1
 800771c:	18c01014 	ori	r3,r3,64
 8007720:	80c0030d 	sth	r3,12(r16)
 8007724:	003fb106 	br	80075ec <__alt_data_end+0xfc0075ec>
 8007728:	0029883a 	mov	r20,zero
 800772c:	0011883a 	mov	r8,zero
 8007730:	0039883a 	mov	fp,zero
 8007734:	0025883a 	mov	r18,zero
 8007738:	90001f26 	beq	r18,zero,80077b8 <__sfvwrite_r+0x27c>
 800773c:	40006826 	beq	r8,zero,80078e0 <__sfvwrite_r+0x3a4>
 8007740:	a02f883a 	mov	r23,r20
 8007744:	9500012e 	bgeu	r18,r20,800774c <__sfvwrite_r+0x210>
 8007748:	902f883a 	mov	r23,r18
 800774c:	81000017 	ldw	r4,0(r16)
 8007750:	80800417 	ldw	r2,16(r16)
 8007754:	b82d883a 	mov	r22,r23
 8007758:	81800217 	ldw	r6,8(r16)
 800775c:	81c00517 	ldw	r7,20(r16)
 8007760:	1100022e 	bgeu	r2,r4,800776c <__sfvwrite_r+0x230>
 8007764:	31c7883a 	add	r3,r6,r7
 8007768:	1dc01816 	blt	r3,r23,80077cc <__sfvwrite_r+0x290>
 800776c:	b9c03f16 	blt	r23,r7,800786c <__sfvwrite_r+0x330>
 8007770:	80800917 	ldw	r2,36(r16)
 8007774:	81400717 	ldw	r5,28(r16)
 8007778:	a809883a 	mov	r4,r21
 800777c:	da000115 	stw	r8,4(sp)
 8007780:	e00d883a 	mov	r6,fp
 8007784:	103ee83a 	callr	r2
 8007788:	102d883a 	mov	r22,r2
 800778c:	da000117 	ldw	r8,4(sp)
 8007790:	00bfe00e 	bge	zero,r2,8007714 <__alt_data_end+0xfc007714>
 8007794:	a5a9c83a 	sub	r20,r20,r22
 8007798:	a0001f26 	beq	r20,zero,8007818 <__sfvwrite_r+0x2dc>
 800779c:	98800217 	ldw	r2,8(r19)
 80077a0:	e5b9883a 	add	fp,fp,r22
 80077a4:	95a5c83a 	sub	r18,r18,r22
 80077a8:	15adc83a 	sub	r22,r2,r22
 80077ac:	9d800215 	stw	r22,8(r19)
 80077b0:	b03f8d26 	beq	r22,zero,80075e8 <__alt_data_end+0xfc0075e8>
 80077b4:	903fe11e 	bne	r18,zero,800773c <__alt_data_end+0xfc00773c>
 80077b8:	8f000017 	ldw	fp,0(r17)
 80077bc:	8c800117 	ldw	r18,4(r17)
 80077c0:	0011883a 	mov	r8,zero
 80077c4:	8c400204 	addi	r17,r17,8
 80077c8:	003fdb06 	br	8007738 <__alt_data_end+0xfc007738>
 80077cc:	180d883a 	mov	r6,r3
 80077d0:	e00b883a 	mov	r5,fp
 80077d4:	da000115 	stw	r8,4(sp)
 80077d8:	d8c00015 	stw	r3,0(sp)
 80077dc:	8007d900 	call	8007d90 <memmove>
 80077e0:	d8c00017 	ldw	r3,0(sp)
 80077e4:	80800017 	ldw	r2,0(r16)
 80077e8:	a809883a 	mov	r4,r21
 80077ec:	800b883a 	mov	r5,r16
 80077f0:	10c5883a 	add	r2,r2,r3
 80077f4:	80800015 	stw	r2,0(r16)
 80077f8:	d8c00015 	stw	r3,0(sp)
 80077fc:	80010f00 	call	80010f0 <_fflush_r>
 8007800:	d8c00017 	ldw	r3,0(sp)
 8007804:	da000117 	ldw	r8,4(sp)
 8007808:	103fc21e 	bne	r2,zero,8007714 <__alt_data_end+0xfc007714>
 800780c:	182d883a 	mov	r22,r3
 8007810:	a5a9c83a 	sub	r20,r20,r22
 8007814:	a03fe11e 	bne	r20,zero,800779c <__alt_data_end+0xfc00779c>
 8007818:	a809883a 	mov	r4,r21
 800781c:	800b883a 	mov	r5,r16
 8007820:	80010f00 	call	80010f0 <_fflush_r>
 8007824:	103fbb1e 	bne	r2,zero,8007714 <__alt_data_end+0xfc007714>
 8007828:	0011883a 	mov	r8,zero
 800782c:	003fdb06 	br	800779c <__alt_data_end+0xfc00779c>
 8007830:	81000017 	ldw	r4,0(r16)
 8007834:	80800417 	ldw	r2,16(r16)
 8007838:	1100012e 	bgeu	r2,r4,8007840 <__sfvwrite_r+0x304>
 800783c:	a4805a36 	bltu	r20,r18,80079a8 <__sfvwrite_r+0x46c>
 8007840:	81c00517 	ldw	r7,20(r16)
 8007844:	91c01a36 	bltu	r18,r7,80078b0 <__sfvwrite_r+0x374>
 8007848:	80800917 	ldw	r2,36(r16)
 800784c:	81400717 	ldw	r5,28(r16)
 8007850:	a809883a 	mov	r4,r21
 8007854:	b80d883a 	mov	r6,r23
 8007858:	103ee83a 	callr	r2
 800785c:	1029883a 	mov	r20,r2
 8007860:	00bfac0e 	bge	zero,r2,8007714 <__alt_data_end+0xfc007714>
 8007864:	a005883a 	mov	r2,r20
 8007868:	003f9606 	br	80076c4 <__alt_data_end+0xfc0076c4>
 800786c:	b80d883a 	mov	r6,r23
 8007870:	e00b883a 	mov	r5,fp
 8007874:	da000115 	stw	r8,4(sp)
 8007878:	8007d900 	call	8007d90 <memmove>
 800787c:	80800217 	ldw	r2,8(r16)
 8007880:	80c00017 	ldw	r3,0(r16)
 8007884:	da000117 	ldw	r8,4(sp)
 8007888:	15c5c83a 	sub	r2,r2,r23
 800788c:	1def883a 	add	r23,r3,r23
 8007890:	80800215 	stw	r2,8(r16)
 8007894:	85c00015 	stw	r23,0(r16)
 8007898:	003fbe06 	br	8007794 <__alt_data_end+0xfc007794>
 800789c:	81000017 	ldw	r4,0(r16)
 80078a0:	9039883a 	mov	fp,r18
 80078a4:	9029883a 	mov	r20,r18
 80078a8:	902d883a 	mov	r22,r18
 80078ac:	003f7b06 	br	800769c <__alt_data_end+0xfc00769c>
 80078b0:	b80b883a 	mov	r5,r23
 80078b4:	900d883a 	mov	r6,r18
 80078b8:	8007d900 	call	8007d90 <memmove>
 80078bc:	80c00217 	ldw	r3,8(r16)
 80078c0:	80800017 	ldw	r2,0(r16)
 80078c4:	9029883a 	mov	r20,r18
 80078c8:	1c87c83a 	sub	r3,r3,r18
 80078cc:	1485883a 	add	r2,r2,r18
 80078d0:	80800015 	stw	r2,0(r16)
 80078d4:	80c00215 	stw	r3,8(r16)
 80078d8:	9005883a 	mov	r2,r18
 80078dc:	003f7906 	br	80076c4 <__alt_data_end+0xfc0076c4>
 80078e0:	e009883a 	mov	r4,fp
 80078e4:	01400284 	movi	r5,10
 80078e8:	900d883a 	mov	r6,r18
 80078ec:	8007b700 	call	8007b70 <memchr>
 80078f0:	10003826 	beq	r2,zero,80079d4 <__sfvwrite_r+0x498>
 80078f4:	10800044 	addi	r2,r2,1
 80078f8:	1729c83a 	sub	r20,r2,fp
 80078fc:	02000044 	movi	r8,1
 8007900:	003f8f06 	br	8007740 <__alt_data_end+0xfc007740>
 8007904:	80800517 	ldw	r2,20(r16)
 8007908:	81400417 	ldw	r5,16(r16)
 800790c:	87000017 	ldw	fp,0(r16)
 8007910:	10a9883a 	add	r20,r2,r2
 8007914:	a085883a 	add	r2,r20,r2
 8007918:	1028d7fa 	srli	r20,r2,31
 800791c:	e179c83a 	sub	fp,fp,r5
 8007920:	e1000044 	addi	r4,fp,1
 8007924:	a085883a 	add	r2,r20,r2
 8007928:	1029d07a 	srai	r20,r2,1
 800792c:	2485883a 	add	r2,r4,r18
 8007930:	a00d883a 	mov	r6,r20
 8007934:	a080022e 	bgeu	r20,r2,8007940 <__sfvwrite_r+0x404>
 8007938:	1029883a 	mov	r20,r2
 800793c:	100d883a 	mov	r6,r2
 8007940:	18c1000c 	andi	r3,r3,1024
 8007944:	a809883a 	mov	r4,r21
 8007948:	183f6a26 	beq	r3,zero,80076f4 <__alt_data_end+0xfc0076f4>
 800794c:	300b883a 	mov	r5,r6
 8007950:	80026380 	call	8002638 <_malloc_r>
 8007954:	102d883a 	mov	r22,r2
 8007958:	103f6c26 	beq	r2,zero,800770c <__alt_data_end+0xfc00770c>
 800795c:	81400417 	ldw	r5,16(r16)
 8007960:	1009883a 	mov	r4,r2
 8007964:	e00d883a 	mov	r6,fp
 8007968:	8007c580 	call	8007c58 <memcpy>
 800796c:	8080030b 	ldhu	r2,12(r16)
 8007970:	00fedfc4 	movi	r3,-1153
 8007974:	10c4703a 	and	r2,r2,r3
 8007978:	10802014 	ori	r2,r2,128
 800797c:	8080030d 	sth	r2,12(r16)
 8007980:	b709883a 	add	r4,r22,fp
 8007984:	a707c83a 	sub	r3,r20,fp
 8007988:	85800415 	stw	r22,16(r16)
 800798c:	85000515 	stw	r20,20(r16)
 8007990:	81000015 	stw	r4,0(r16)
 8007994:	9039883a 	mov	fp,r18
 8007998:	80c00215 	stw	r3,8(r16)
 800799c:	9029883a 	mov	r20,r18
 80079a0:	902d883a 	mov	r22,r18
 80079a4:	003f3d06 	br	800769c <__alt_data_end+0xfc00769c>
 80079a8:	b80b883a 	mov	r5,r23
 80079ac:	a00d883a 	mov	r6,r20
 80079b0:	8007d900 	call	8007d90 <memmove>
 80079b4:	80800017 	ldw	r2,0(r16)
 80079b8:	a809883a 	mov	r4,r21
 80079bc:	800b883a 	mov	r5,r16
 80079c0:	1505883a 	add	r2,r2,r20
 80079c4:	80800015 	stw	r2,0(r16)
 80079c8:	80010f00 	call	80010f0 <_fflush_r>
 80079cc:	103fa526 	beq	r2,zero,8007864 <__alt_data_end+0xfc007864>
 80079d0:	003f5006 	br	8007714 <__alt_data_end+0xfc007714>
 80079d4:	95000044 	addi	r20,r18,1
 80079d8:	02000044 	movi	r8,1
 80079dc:	003f5806 	br	8007740 <__alt_data_end+0xfc007740>

080079e0 <_isatty_r>:
 80079e0:	defffd04 	addi	sp,sp,-12
 80079e4:	dc000015 	stw	r16,0(sp)
 80079e8:	04020074 	movhi	r16,2049
 80079ec:	dc400115 	stw	r17,4(sp)
 80079f0:	84162f04 	addi	r16,r16,22716
 80079f4:	2023883a 	mov	r17,r4
 80079f8:	2809883a 	mov	r4,r5
 80079fc:	dfc00215 	stw	ra,8(sp)
 8007a00:	80000015 	stw	zero,0(r16)
 8007a04:	800ea200 	call	800ea20 <isatty>
 8007a08:	00ffffc4 	movi	r3,-1
 8007a0c:	10c00526 	beq	r2,r3,8007a24 <_isatty_r+0x44>
 8007a10:	dfc00217 	ldw	ra,8(sp)
 8007a14:	dc400117 	ldw	r17,4(sp)
 8007a18:	dc000017 	ldw	r16,0(sp)
 8007a1c:	dec00304 	addi	sp,sp,12
 8007a20:	f800283a 	ret
 8007a24:	80c00017 	ldw	r3,0(r16)
 8007a28:	183ff926 	beq	r3,zero,8007a10 <__alt_data_end+0xfc007a10>
 8007a2c:	88c00015 	stw	r3,0(r17)
 8007a30:	003ff706 	br	8007a10 <__alt_data_end+0xfc007a10>

08007a34 <_setlocale_r>:
 8007a34:	30001b26 	beq	r6,zero,8007aa4 <_setlocale_r+0x70>
 8007a38:	01420074 	movhi	r5,2049
 8007a3c:	defffe04 	addi	sp,sp,-8
 8007a40:	2947b104 	addi	r5,r5,7876
 8007a44:	3009883a 	mov	r4,r6
 8007a48:	dc000015 	stw	r16,0(sp)
 8007a4c:	dfc00115 	stw	ra,4(sp)
 8007a50:	3021883a 	mov	r16,r6
 8007a54:	80095a40 	call	80095a4 <strcmp>
 8007a58:	1000061e 	bne	r2,zero,8007a74 <_setlocale_r+0x40>
 8007a5c:	00820074 	movhi	r2,2049
 8007a60:	1086f204 	addi	r2,r2,7112
 8007a64:	dfc00117 	ldw	ra,4(sp)
 8007a68:	dc000017 	ldw	r16,0(sp)
 8007a6c:	dec00204 	addi	sp,sp,8
 8007a70:	f800283a 	ret
 8007a74:	01420074 	movhi	r5,2049
 8007a78:	2946f204 	addi	r5,r5,7112
 8007a7c:	8009883a 	mov	r4,r16
 8007a80:	80095a40 	call	80095a4 <strcmp>
 8007a84:	103ff526 	beq	r2,zero,8007a5c <__alt_data_end+0xfc007a5c>
 8007a88:	01420074 	movhi	r5,2049
 8007a8c:	2946fc04 	addi	r5,r5,7152
 8007a90:	8009883a 	mov	r4,r16
 8007a94:	80095a40 	call	80095a4 <strcmp>
 8007a98:	103ff026 	beq	r2,zero,8007a5c <__alt_data_end+0xfc007a5c>
 8007a9c:	0005883a 	mov	r2,zero
 8007aa0:	003ff006 	br	8007a64 <__alt_data_end+0xfc007a64>
 8007aa4:	00820074 	movhi	r2,2049
 8007aa8:	1086f204 	addi	r2,r2,7112
 8007aac:	f800283a 	ret

08007ab0 <__locale_charset>:
 8007ab0:	00820074 	movhi	r2,2049
 8007ab4:	108a6804 	addi	r2,r2,10656
 8007ab8:	f800283a 	ret

08007abc <__locale_mb_cur_max>:
 8007abc:	00820074 	movhi	r2,2049
 8007ac0:	108f3604 	addi	r2,r2,15576
 8007ac4:	10800017 	ldw	r2,0(r2)
 8007ac8:	f800283a 	ret

08007acc <__locale_msgcharset>:
 8007acc:	00820074 	movhi	r2,2049
 8007ad0:	108a6004 	addi	r2,r2,10624
 8007ad4:	f800283a 	ret

08007ad8 <__locale_cjk_lang>:
 8007ad8:	0005883a 	mov	r2,zero
 8007adc:	f800283a 	ret

08007ae0 <_localeconv_r>:
 8007ae0:	00820074 	movhi	r2,2049
 8007ae4:	108a7004 	addi	r2,r2,10688
 8007ae8:	f800283a 	ret

08007aec <setlocale>:
 8007aec:	00c20074 	movhi	r3,2049
 8007af0:	18cf3204 	addi	r3,r3,15560
 8007af4:	2005883a 	mov	r2,r4
 8007af8:	19000017 	ldw	r4,0(r3)
 8007afc:	280d883a 	mov	r6,r5
 8007b00:	100b883a 	mov	r5,r2
 8007b04:	8007a341 	jmpi	8007a34 <_setlocale_r>

08007b08 <localeconv>:
 8007b08:	00820074 	movhi	r2,2049
 8007b0c:	108a7004 	addi	r2,r2,10688
 8007b10:	f800283a 	ret

08007b14 <_lseek_r>:
 8007b14:	defffd04 	addi	sp,sp,-12
 8007b18:	dc000015 	stw	r16,0(sp)
 8007b1c:	04020074 	movhi	r16,2049
 8007b20:	dc400115 	stw	r17,4(sp)
 8007b24:	84162f04 	addi	r16,r16,22716
 8007b28:	2023883a 	mov	r17,r4
 8007b2c:	2809883a 	mov	r4,r5
 8007b30:	300b883a 	mov	r5,r6
 8007b34:	380d883a 	mov	r6,r7
 8007b38:	dfc00215 	stw	ra,8(sp)
 8007b3c:	80000015 	stw	zero,0(r16)
 8007b40:	800ec000 	call	800ec00 <lseek>
 8007b44:	00ffffc4 	movi	r3,-1
 8007b48:	10c00526 	beq	r2,r3,8007b60 <_lseek_r+0x4c>
 8007b4c:	dfc00217 	ldw	ra,8(sp)
 8007b50:	dc400117 	ldw	r17,4(sp)
 8007b54:	dc000017 	ldw	r16,0(sp)
 8007b58:	dec00304 	addi	sp,sp,12
 8007b5c:	f800283a 	ret
 8007b60:	80c00017 	ldw	r3,0(r16)
 8007b64:	183ff926 	beq	r3,zero,8007b4c <__alt_data_end+0xfc007b4c>
 8007b68:	88c00015 	stw	r3,0(r17)
 8007b6c:	003ff706 	br	8007b4c <__alt_data_end+0xfc007b4c>

08007b70 <memchr>:
 8007b70:	208000cc 	andi	r2,r4,3
 8007b74:	280f883a 	mov	r7,r5
 8007b78:	10003526 	beq	r2,zero,8007c50 <memchr+0xe0>
 8007b7c:	30bfffc4 	addi	r2,r6,-1
 8007b80:	30001b26 	beq	r6,zero,8007bf0 <memchr+0x80>
 8007b84:	21800003 	ldbu	r6,0(r4)
 8007b88:	28c03fcc 	andi	r3,r5,255
 8007b8c:	30c01a26 	beq	r6,r3,8007bf8 <memchr+0x88>
 8007b90:	180d883a 	mov	r6,r3
 8007b94:	00000406 	br	8007ba8 <memchr+0x38>
 8007b98:	10001526 	beq	r2,zero,8007bf0 <memchr+0x80>
 8007b9c:	20c00003 	ldbu	r3,0(r4)
 8007ba0:	10bfffc4 	addi	r2,r2,-1
 8007ba4:	19801426 	beq	r3,r6,8007bf8 <memchr+0x88>
 8007ba8:	21000044 	addi	r4,r4,1
 8007bac:	20c000cc 	andi	r3,r4,3
 8007bb0:	183ff91e 	bne	r3,zero,8007b98 <__alt_data_end+0xfc007b98>
 8007bb4:	024000c4 	movi	r9,3
 8007bb8:	48801136 	bltu	r9,r2,8007c00 <memchr+0x90>
 8007bbc:	10000c26 	beq	r2,zero,8007bf0 <memchr+0x80>
 8007bc0:	20c00003 	ldbu	r3,0(r4)
 8007bc4:	29403fcc 	andi	r5,r5,255
 8007bc8:	19400b26 	beq	r3,r5,8007bf8 <memchr+0x88>
 8007bcc:	20c00044 	addi	r3,r4,1
 8007bd0:	2085883a 	add	r2,r4,r2
 8007bd4:	39803fcc 	andi	r6,r7,255
 8007bd8:	00000306 	br	8007be8 <memchr+0x78>
 8007bdc:	18c00044 	addi	r3,r3,1
 8007be0:	197fffc3 	ldbu	r5,-1(r3)
 8007be4:	29800426 	beq	r5,r6,8007bf8 <memchr+0x88>
 8007be8:	1809883a 	mov	r4,r3
 8007bec:	18bffb1e 	bne	r3,r2,8007bdc <__alt_data_end+0xfc007bdc>
 8007bf0:	0005883a 	mov	r2,zero
 8007bf4:	f800283a 	ret
 8007bf8:	2005883a 	mov	r2,r4
 8007bfc:	f800283a 	ret
 8007c00:	28c03fcc 	andi	r3,r5,255
 8007c04:	1810923a 	slli	r8,r3,8
 8007c08:	02ffbff4 	movhi	r11,65279
 8007c0c:	02a02074 	movhi	r10,32897
 8007c10:	40c6b03a 	or	r3,r8,r3
 8007c14:	1810943a 	slli	r8,r3,16
 8007c18:	5affbfc4 	addi	r11,r11,-257
 8007c1c:	52a02004 	addi	r10,r10,-32640
 8007c20:	40d0b03a 	or	r8,r8,r3
 8007c24:	20c00017 	ldw	r3,0(r4)
 8007c28:	40c6f03a 	xor	r3,r8,r3
 8007c2c:	1acd883a 	add	r6,r3,r11
 8007c30:	00c6303a 	nor	r3,zero,r3
 8007c34:	30c6703a 	and	r3,r6,r3
 8007c38:	1a86703a 	and	r3,r3,r10
 8007c3c:	183fdf1e 	bne	r3,zero,8007bbc <__alt_data_end+0xfc007bbc>
 8007c40:	10bfff04 	addi	r2,r2,-4
 8007c44:	21000104 	addi	r4,r4,4
 8007c48:	48bff636 	bltu	r9,r2,8007c24 <__alt_data_end+0xfc007c24>
 8007c4c:	003fdb06 	br	8007bbc <__alt_data_end+0xfc007bbc>
 8007c50:	3005883a 	mov	r2,r6
 8007c54:	003fd706 	br	8007bb4 <__alt_data_end+0xfc007bb4>

08007c58 <memcpy>:
 8007c58:	deffff04 	addi	sp,sp,-4
 8007c5c:	dc000015 	stw	r16,0(sp)
 8007c60:	00c003c4 	movi	r3,15
 8007c64:	2005883a 	mov	r2,r4
 8007c68:	1980432e 	bgeu	r3,r6,8007d78 <memcpy+0x120>
 8007c6c:	2146b03a 	or	r3,r4,r5
 8007c70:	18c000cc 	andi	r3,r3,3
 8007c74:	1800421e 	bne	r3,zero,8007d80 <memcpy+0x128>
 8007c78:	343ffc04 	addi	r16,r6,-16
 8007c7c:	8020d13a 	srli	r16,r16,4
 8007c80:	28c00104 	addi	r3,r5,4
 8007c84:	23400104 	addi	r13,r4,4
 8007c88:	801e913a 	slli	r15,r16,4
 8007c8c:	2b000204 	addi	r12,r5,8
 8007c90:	22c00204 	addi	r11,r4,8
 8007c94:	7bc00504 	addi	r15,r15,20
 8007c98:	2a800304 	addi	r10,r5,12
 8007c9c:	22400304 	addi	r9,r4,12
 8007ca0:	2bdf883a 	add	r15,r5,r15
 8007ca4:	2811883a 	mov	r8,r5
 8007ca8:	200f883a 	mov	r7,r4
 8007cac:	41000017 	ldw	r4,0(r8)
 8007cb0:	39c00404 	addi	r7,r7,16
 8007cb4:	18c00404 	addi	r3,r3,16
 8007cb8:	393ffc15 	stw	r4,-16(r7)
 8007cbc:	1bbffc17 	ldw	r14,-16(r3)
 8007cc0:	6b400404 	addi	r13,r13,16
 8007cc4:	5ac00404 	addi	r11,r11,16
 8007cc8:	6bbffc15 	stw	r14,-16(r13)
 8007ccc:	63800017 	ldw	r14,0(r12)
 8007cd0:	4a400404 	addi	r9,r9,16
 8007cd4:	42000404 	addi	r8,r8,16
 8007cd8:	5bbffc15 	stw	r14,-16(r11)
 8007cdc:	53800017 	ldw	r14,0(r10)
 8007ce0:	63000404 	addi	r12,r12,16
 8007ce4:	52800404 	addi	r10,r10,16
 8007ce8:	4bbffc15 	stw	r14,-16(r9)
 8007cec:	1bffef1e 	bne	r3,r15,8007cac <__alt_data_end+0xfc007cac>
 8007cf0:	81c00044 	addi	r7,r16,1
 8007cf4:	380e913a 	slli	r7,r7,4
 8007cf8:	310003cc 	andi	r4,r6,15
 8007cfc:	02c000c4 	movi	r11,3
 8007d00:	11c7883a 	add	r3,r2,r7
 8007d04:	29cb883a 	add	r5,r5,r7
 8007d08:	59001f2e 	bgeu	r11,r4,8007d88 <memcpy+0x130>
 8007d0c:	1813883a 	mov	r9,r3
 8007d10:	2811883a 	mov	r8,r5
 8007d14:	200f883a 	mov	r7,r4
 8007d18:	42800017 	ldw	r10,0(r8)
 8007d1c:	4a400104 	addi	r9,r9,4
 8007d20:	39ffff04 	addi	r7,r7,-4
 8007d24:	4abfff15 	stw	r10,-4(r9)
 8007d28:	42000104 	addi	r8,r8,4
 8007d2c:	59fffa36 	bltu	r11,r7,8007d18 <__alt_data_end+0xfc007d18>
 8007d30:	213fff04 	addi	r4,r4,-4
 8007d34:	2008d0ba 	srli	r4,r4,2
 8007d38:	318000cc 	andi	r6,r6,3
 8007d3c:	21000044 	addi	r4,r4,1
 8007d40:	2109883a 	add	r4,r4,r4
 8007d44:	2109883a 	add	r4,r4,r4
 8007d48:	1907883a 	add	r3,r3,r4
 8007d4c:	290b883a 	add	r5,r5,r4
 8007d50:	30000626 	beq	r6,zero,8007d6c <memcpy+0x114>
 8007d54:	198d883a 	add	r6,r3,r6
 8007d58:	29c00003 	ldbu	r7,0(r5)
 8007d5c:	18c00044 	addi	r3,r3,1
 8007d60:	29400044 	addi	r5,r5,1
 8007d64:	19ffffc5 	stb	r7,-1(r3)
 8007d68:	19bffb1e 	bne	r3,r6,8007d58 <__alt_data_end+0xfc007d58>
 8007d6c:	dc000017 	ldw	r16,0(sp)
 8007d70:	dec00104 	addi	sp,sp,4
 8007d74:	f800283a 	ret
 8007d78:	2007883a 	mov	r3,r4
 8007d7c:	003ff406 	br	8007d50 <__alt_data_end+0xfc007d50>
 8007d80:	2007883a 	mov	r3,r4
 8007d84:	003ff306 	br	8007d54 <__alt_data_end+0xfc007d54>
 8007d88:	200d883a 	mov	r6,r4
 8007d8c:	003ff006 	br	8007d50 <__alt_data_end+0xfc007d50>

08007d90 <memmove>:
 8007d90:	2005883a 	mov	r2,r4
 8007d94:	29000b2e 	bgeu	r5,r4,8007dc4 <memmove+0x34>
 8007d98:	298f883a 	add	r7,r5,r6
 8007d9c:	21c0092e 	bgeu	r4,r7,8007dc4 <memmove+0x34>
 8007da0:	2187883a 	add	r3,r4,r6
 8007da4:	198bc83a 	sub	r5,r3,r6
 8007da8:	30004b26 	beq	r6,zero,8007ed8 <memmove+0x148>
 8007dac:	39ffffc4 	addi	r7,r7,-1
 8007db0:	39000003 	ldbu	r4,0(r7)
 8007db4:	18ffffc4 	addi	r3,r3,-1
 8007db8:	19000005 	stb	r4,0(r3)
 8007dbc:	197ffb1e 	bne	r3,r5,8007dac <__alt_data_end+0xfc007dac>
 8007dc0:	f800283a 	ret
 8007dc4:	00c003c4 	movi	r3,15
 8007dc8:	1980412e 	bgeu	r3,r6,8007ed0 <memmove+0x140>
 8007dcc:	1146b03a 	or	r3,r2,r5
 8007dd0:	18c000cc 	andi	r3,r3,3
 8007dd4:	1800411e 	bne	r3,zero,8007edc <memmove+0x14c>
 8007dd8:	33fffc04 	addi	r15,r6,-16
 8007ddc:	781ed13a 	srli	r15,r15,4
 8007de0:	28c00104 	addi	r3,r5,4
 8007de4:	13400104 	addi	r13,r2,4
 8007de8:	781c913a 	slli	r14,r15,4
 8007dec:	2b000204 	addi	r12,r5,8
 8007df0:	12c00204 	addi	r11,r2,8
 8007df4:	73800504 	addi	r14,r14,20
 8007df8:	2a800304 	addi	r10,r5,12
 8007dfc:	12400304 	addi	r9,r2,12
 8007e00:	2b9d883a 	add	r14,r5,r14
 8007e04:	2811883a 	mov	r8,r5
 8007e08:	100f883a 	mov	r7,r2
 8007e0c:	41000017 	ldw	r4,0(r8)
 8007e10:	39c00404 	addi	r7,r7,16
 8007e14:	18c00404 	addi	r3,r3,16
 8007e18:	393ffc15 	stw	r4,-16(r7)
 8007e1c:	193ffc17 	ldw	r4,-16(r3)
 8007e20:	6b400404 	addi	r13,r13,16
 8007e24:	5ac00404 	addi	r11,r11,16
 8007e28:	693ffc15 	stw	r4,-16(r13)
 8007e2c:	61000017 	ldw	r4,0(r12)
 8007e30:	4a400404 	addi	r9,r9,16
 8007e34:	42000404 	addi	r8,r8,16
 8007e38:	593ffc15 	stw	r4,-16(r11)
 8007e3c:	51000017 	ldw	r4,0(r10)
 8007e40:	63000404 	addi	r12,r12,16
 8007e44:	52800404 	addi	r10,r10,16
 8007e48:	493ffc15 	stw	r4,-16(r9)
 8007e4c:	1bbfef1e 	bne	r3,r14,8007e0c <__alt_data_end+0xfc007e0c>
 8007e50:	79000044 	addi	r4,r15,1
 8007e54:	2008913a 	slli	r4,r4,4
 8007e58:	328003cc 	andi	r10,r6,15
 8007e5c:	02c000c4 	movi	r11,3
 8007e60:	1107883a 	add	r3,r2,r4
 8007e64:	290b883a 	add	r5,r5,r4
 8007e68:	5a801e2e 	bgeu	r11,r10,8007ee4 <memmove+0x154>
 8007e6c:	1813883a 	mov	r9,r3
 8007e70:	2811883a 	mov	r8,r5
 8007e74:	500f883a 	mov	r7,r10
 8007e78:	41000017 	ldw	r4,0(r8)
 8007e7c:	4a400104 	addi	r9,r9,4
 8007e80:	39ffff04 	addi	r7,r7,-4
 8007e84:	493fff15 	stw	r4,-4(r9)
 8007e88:	42000104 	addi	r8,r8,4
 8007e8c:	59fffa36 	bltu	r11,r7,8007e78 <__alt_data_end+0xfc007e78>
 8007e90:	513fff04 	addi	r4,r10,-4
 8007e94:	2008d0ba 	srli	r4,r4,2
 8007e98:	318000cc 	andi	r6,r6,3
 8007e9c:	21000044 	addi	r4,r4,1
 8007ea0:	2109883a 	add	r4,r4,r4
 8007ea4:	2109883a 	add	r4,r4,r4
 8007ea8:	1907883a 	add	r3,r3,r4
 8007eac:	290b883a 	add	r5,r5,r4
 8007eb0:	30000926 	beq	r6,zero,8007ed8 <memmove+0x148>
 8007eb4:	198d883a 	add	r6,r3,r6
 8007eb8:	29c00003 	ldbu	r7,0(r5)
 8007ebc:	18c00044 	addi	r3,r3,1
 8007ec0:	29400044 	addi	r5,r5,1
 8007ec4:	19ffffc5 	stb	r7,-1(r3)
 8007ec8:	19bffb1e 	bne	r3,r6,8007eb8 <__alt_data_end+0xfc007eb8>
 8007ecc:	f800283a 	ret
 8007ed0:	1007883a 	mov	r3,r2
 8007ed4:	003ff606 	br	8007eb0 <__alt_data_end+0xfc007eb0>
 8007ed8:	f800283a 	ret
 8007edc:	1007883a 	mov	r3,r2
 8007ee0:	003ff406 	br	8007eb4 <__alt_data_end+0xfc007eb4>
 8007ee4:	500d883a 	mov	r6,r10
 8007ee8:	003ff106 	br	8007eb0 <__alt_data_end+0xfc007eb0>

08007eec <_Balloc>:
 8007eec:	20801317 	ldw	r2,76(r4)
 8007ef0:	defffc04 	addi	sp,sp,-16
 8007ef4:	dc400115 	stw	r17,4(sp)
 8007ef8:	dc000015 	stw	r16,0(sp)
 8007efc:	dfc00315 	stw	ra,12(sp)
 8007f00:	dc800215 	stw	r18,8(sp)
 8007f04:	2023883a 	mov	r17,r4
 8007f08:	2821883a 	mov	r16,r5
 8007f0c:	10000f26 	beq	r2,zero,8007f4c <_Balloc+0x60>
 8007f10:	8407883a 	add	r3,r16,r16
 8007f14:	18c7883a 	add	r3,r3,r3
 8007f18:	10c7883a 	add	r3,r2,r3
 8007f1c:	18800017 	ldw	r2,0(r3)
 8007f20:	10001126 	beq	r2,zero,8007f68 <_Balloc+0x7c>
 8007f24:	11000017 	ldw	r4,0(r2)
 8007f28:	19000015 	stw	r4,0(r3)
 8007f2c:	10000415 	stw	zero,16(r2)
 8007f30:	10000315 	stw	zero,12(r2)
 8007f34:	dfc00317 	ldw	ra,12(sp)
 8007f38:	dc800217 	ldw	r18,8(sp)
 8007f3c:	dc400117 	ldw	r17,4(sp)
 8007f40:	dc000017 	ldw	r16,0(sp)
 8007f44:	dec00404 	addi	sp,sp,16
 8007f48:	f800283a 	ret
 8007f4c:	01400104 	movi	r5,4
 8007f50:	01800844 	movi	r6,33
 8007f54:	800aba40 	call	800aba4 <_calloc_r>
 8007f58:	88801315 	stw	r2,76(r17)
 8007f5c:	103fec1e 	bne	r2,zero,8007f10 <__alt_data_end+0xfc007f10>
 8007f60:	0005883a 	mov	r2,zero
 8007f64:	003ff306 	br	8007f34 <__alt_data_end+0xfc007f34>
 8007f68:	01400044 	movi	r5,1
 8007f6c:	2c24983a 	sll	r18,r5,r16
 8007f70:	8809883a 	mov	r4,r17
 8007f74:	91800144 	addi	r6,r18,5
 8007f78:	318d883a 	add	r6,r6,r6
 8007f7c:	318d883a 	add	r6,r6,r6
 8007f80:	800aba40 	call	800aba4 <_calloc_r>
 8007f84:	103ff626 	beq	r2,zero,8007f60 <__alt_data_end+0xfc007f60>
 8007f88:	14000115 	stw	r16,4(r2)
 8007f8c:	14800215 	stw	r18,8(r2)
 8007f90:	003fe606 	br	8007f2c <__alt_data_end+0xfc007f2c>

08007f94 <_Bfree>:
 8007f94:	28000826 	beq	r5,zero,8007fb8 <_Bfree+0x24>
 8007f98:	28c00117 	ldw	r3,4(r5)
 8007f9c:	20801317 	ldw	r2,76(r4)
 8007fa0:	18c7883a 	add	r3,r3,r3
 8007fa4:	18c7883a 	add	r3,r3,r3
 8007fa8:	10c5883a 	add	r2,r2,r3
 8007fac:	10c00017 	ldw	r3,0(r2)
 8007fb0:	28c00015 	stw	r3,0(r5)
 8007fb4:	11400015 	stw	r5,0(r2)
 8007fb8:	f800283a 	ret

08007fbc <__multadd>:
 8007fbc:	defff704 	addi	sp,sp,-36
 8007fc0:	dc800215 	stw	r18,8(sp)
 8007fc4:	2c800417 	ldw	r18,16(r5)
 8007fc8:	ddc00715 	stw	r23,28(sp)
 8007fcc:	dd800615 	stw	r22,24(sp)
 8007fd0:	dd000415 	stw	r20,16(sp)
 8007fd4:	dcc00315 	stw	r19,12(sp)
 8007fd8:	dc400115 	stw	r17,4(sp)
 8007fdc:	dc000015 	stw	r16,0(sp)
 8007fe0:	dfc00815 	stw	ra,32(sp)
 8007fe4:	dd400515 	stw	r21,20(sp)
 8007fe8:	2827883a 	mov	r19,r5
 8007fec:	2029883a 	mov	r20,r4
 8007ff0:	3023883a 	mov	r17,r6
 8007ff4:	3821883a 	mov	r16,r7
 8007ff8:	2d800504 	addi	r22,r5,20
 8007ffc:	002f883a 	mov	r23,zero
 8008000:	b5400017 	ldw	r21,0(r22)
 8008004:	880b883a 	mov	r5,r17
 8008008:	bdc00044 	addi	r23,r23,1
 800800c:	a93fffcc 	andi	r4,r21,65535
 8008010:	800bf500 	call	800bf50 <__mulsi3>
 8008014:	1421883a 	add	r16,r2,r16
 8008018:	a808d43a 	srli	r4,r21,16
 800801c:	802ad43a 	srli	r21,r16,16
 8008020:	880b883a 	mov	r5,r17
 8008024:	800bf500 	call	800bf50 <__mulsi3>
 8008028:	a88f883a 	add	r7,r21,r2
 800802c:	3804943a 	slli	r2,r7,16
 8008030:	80ffffcc 	andi	r3,r16,65535
 8008034:	b5800104 	addi	r22,r22,4
 8008038:	10c7883a 	add	r3,r2,r3
 800803c:	b0ffff15 	stw	r3,-4(r22)
 8008040:	3820d43a 	srli	r16,r7,16
 8008044:	bcbfee16 	blt	r23,r18,8008000 <__alt_data_end+0xfc008000>
 8008048:	80000926 	beq	r16,zero,8008070 <__multadd+0xb4>
 800804c:	98800217 	ldw	r2,8(r19)
 8008050:	9080130e 	bge	r18,r2,80080a0 <__multadd+0xe4>
 8008054:	90800144 	addi	r2,r18,5
 8008058:	1085883a 	add	r2,r2,r2
 800805c:	1085883a 	add	r2,r2,r2
 8008060:	9885883a 	add	r2,r19,r2
 8008064:	14000015 	stw	r16,0(r2)
 8008068:	94800044 	addi	r18,r18,1
 800806c:	9c800415 	stw	r18,16(r19)
 8008070:	9805883a 	mov	r2,r19
 8008074:	dfc00817 	ldw	ra,32(sp)
 8008078:	ddc00717 	ldw	r23,28(sp)
 800807c:	dd800617 	ldw	r22,24(sp)
 8008080:	dd400517 	ldw	r21,20(sp)
 8008084:	dd000417 	ldw	r20,16(sp)
 8008088:	dcc00317 	ldw	r19,12(sp)
 800808c:	dc800217 	ldw	r18,8(sp)
 8008090:	dc400117 	ldw	r17,4(sp)
 8008094:	dc000017 	ldw	r16,0(sp)
 8008098:	dec00904 	addi	sp,sp,36
 800809c:	f800283a 	ret
 80080a0:	99400117 	ldw	r5,4(r19)
 80080a4:	a009883a 	mov	r4,r20
 80080a8:	29400044 	addi	r5,r5,1
 80080ac:	8007eec0 	call	8007eec <_Balloc>
 80080b0:	99800417 	ldw	r6,16(r19)
 80080b4:	99400304 	addi	r5,r19,12
 80080b8:	11000304 	addi	r4,r2,12
 80080bc:	31800084 	addi	r6,r6,2
 80080c0:	318d883a 	add	r6,r6,r6
 80080c4:	318d883a 	add	r6,r6,r6
 80080c8:	1023883a 	mov	r17,r2
 80080cc:	8007c580 	call	8007c58 <memcpy>
 80080d0:	99000117 	ldw	r4,4(r19)
 80080d4:	a0c01317 	ldw	r3,76(r20)
 80080d8:	2109883a 	add	r4,r4,r4
 80080dc:	2109883a 	add	r4,r4,r4
 80080e0:	1907883a 	add	r3,r3,r4
 80080e4:	18800017 	ldw	r2,0(r3)
 80080e8:	98800015 	stw	r2,0(r19)
 80080ec:	1cc00015 	stw	r19,0(r3)
 80080f0:	8827883a 	mov	r19,r17
 80080f4:	003fd706 	br	8008054 <__alt_data_end+0xfc008054>

080080f8 <__s2b>:
 80080f8:	defff904 	addi	sp,sp,-28
 80080fc:	dc400115 	stw	r17,4(sp)
 8008100:	dc000015 	stw	r16,0(sp)
 8008104:	2023883a 	mov	r17,r4
 8008108:	2821883a 	mov	r16,r5
 800810c:	39000204 	addi	r4,r7,8
 8008110:	01400244 	movi	r5,9
 8008114:	dcc00315 	stw	r19,12(sp)
 8008118:	dc800215 	stw	r18,8(sp)
 800811c:	dfc00615 	stw	ra,24(sp)
 8008120:	dd400515 	stw	r21,20(sp)
 8008124:	dd000415 	stw	r20,16(sp)
 8008128:	3825883a 	mov	r18,r7
 800812c:	3027883a 	mov	r19,r6
 8008130:	800be900 	call	800be90 <__divsi3>
 8008134:	00c00044 	movi	r3,1
 8008138:	000b883a 	mov	r5,zero
 800813c:	1880030e 	bge	r3,r2,800814c <__s2b+0x54>
 8008140:	18c7883a 	add	r3,r3,r3
 8008144:	29400044 	addi	r5,r5,1
 8008148:	18bffd16 	blt	r3,r2,8008140 <__alt_data_end+0xfc008140>
 800814c:	8809883a 	mov	r4,r17
 8008150:	8007eec0 	call	8007eec <_Balloc>
 8008154:	d8c00717 	ldw	r3,28(sp)
 8008158:	10c00515 	stw	r3,20(r2)
 800815c:	00c00044 	movi	r3,1
 8008160:	10c00415 	stw	r3,16(r2)
 8008164:	00c00244 	movi	r3,9
 8008168:	1cc0210e 	bge	r3,r19,80081f0 <__s2b+0xf8>
 800816c:	80eb883a 	add	r21,r16,r3
 8008170:	a829883a 	mov	r20,r21
 8008174:	84e1883a 	add	r16,r16,r19
 8008178:	a1c00007 	ldb	r7,0(r20)
 800817c:	8809883a 	mov	r4,r17
 8008180:	a5000044 	addi	r20,r20,1
 8008184:	100b883a 	mov	r5,r2
 8008188:	01800284 	movi	r6,10
 800818c:	39fff404 	addi	r7,r7,-48
 8008190:	8007fbc0 	call	8007fbc <__multadd>
 8008194:	a43ff81e 	bne	r20,r16,8008178 <__alt_data_end+0xfc008178>
 8008198:	ace1883a 	add	r16,r21,r19
 800819c:	843ffe04 	addi	r16,r16,-8
 80081a0:	9c800a0e 	bge	r19,r18,80081cc <__s2b+0xd4>
 80081a4:	94e5c83a 	sub	r18,r18,r19
 80081a8:	84a5883a 	add	r18,r16,r18
 80081ac:	81c00007 	ldb	r7,0(r16)
 80081b0:	8809883a 	mov	r4,r17
 80081b4:	84000044 	addi	r16,r16,1
 80081b8:	100b883a 	mov	r5,r2
 80081bc:	01800284 	movi	r6,10
 80081c0:	39fff404 	addi	r7,r7,-48
 80081c4:	8007fbc0 	call	8007fbc <__multadd>
 80081c8:	84bff81e 	bne	r16,r18,80081ac <__alt_data_end+0xfc0081ac>
 80081cc:	dfc00617 	ldw	ra,24(sp)
 80081d0:	dd400517 	ldw	r21,20(sp)
 80081d4:	dd000417 	ldw	r20,16(sp)
 80081d8:	dcc00317 	ldw	r19,12(sp)
 80081dc:	dc800217 	ldw	r18,8(sp)
 80081e0:	dc400117 	ldw	r17,4(sp)
 80081e4:	dc000017 	ldw	r16,0(sp)
 80081e8:	dec00704 	addi	sp,sp,28
 80081ec:	f800283a 	ret
 80081f0:	84000284 	addi	r16,r16,10
 80081f4:	1827883a 	mov	r19,r3
 80081f8:	003fe906 	br	80081a0 <__alt_data_end+0xfc0081a0>

080081fc <__hi0bits>:
 80081fc:	20bfffec 	andhi	r2,r4,65535
 8008200:	1000141e 	bne	r2,zero,8008254 <__hi0bits+0x58>
 8008204:	2008943a 	slli	r4,r4,16
 8008208:	00800404 	movi	r2,16
 800820c:	20ffc02c 	andhi	r3,r4,65280
 8008210:	1800021e 	bne	r3,zero,800821c <__hi0bits+0x20>
 8008214:	2008923a 	slli	r4,r4,8
 8008218:	10800204 	addi	r2,r2,8
 800821c:	20fc002c 	andhi	r3,r4,61440
 8008220:	1800021e 	bne	r3,zero,800822c <__hi0bits+0x30>
 8008224:	2008913a 	slli	r4,r4,4
 8008228:	10800104 	addi	r2,r2,4
 800822c:	20f0002c 	andhi	r3,r4,49152
 8008230:	1800031e 	bne	r3,zero,8008240 <__hi0bits+0x44>
 8008234:	2109883a 	add	r4,r4,r4
 8008238:	10800084 	addi	r2,r2,2
 800823c:	2109883a 	add	r4,r4,r4
 8008240:	20000316 	blt	r4,zero,8008250 <__hi0bits+0x54>
 8008244:	2110002c 	andhi	r4,r4,16384
 8008248:	2000041e 	bne	r4,zero,800825c <__hi0bits+0x60>
 800824c:	00800804 	movi	r2,32
 8008250:	f800283a 	ret
 8008254:	0005883a 	mov	r2,zero
 8008258:	003fec06 	br	800820c <__alt_data_end+0xfc00820c>
 800825c:	10800044 	addi	r2,r2,1
 8008260:	f800283a 	ret

08008264 <__lo0bits>:
 8008264:	20c00017 	ldw	r3,0(r4)
 8008268:	188001cc 	andi	r2,r3,7
 800826c:	10000826 	beq	r2,zero,8008290 <__lo0bits+0x2c>
 8008270:	1880004c 	andi	r2,r3,1
 8008274:	1000211e 	bne	r2,zero,80082fc <__lo0bits+0x98>
 8008278:	1880008c 	andi	r2,r3,2
 800827c:	1000211e 	bne	r2,zero,8008304 <__lo0bits+0xa0>
 8008280:	1806d0ba 	srli	r3,r3,2
 8008284:	00800084 	movi	r2,2
 8008288:	20c00015 	stw	r3,0(r4)
 800828c:	f800283a 	ret
 8008290:	18bfffcc 	andi	r2,r3,65535
 8008294:	10001326 	beq	r2,zero,80082e4 <__lo0bits+0x80>
 8008298:	0005883a 	mov	r2,zero
 800829c:	19403fcc 	andi	r5,r3,255
 80082a0:	2800021e 	bne	r5,zero,80082ac <__lo0bits+0x48>
 80082a4:	1806d23a 	srli	r3,r3,8
 80082a8:	10800204 	addi	r2,r2,8
 80082ac:	194003cc 	andi	r5,r3,15
 80082b0:	2800021e 	bne	r5,zero,80082bc <__lo0bits+0x58>
 80082b4:	1806d13a 	srli	r3,r3,4
 80082b8:	10800104 	addi	r2,r2,4
 80082bc:	194000cc 	andi	r5,r3,3
 80082c0:	2800021e 	bne	r5,zero,80082cc <__lo0bits+0x68>
 80082c4:	1806d0ba 	srli	r3,r3,2
 80082c8:	10800084 	addi	r2,r2,2
 80082cc:	1940004c 	andi	r5,r3,1
 80082d0:	2800081e 	bne	r5,zero,80082f4 <__lo0bits+0x90>
 80082d4:	1806d07a 	srli	r3,r3,1
 80082d8:	1800051e 	bne	r3,zero,80082f0 <__lo0bits+0x8c>
 80082dc:	00800804 	movi	r2,32
 80082e0:	f800283a 	ret
 80082e4:	1806d43a 	srli	r3,r3,16
 80082e8:	00800404 	movi	r2,16
 80082ec:	003feb06 	br	800829c <__alt_data_end+0xfc00829c>
 80082f0:	10800044 	addi	r2,r2,1
 80082f4:	20c00015 	stw	r3,0(r4)
 80082f8:	f800283a 	ret
 80082fc:	0005883a 	mov	r2,zero
 8008300:	f800283a 	ret
 8008304:	1806d07a 	srli	r3,r3,1
 8008308:	00800044 	movi	r2,1
 800830c:	20c00015 	stw	r3,0(r4)
 8008310:	f800283a 	ret

08008314 <__i2b>:
 8008314:	defffd04 	addi	sp,sp,-12
 8008318:	dc000015 	stw	r16,0(sp)
 800831c:	04000044 	movi	r16,1
 8008320:	dc400115 	stw	r17,4(sp)
 8008324:	2823883a 	mov	r17,r5
 8008328:	800b883a 	mov	r5,r16
 800832c:	dfc00215 	stw	ra,8(sp)
 8008330:	8007eec0 	call	8007eec <_Balloc>
 8008334:	14400515 	stw	r17,20(r2)
 8008338:	14000415 	stw	r16,16(r2)
 800833c:	dfc00217 	ldw	ra,8(sp)
 8008340:	dc400117 	ldw	r17,4(sp)
 8008344:	dc000017 	ldw	r16,0(sp)
 8008348:	dec00304 	addi	sp,sp,12
 800834c:	f800283a 	ret

08008350 <__multiply>:
 8008350:	deffef04 	addi	sp,sp,-68
 8008354:	dc400815 	stw	r17,32(sp)
 8008358:	dc000715 	stw	r16,28(sp)
 800835c:	2c400417 	ldw	r17,16(r5)
 8008360:	34000417 	ldw	r16,16(r6)
 8008364:	dd800d15 	stw	r22,52(sp)
 8008368:	dc800915 	stw	r18,36(sp)
 800836c:	dfc01015 	stw	ra,64(sp)
 8008370:	df000f15 	stw	fp,60(sp)
 8008374:	ddc00e15 	stw	r23,56(sp)
 8008378:	dd400c15 	stw	r21,48(sp)
 800837c:	dd000b15 	stw	r20,44(sp)
 8008380:	dcc00a15 	stw	r19,40(sp)
 8008384:	2825883a 	mov	r18,r5
 8008388:	302d883a 	mov	r22,r6
 800838c:	8c009116 	blt	r17,r16,80085d4 <__multiply+0x284>
 8008390:	8005883a 	mov	r2,r16
 8008394:	8821883a 	mov	r16,r17
 8008398:	1023883a 	mov	r17,r2
 800839c:	90800217 	ldw	r2,8(r18)
 80083a0:	8447883a 	add	r3,r16,r17
 80083a4:	d8c00215 	stw	r3,8(sp)
 80083a8:	91400117 	ldw	r5,4(r18)
 80083ac:	10c0010e 	bge	r2,r3,80083b4 <__multiply+0x64>
 80083b0:	29400044 	addi	r5,r5,1
 80083b4:	8007eec0 	call	8007eec <_Balloc>
 80083b8:	d8c00217 	ldw	r3,8(sp)
 80083bc:	d8800615 	stw	r2,24(sp)
 80083c0:	18eb883a 	add	r21,r3,r3
 80083c4:	ad6b883a 	add	r21,r21,r21
 80083c8:	10c00504 	addi	r3,r2,20
 80083cc:	1d6b883a 	add	r21,r3,r21
 80083d0:	d8c00115 	stw	r3,4(sp)
 80083d4:	dd400315 	stw	r21,12(sp)
 80083d8:	1805883a 	mov	r2,r3
 80083dc:	1d40042e 	bgeu	r3,r21,80083f0 <__multiply+0xa0>
 80083e0:	d8c00317 	ldw	r3,12(sp)
 80083e4:	10000015 	stw	zero,0(r2)
 80083e8:	10800104 	addi	r2,r2,4
 80083ec:	10fffc36 	bltu	r2,r3,80083e0 <__alt_data_end+0xfc0083e0>
 80083f0:	8c63883a 	add	r17,r17,r17
 80083f4:	b5800504 	addi	r22,r22,20
 80083f8:	8c63883a 	add	r17,r17,r17
 80083fc:	94800504 	addi	r18,r18,20
 8008400:	8421883a 	add	r16,r16,r16
 8008404:	b463883a 	add	r17,r22,r17
 8008408:	8421883a 	add	r16,r16,r16
 800840c:	dd800015 	stw	r22,0(sp)
 8008410:	dc800415 	stw	r18,16(sp)
 8008414:	dc400515 	stw	r17,20(sp)
 8008418:	9429883a 	add	r20,r18,r16
 800841c:	b4404f2e 	bgeu	r22,r17,800855c <__multiply+0x20c>
 8008420:	d8c00017 	ldw	r3,0(sp)
 8008424:	1c800017 	ldw	r18,0(r3)
 8008428:	943fffcc 	andi	r16,r18,65535
 800842c:	80001e26 	beq	r16,zero,80084a8 <__multiply+0x158>
 8008430:	dd800117 	ldw	r22,4(sp)
 8008434:	dd400417 	ldw	r21,16(sp)
 8008438:	0025883a 	mov	r18,zero
 800843c:	adc00017 	ldw	r23,0(r21)
 8008440:	b4c00017 	ldw	r19,0(r22)
 8008444:	800b883a 	mov	r5,r16
 8008448:	b93fffcc 	andi	r4,r23,65535
 800844c:	800bf500 	call	800bf50 <__mulsi3>
 8008450:	9c7fffcc 	andi	r17,r19,65535
 8008454:	8885883a 	add	r2,r17,r2
 8008458:	b808d43a 	srli	r4,r23,16
 800845c:	14a3883a 	add	r17,r2,r18
 8008460:	9826d43a 	srli	r19,r19,16
 8008464:	8824d43a 	srli	r18,r17,16
 8008468:	800b883a 	mov	r5,r16
 800846c:	800bf500 	call	800bf50 <__mulsi3>
 8008470:	9885883a 	add	r2,r19,r2
 8008474:	14a7883a 	add	r19,r2,r18
 8008478:	88ffffcc 	andi	r3,r17,65535
 800847c:	9822943a 	slli	r17,r19,16
 8008480:	ad400104 	addi	r21,r21,4
 8008484:	b005883a 	mov	r2,r22
 8008488:	88c6b03a 	or	r3,r17,r3
 800848c:	b0c00015 	stw	r3,0(r22)
 8008490:	9824d43a 	srli	r18,r19,16
 8008494:	b5800104 	addi	r22,r22,4
 8008498:	ad3fe836 	bltu	r21,r20,800843c <__alt_data_end+0xfc00843c>
 800849c:	d8c00017 	ldw	r3,0(sp)
 80084a0:	14800115 	stw	r18,4(r2)
 80084a4:	1c800017 	ldw	r18,0(r3)
 80084a8:	9024d43a 	srli	r18,r18,16
 80084ac:	90002226 	beq	r18,zero,8008538 <__multiply+0x1e8>
 80084b0:	d8c00117 	ldw	r3,4(sp)
 80084b4:	dd800417 	ldw	r22,16(sp)
 80084b8:	002f883a 	mov	r23,zero
 80084bc:	1f000017 	ldw	fp,0(r3)
 80084c0:	1823883a 	mov	r17,r3
 80084c4:	182b883a 	mov	r21,r3
 80084c8:	e021883a 	mov	r16,fp
 80084cc:	00000106 	br	80084d4 <__multiply+0x184>
 80084d0:	982b883a 	mov	r21,r19
 80084d4:	b100000b 	ldhu	r4,0(r22)
 80084d8:	8020d43a 	srli	r16,r16,16
 80084dc:	900b883a 	mov	r5,r18
 80084e0:	800bf500 	call	800bf50 <__mulsi3>
 80084e4:	1405883a 	add	r2,r2,r16
 80084e8:	15ef883a 	add	r23,r2,r23
 80084ec:	b804943a 	slli	r2,r23,16
 80084f0:	e0ffffcc 	andi	r3,fp,65535
 80084f4:	8c400104 	addi	r17,r17,4
 80084f8:	10c6b03a 	or	r3,r2,r3
 80084fc:	88ffff15 	stw	r3,-4(r17)
 8008500:	b5800104 	addi	r22,r22,4
 8008504:	b13fff17 	ldw	r4,-4(r22)
 8008508:	acc00104 	addi	r19,r21,4
 800850c:	900b883a 	mov	r5,r18
 8008510:	2008d43a 	srli	r4,r4,16
 8008514:	9c000017 	ldw	r16,0(r19)
 8008518:	800bf500 	call	800bf50 <__mulsi3>
 800851c:	b806d43a 	srli	r3,r23,16
 8008520:	813fffcc 	andi	r4,r16,65535
 8008524:	1105883a 	add	r2,r2,r4
 8008528:	10f9883a 	add	fp,r2,r3
 800852c:	e02ed43a 	srli	r23,fp,16
 8008530:	b53fe736 	bltu	r22,r20,80084d0 <__alt_data_end+0xfc0084d0>
 8008534:	af000115 	stw	fp,4(r21)
 8008538:	d8c00017 	ldw	r3,0(sp)
 800853c:	d9000517 	ldw	r4,20(sp)
 8008540:	18c00104 	addi	r3,r3,4
 8008544:	d8c00015 	stw	r3,0(sp)
 8008548:	d8c00117 	ldw	r3,4(sp)
 800854c:	18c00104 	addi	r3,r3,4
 8008550:	d8c00115 	stw	r3,4(sp)
 8008554:	d8c00017 	ldw	r3,0(sp)
 8008558:	193fb136 	bltu	r3,r4,8008420 <__alt_data_end+0xfc008420>
 800855c:	d8c00217 	ldw	r3,8(sp)
 8008560:	00c00c0e 	bge	zero,r3,8008594 <__multiply+0x244>
 8008564:	d8c00317 	ldw	r3,12(sp)
 8008568:	18bfff17 	ldw	r2,-4(r3)
 800856c:	1d7fff04 	addi	r21,r3,-4
 8008570:	10000326 	beq	r2,zero,8008580 <__multiply+0x230>
 8008574:	00000706 	br	8008594 <__multiply+0x244>
 8008578:	a8800017 	ldw	r2,0(r21)
 800857c:	1000051e 	bne	r2,zero,8008594 <__multiply+0x244>
 8008580:	d8c00217 	ldw	r3,8(sp)
 8008584:	ad7fff04 	addi	r21,r21,-4
 8008588:	18ffffc4 	addi	r3,r3,-1
 800858c:	d8c00215 	stw	r3,8(sp)
 8008590:	183ff91e 	bne	r3,zero,8008578 <__alt_data_end+0xfc008578>
 8008594:	d8c00617 	ldw	r3,24(sp)
 8008598:	d9000217 	ldw	r4,8(sp)
 800859c:	1805883a 	mov	r2,r3
 80085a0:	19000415 	stw	r4,16(r3)
 80085a4:	dfc01017 	ldw	ra,64(sp)
 80085a8:	df000f17 	ldw	fp,60(sp)
 80085ac:	ddc00e17 	ldw	r23,56(sp)
 80085b0:	dd800d17 	ldw	r22,52(sp)
 80085b4:	dd400c17 	ldw	r21,48(sp)
 80085b8:	dd000b17 	ldw	r20,44(sp)
 80085bc:	dcc00a17 	ldw	r19,40(sp)
 80085c0:	dc800917 	ldw	r18,36(sp)
 80085c4:	dc400817 	ldw	r17,32(sp)
 80085c8:	dc000717 	ldw	r16,28(sp)
 80085cc:	dec01104 	addi	sp,sp,68
 80085d0:	f800283a 	ret
 80085d4:	3025883a 	mov	r18,r6
 80085d8:	282d883a 	mov	r22,r5
 80085dc:	003f6f06 	br	800839c <__alt_data_end+0xfc00839c>

080085e0 <__pow5mult>:
 80085e0:	defffa04 	addi	sp,sp,-24
 80085e4:	dcc00315 	stw	r19,12(sp)
 80085e8:	dc800215 	stw	r18,8(sp)
 80085ec:	dc000015 	stw	r16,0(sp)
 80085f0:	dfc00515 	stw	ra,20(sp)
 80085f4:	dd000415 	stw	r20,16(sp)
 80085f8:	dc400115 	stw	r17,4(sp)
 80085fc:	308000cc 	andi	r2,r6,3
 8008600:	3021883a 	mov	r16,r6
 8008604:	2027883a 	mov	r19,r4
 8008608:	2825883a 	mov	r18,r5
 800860c:	10002e1e 	bne	r2,zero,80086c8 <__pow5mult+0xe8>
 8008610:	8021d0ba 	srai	r16,r16,2
 8008614:	80001a26 	beq	r16,zero,8008680 <__pow5mult+0xa0>
 8008618:	9c401217 	ldw	r17,72(r19)
 800861c:	8800061e 	bne	r17,zero,8008638 <__pow5mult+0x58>
 8008620:	00003406 	br	80086f4 <__pow5mult+0x114>
 8008624:	8021d07a 	srai	r16,r16,1
 8008628:	80001526 	beq	r16,zero,8008680 <__pow5mult+0xa0>
 800862c:	88800017 	ldw	r2,0(r17)
 8008630:	10001c26 	beq	r2,zero,80086a4 <__pow5mult+0xc4>
 8008634:	1023883a 	mov	r17,r2
 8008638:	80c0004c 	andi	r3,r16,1
 800863c:	183ff926 	beq	r3,zero,8008624 <__alt_data_end+0xfc008624>
 8008640:	900b883a 	mov	r5,r18
 8008644:	880d883a 	mov	r6,r17
 8008648:	9809883a 	mov	r4,r19
 800864c:	80083500 	call	8008350 <__multiply>
 8008650:	90001b26 	beq	r18,zero,80086c0 <__pow5mult+0xe0>
 8008654:	91c00117 	ldw	r7,4(r18)
 8008658:	98c01317 	ldw	r3,76(r19)
 800865c:	8021d07a 	srai	r16,r16,1
 8008660:	39cf883a 	add	r7,r7,r7
 8008664:	39cf883a 	add	r7,r7,r7
 8008668:	19c7883a 	add	r3,r3,r7
 800866c:	19000017 	ldw	r4,0(r3)
 8008670:	91000015 	stw	r4,0(r18)
 8008674:	1c800015 	stw	r18,0(r3)
 8008678:	1025883a 	mov	r18,r2
 800867c:	803feb1e 	bne	r16,zero,800862c <__alt_data_end+0xfc00862c>
 8008680:	9005883a 	mov	r2,r18
 8008684:	dfc00517 	ldw	ra,20(sp)
 8008688:	dd000417 	ldw	r20,16(sp)
 800868c:	dcc00317 	ldw	r19,12(sp)
 8008690:	dc800217 	ldw	r18,8(sp)
 8008694:	dc400117 	ldw	r17,4(sp)
 8008698:	dc000017 	ldw	r16,0(sp)
 800869c:	dec00604 	addi	sp,sp,24
 80086a0:	f800283a 	ret
 80086a4:	9809883a 	mov	r4,r19
 80086a8:	880b883a 	mov	r5,r17
 80086ac:	880d883a 	mov	r6,r17
 80086b0:	80083500 	call	8008350 <__multiply>
 80086b4:	88800015 	stw	r2,0(r17)
 80086b8:	10000015 	stw	zero,0(r2)
 80086bc:	003fdd06 	br	8008634 <__alt_data_end+0xfc008634>
 80086c0:	1025883a 	mov	r18,r2
 80086c4:	003fd706 	br	8008624 <__alt_data_end+0xfc008624>
 80086c8:	10bfffc4 	addi	r2,r2,-1
 80086cc:	1085883a 	add	r2,r2,r2
 80086d0:	00c20074 	movhi	r3,2049
 80086d4:	18c7b404 	addi	r3,r3,7888
 80086d8:	1085883a 	add	r2,r2,r2
 80086dc:	1885883a 	add	r2,r3,r2
 80086e0:	11800017 	ldw	r6,0(r2)
 80086e4:	000f883a 	mov	r7,zero
 80086e8:	8007fbc0 	call	8007fbc <__multadd>
 80086ec:	1025883a 	mov	r18,r2
 80086f0:	003fc706 	br	8008610 <__alt_data_end+0xfc008610>
 80086f4:	05000044 	movi	r20,1
 80086f8:	9809883a 	mov	r4,r19
 80086fc:	a00b883a 	mov	r5,r20
 8008700:	8007eec0 	call	8007eec <_Balloc>
 8008704:	1023883a 	mov	r17,r2
 8008708:	00809c44 	movi	r2,625
 800870c:	88800515 	stw	r2,20(r17)
 8008710:	8d000415 	stw	r20,16(r17)
 8008714:	9c401215 	stw	r17,72(r19)
 8008718:	88000015 	stw	zero,0(r17)
 800871c:	003fc606 	br	8008638 <__alt_data_end+0xfc008638>

08008720 <__lshift>:
 8008720:	defff904 	addi	sp,sp,-28
 8008724:	dd000415 	stw	r20,16(sp)
 8008728:	dcc00315 	stw	r19,12(sp)
 800872c:	3029d17a 	srai	r20,r6,5
 8008730:	2cc00417 	ldw	r19,16(r5)
 8008734:	28800217 	ldw	r2,8(r5)
 8008738:	dd400515 	stw	r21,20(sp)
 800873c:	a4e7883a 	add	r19,r20,r19
 8008740:	dc800215 	stw	r18,8(sp)
 8008744:	dc400115 	stw	r17,4(sp)
 8008748:	dc000015 	stw	r16,0(sp)
 800874c:	dfc00615 	stw	ra,24(sp)
 8008750:	9c000044 	addi	r16,r19,1
 8008754:	2823883a 	mov	r17,r5
 8008758:	302b883a 	mov	r21,r6
 800875c:	2025883a 	mov	r18,r4
 8008760:	29400117 	ldw	r5,4(r5)
 8008764:	1400030e 	bge	r2,r16,8008774 <__lshift+0x54>
 8008768:	1085883a 	add	r2,r2,r2
 800876c:	29400044 	addi	r5,r5,1
 8008770:	143ffd16 	blt	r2,r16,8008768 <__alt_data_end+0xfc008768>
 8008774:	9009883a 	mov	r4,r18
 8008778:	8007eec0 	call	8007eec <_Balloc>
 800877c:	11c00504 	addi	r7,r2,20
 8008780:	0500090e 	bge	zero,r20,80087a8 <__lshift+0x88>
 8008784:	3811883a 	mov	r8,r7
 8008788:	0007883a 	mov	r3,zero
 800878c:	40000015 	stw	zero,0(r8)
 8008790:	18c00044 	addi	r3,r3,1
 8008794:	42000104 	addi	r8,r8,4
 8008798:	1d3ffc1e 	bne	r3,r20,800878c <__alt_data_end+0xfc00878c>
 800879c:	18c7883a 	add	r3,r3,r3
 80087a0:	18c7883a 	add	r3,r3,r3
 80087a4:	38cf883a 	add	r7,r7,r3
 80087a8:	89000417 	ldw	r4,16(r17)
 80087ac:	88c00504 	addi	r3,r17,20
 80087b0:	a98007cc 	andi	r6,r21,31
 80087b4:	2109883a 	add	r4,r4,r4
 80087b8:	2109883a 	add	r4,r4,r4
 80087bc:	1909883a 	add	r4,r3,r4
 80087c0:	30002326 	beq	r6,zero,8008850 <__lshift+0x130>
 80087c4:	01400804 	movi	r5,32
 80087c8:	298bc83a 	sub	r5,r5,r6
 80087cc:	0013883a 	mov	r9,zero
 80087d0:	1a000017 	ldw	r8,0(r3)
 80087d4:	3815883a 	mov	r10,r7
 80087d8:	39c00104 	addi	r7,r7,4
 80087dc:	4190983a 	sll	r8,r8,r6
 80087e0:	18c00104 	addi	r3,r3,4
 80087e4:	4a10b03a 	or	r8,r9,r8
 80087e8:	3a3fff15 	stw	r8,-4(r7)
 80087ec:	1a3fff17 	ldw	r8,-4(r3)
 80087f0:	4152d83a 	srl	r9,r8,r5
 80087f4:	193ff636 	bltu	r3,r4,80087d0 <__alt_data_end+0xfc0087d0>
 80087f8:	52400115 	stw	r9,4(r10)
 80087fc:	48000126 	beq	r9,zero,8008804 <__lshift+0xe4>
 8008800:	9c000084 	addi	r16,r19,2
 8008804:	89000117 	ldw	r4,4(r17)
 8008808:	90c01317 	ldw	r3,76(r18)
 800880c:	843fffc4 	addi	r16,r16,-1
 8008810:	2109883a 	add	r4,r4,r4
 8008814:	2109883a 	add	r4,r4,r4
 8008818:	1907883a 	add	r3,r3,r4
 800881c:	19000017 	ldw	r4,0(r3)
 8008820:	14000415 	stw	r16,16(r2)
 8008824:	89000015 	stw	r4,0(r17)
 8008828:	1c400015 	stw	r17,0(r3)
 800882c:	dfc00617 	ldw	ra,24(sp)
 8008830:	dd400517 	ldw	r21,20(sp)
 8008834:	dd000417 	ldw	r20,16(sp)
 8008838:	dcc00317 	ldw	r19,12(sp)
 800883c:	dc800217 	ldw	r18,8(sp)
 8008840:	dc400117 	ldw	r17,4(sp)
 8008844:	dc000017 	ldw	r16,0(sp)
 8008848:	dec00704 	addi	sp,sp,28
 800884c:	f800283a 	ret
 8008850:	19400017 	ldw	r5,0(r3)
 8008854:	39c00104 	addi	r7,r7,4
 8008858:	18c00104 	addi	r3,r3,4
 800885c:	397fff15 	stw	r5,-4(r7)
 8008860:	193ffb36 	bltu	r3,r4,8008850 <__alt_data_end+0xfc008850>
 8008864:	003fe706 	br	8008804 <__alt_data_end+0xfc008804>

08008868 <__mcmp>:
 8008868:	20800417 	ldw	r2,16(r4)
 800886c:	28c00417 	ldw	r3,16(r5)
 8008870:	10c5c83a 	sub	r2,r2,r3
 8008874:	1000111e 	bne	r2,zero,80088bc <__mcmp+0x54>
 8008878:	18c7883a 	add	r3,r3,r3
 800887c:	18c7883a 	add	r3,r3,r3
 8008880:	21000504 	addi	r4,r4,20
 8008884:	29400504 	addi	r5,r5,20
 8008888:	20c5883a 	add	r2,r4,r3
 800888c:	28cb883a 	add	r5,r5,r3
 8008890:	00000106 	br	8008898 <__mcmp+0x30>
 8008894:	20800a2e 	bgeu	r4,r2,80088c0 <__mcmp+0x58>
 8008898:	10bfff04 	addi	r2,r2,-4
 800889c:	297fff04 	addi	r5,r5,-4
 80088a0:	11800017 	ldw	r6,0(r2)
 80088a4:	28c00017 	ldw	r3,0(r5)
 80088a8:	30fffa26 	beq	r6,r3,8008894 <__alt_data_end+0xfc008894>
 80088ac:	30c00236 	bltu	r6,r3,80088b8 <__mcmp+0x50>
 80088b0:	00800044 	movi	r2,1
 80088b4:	f800283a 	ret
 80088b8:	00bfffc4 	movi	r2,-1
 80088bc:	f800283a 	ret
 80088c0:	0005883a 	mov	r2,zero
 80088c4:	f800283a 	ret

080088c8 <__mdiff>:
 80088c8:	defffb04 	addi	sp,sp,-20
 80088cc:	dc000015 	stw	r16,0(sp)
 80088d0:	2821883a 	mov	r16,r5
 80088d4:	dcc00315 	stw	r19,12(sp)
 80088d8:	300b883a 	mov	r5,r6
 80088dc:	2027883a 	mov	r19,r4
 80088e0:	8009883a 	mov	r4,r16
 80088e4:	dc800215 	stw	r18,8(sp)
 80088e8:	dfc00415 	stw	ra,16(sp)
 80088ec:	dc400115 	stw	r17,4(sp)
 80088f0:	3025883a 	mov	r18,r6
 80088f4:	80088680 	call	8008868 <__mcmp>
 80088f8:	10005226 	beq	r2,zero,8008a44 <__mdiff+0x17c>
 80088fc:	10004c16 	blt	r2,zero,8008a30 <__mdiff+0x168>
 8008900:	0023883a 	mov	r17,zero
 8008904:	81400117 	ldw	r5,4(r16)
 8008908:	9809883a 	mov	r4,r19
 800890c:	8007eec0 	call	8007eec <_Balloc>
 8008910:	83400417 	ldw	r13,16(r16)
 8008914:	93800417 	ldw	r14,16(r18)
 8008918:	81000504 	addi	r4,r16,20
 800891c:	6b59883a 	add	r12,r13,r13
 8008920:	739d883a 	add	r14,r14,r14
 8008924:	6319883a 	add	r12,r12,r12
 8008928:	91800504 	addi	r6,r18,20
 800892c:	739d883a 	add	r14,r14,r14
 8008930:	14400315 	stw	r17,12(r2)
 8008934:	2319883a 	add	r12,r4,r12
 8008938:	339d883a 	add	r14,r6,r14
 800893c:	12400504 	addi	r9,r2,20
 8008940:	0007883a 	mov	r3,zero
 8008944:	22000017 	ldw	r8,0(r4)
 8008948:	32800017 	ldw	r10,0(r6)
 800894c:	4ac00104 	addi	r11,r9,4
 8008950:	41ffffcc 	andi	r7,r8,65535
 8008954:	38c7883a 	add	r3,r7,r3
 8008958:	51ffffcc 	andi	r7,r10,65535
 800895c:	19cfc83a 	sub	r7,r3,r7
 8008960:	4010d43a 	srli	r8,r8,16
 8008964:	5014d43a 	srli	r10,r10,16
 8008968:	3807d43a 	srai	r3,r7,16
 800896c:	39ffffcc 	andi	r7,r7,65535
 8008970:	4291c83a 	sub	r8,r8,r10
 8008974:	40c7883a 	add	r3,r8,r3
 8008978:	1810943a 	slli	r8,r3,16
 800897c:	31800104 	addi	r6,r6,4
 8008980:	21000104 	addi	r4,r4,4
 8008984:	41ceb03a 	or	r7,r8,r7
 8008988:	49c00015 	stw	r7,0(r9)
 800898c:	1807d43a 	srai	r3,r3,16
 8008990:	580b883a 	mov	r5,r11
 8008994:	5813883a 	mov	r9,r11
 8008998:	33bfea36 	bltu	r6,r14,8008944 <__alt_data_end+0xfc008944>
 800899c:	2011883a 	mov	r8,r4
 80089a0:	2300152e 	bgeu	r4,r12,80089f8 <__mdiff+0x130>
 80089a4:	21400017 	ldw	r5,0(r4)
 80089a8:	4a400104 	addi	r9,r9,4
 80089ac:	21000104 	addi	r4,r4,4
 80089b0:	29ffffcc 	andi	r7,r5,65535
 80089b4:	38c7883a 	add	r3,r7,r3
 80089b8:	280ad43a 	srli	r5,r5,16
 80089bc:	180dd43a 	srai	r6,r3,16
 80089c0:	19ffffcc 	andi	r7,r3,65535
 80089c4:	3147883a 	add	r3,r6,r5
 80089c8:	180a943a 	slli	r5,r3,16
 80089cc:	1807d43a 	srai	r3,r3,16
 80089d0:	29ceb03a 	or	r7,r5,r7
 80089d4:	49ffff15 	stw	r7,-4(r9)
 80089d8:	233ff236 	bltu	r4,r12,80089a4 <__alt_data_end+0xfc0089a4>
 80089dc:	0206303a 	nor	r3,zero,r8
 80089e0:	1b07883a 	add	r3,r3,r12
 80089e4:	1806d0ba 	srli	r3,r3,2
 80089e8:	18c00044 	addi	r3,r3,1
 80089ec:	18c7883a 	add	r3,r3,r3
 80089f0:	18c7883a 	add	r3,r3,r3
 80089f4:	58cb883a 	add	r5,r11,r3
 80089f8:	28ffff04 	addi	r3,r5,-4
 80089fc:	3800041e 	bne	r7,zero,8008a10 <__mdiff+0x148>
 8008a00:	18ffff04 	addi	r3,r3,-4
 8008a04:	19000017 	ldw	r4,0(r3)
 8008a08:	6b7fffc4 	addi	r13,r13,-1
 8008a0c:	203ffc26 	beq	r4,zero,8008a00 <__alt_data_end+0xfc008a00>
 8008a10:	13400415 	stw	r13,16(r2)
 8008a14:	dfc00417 	ldw	ra,16(sp)
 8008a18:	dcc00317 	ldw	r19,12(sp)
 8008a1c:	dc800217 	ldw	r18,8(sp)
 8008a20:	dc400117 	ldw	r17,4(sp)
 8008a24:	dc000017 	ldw	r16,0(sp)
 8008a28:	dec00504 	addi	sp,sp,20
 8008a2c:	f800283a 	ret
 8008a30:	8005883a 	mov	r2,r16
 8008a34:	04400044 	movi	r17,1
 8008a38:	9021883a 	mov	r16,r18
 8008a3c:	1025883a 	mov	r18,r2
 8008a40:	003fb006 	br	8008904 <__alt_data_end+0xfc008904>
 8008a44:	9809883a 	mov	r4,r19
 8008a48:	000b883a 	mov	r5,zero
 8008a4c:	8007eec0 	call	8007eec <_Balloc>
 8008a50:	00c00044 	movi	r3,1
 8008a54:	10c00415 	stw	r3,16(r2)
 8008a58:	10000515 	stw	zero,20(r2)
 8008a5c:	003fed06 	br	8008a14 <__alt_data_end+0xfc008a14>

08008a60 <__ulp>:
 8008a60:	295ffc2c 	andhi	r5,r5,32752
 8008a64:	00bf3034 	movhi	r2,64704
 8008a68:	2887883a 	add	r3,r5,r2
 8008a6c:	00c0020e 	bge	zero,r3,8008a78 <__ulp+0x18>
 8008a70:	0005883a 	mov	r2,zero
 8008a74:	f800283a 	ret
 8008a78:	00c7c83a 	sub	r3,zero,r3
 8008a7c:	180bd53a 	srai	r5,r3,20
 8008a80:	008004c4 	movi	r2,19
 8008a84:	11400a0e 	bge	r2,r5,8008ab0 <__ulp+0x50>
 8008a88:	00800c84 	movi	r2,50
 8008a8c:	0007883a 	mov	r3,zero
 8008a90:	11400516 	blt	r2,r5,8008aa8 <__ulp+0x48>
 8008a94:	00800cc4 	movi	r2,51
 8008a98:	114bc83a 	sub	r5,r2,r5
 8008a9c:	00800044 	movi	r2,1
 8008aa0:	1144983a 	sll	r2,r2,r5
 8008aa4:	f800283a 	ret
 8008aa8:	00800044 	movi	r2,1
 8008aac:	f800283a 	ret
 8008ab0:	00800234 	movhi	r2,8
 8008ab4:	1147d83a 	sra	r3,r2,r5
 8008ab8:	0005883a 	mov	r2,zero
 8008abc:	f800283a 	ret

08008ac0 <__b2d>:
 8008ac0:	defffa04 	addi	sp,sp,-24
 8008ac4:	dc000015 	stw	r16,0(sp)
 8008ac8:	24000417 	ldw	r16,16(r4)
 8008acc:	dc400115 	stw	r17,4(sp)
 8008ad0:	24400504 	addi	r17,r4,20
 8008ad4:	8421883a 	add	r16,r16,r16
 8008ad8:	8421883a 	add	r16,r16,r16
 8008adc:	8c21883a 	add	r16,r17,r16
 8008ae0:	dc800215 	stw	r18,8(sp)
 8008ae4:	84bfff17 	ldw	r18,-4(r16)
 8008ae8:	dd000415 	stw	r20,16(sp)
 8008aec:	dcc00315 	stw	r19,12(sp)
 8008af0:	9009883a 	mov	r4,r18
 8008af4:	2829883a 	mov	r20,r5
 8008af8:	dfc00515 	stw	ra,20(sp)
 8008afc:	80081fc0 	call	80081fc <__hi0bits>
 8008b00:	00c00804 	movi	r3,32
 8008b04:	1887c83a 	sub	r3,r3,r2
 8008b08:	a0c00015 	stw	r3,0(r20)
 8008b0c:	00c00284 	movi	r3,10
 8008b10:	84ffff04 	addi	r19,r16,-4
 8008b14:	18801216 	blt	r3,r2,8008b60 <__b2d+0xa0>
 8008b18:	014002c4 	movi	r5,11
 8008b1c:	2889c83a 	sub	r4,r5,r2
 8008b20:	9106d83a 	srl	r3,r18,r4
 8008b24:	18cffc34 	orhi	r3,r3,16368
 8008b28:	8cc0282e 	bgeu	r17,r19,8008bcc <__b2d+0x10c>
 8008b2c:	817ffe17 	ldw	r5,-8(r16)
 8008b30:	290ad83a 	srl	r5,r5,r4
 8008b34:	10800544 	addi	r2,r2,21
 8008b38:	9084983a 	sll	r2,r18,r2
 8008b3c:	2884b03a 	or	r2,r5,r2
 8008b40:	dfc00517 	ldw	ra,20(sp)
 8008b44:	dd000417 	ldw	r20,16(sp)
 8008b48:	dcc00317 	ldw	r19,12(sp)
 8008b4c:	dc800217 	ldw	r18,8(sp)
 8008b50:	dc400117 	ldw	r17,4(sp)
 8008b54:	dc000017 	ldw	r16,0(sp)
 8008b58:	dec00604 	addi	sp,sp,24
 8008b5c:	f800283a 	ret
 8008b60:	113ffd44 	addi	r4,r2,-11
 8008b64:	8cc00f2e 	bgeu	r17,r19,8008ba4 <__b2d+0xe4>
 8008b68:	81bffe04 	addi	r6,r16,-8
 8008b6c:	817ffe17 	ldw	r5,-8(r16)
 8008b70:	20001326 	beq	r4,zero,8008bc0 <__b2d+0x100>
 8008b74:	00c00ac4 	movi	r3,43
 8008b78:	1885c83a 	sub	r2,r3,r2
 8008b7c:	2886d83a 	srl	r3,r5,r2
 8008b80:	9124983a 	sll	r18,r18,r4
 8008b84:	90e4b03a 	or	r18,r18,r3
 8008b88:	90cffc34 	orhi	r3,r18,16368
 8008b8c:	8980112e 	bgeu	r17,r6,8008bd4 <__b2d+0x114>
 8008b90:	81bffd17 	ldw	r6,-12(r16)
 8008b94:	308cd83a 	srl	r6,r6,r2
 8008b98:	2904983a 	sll	r2,r5,r4
 8008b9c:	1184b03a 	or	r2,r2,r6
 8008ba0:	003fe706 	br	8008b40 <__alt_data_end+0xfc008b40>
 8008ba4:	20000526 	beq	r4,zero,8008bbc <__b2d+0xfc>
 8008ba8:	9124983a 	sll	r18,r18,r4
 8008bac:	000d883a 	mov	r6,zero
 8008bb0:	000b883a 	mov	r5,zero
 8008bb4:	90cffc34 	orhi	r3,r18,16368
 8008bb8:	003ff706 	br	8008b98 <__alt_data_end+0xfc008b98>
 8008bbc:	000b883a 	mov	r5,zero
 8008bc0:	90cffc34 	orhi	r3,r18,16368
 8008bc4:	2805883a 	mov	r2,r5
 8008bc8:	003fdd06 	br	8008b40 <__alt_data_end+0xfc008b40>
 8008bcc:	000b883a 	mov	r5,zero
 8008bd0:	003fd806 	br	8008b34 <__alt_data_end+0xfc008b34>
 8008bd4:	000d883a 	mov	r6,zero
 8008bd8:	003fef06 	br	8008b98 <__alt_data_end+0xfc008b98>

08008bdc <__d2b>:
 8008bdc:	defff704 	addi	sp,sp,-36
 8008be0:	dc000215 	stw	r16,8(sp)
 8008be4:	3021883a 	mov	r16,r6
 8008be8:	dc400315 	stw	r17,12(sp)
 8008bec:	8022907a 	slli	r17,r16,1
 8008bf0:	dd400715 	stw	r21,28(sp)
 8008bf4:	282b883a 	mov	r21,r5
 8008bf8:	01400044 	movi	r5,1
 8008bfc:	dd000615 	stw	r20,24(sp)
 8008c00:	dcc00515 	stw	r19,20(sp)
 8008c04:	dc800415 	stw	r18,16(sp)
 8008c08:	dfc00815 	stw	ra,32(sp)
 8008c0c:	3829883a 	mov	r20,r7
 8008c10:	dc800917 	ldw	r18,36(sp)
 8008c14:	8822d57a 	srli	r17,r17,21
 8008c18:	8007eec0 	call	8007eec <_Balloc>
 8008c1c:	1027883a 	mov	r19,r2
 8008c20:	00800434 	movhi	r2,16
 8008c24:	10bfffc4 	addi	r2,r2,-1
 8008c28:	808c703a 	and	r6,r16,r2
 8008c2c:	88000126 	beq	r17,zero,8008c34 <__d2b+0x58>
 8008c30:	31800434 	orhi	r6,r6,16
 8008c34:	d9800015 	stw	r6,0(sp)
 8008c38:	a8001f26 	beq	r21,zero,8008cb8 <__d2b+0xdc>
 8008c3c:	d9000104 	addi	r4,sp,4
 8008c40:	dd400115 	stw	r21,4(sp)
 8008c44:	80082640 	call	8008264 <__lo0bits>
 8008c48:	d8c00017 	ldw	r3,0(sp)
 8008c4c:	1000291e 	bne	r2,zero,8008cf4 <__d2b+0x118>
 8008c50:	d9000117 	ldw	r4,4(sp)
 8008c54:	99000515 	stw	r4,20(r19)
 8008c58:	1820c03a 	cmpne	r16,r3,zero
 8008c5c:	84000044 	addi	r16,r16,1
 8008c60:	98c00615 	stw	r3,24(r19)
 8008c64:	9c000415 	stw	r16,16(r19)
 8008c68:	88001b1e 	bne	r17,zero,8008cd8 <__d2b+0xfc>
 8008c6c:	800690ba 	slli	r3,r16,2
 8008c70:	10bef384 	addi	r2,r2,-1074
 8008c74:	a0800015 	stw	r2,0(r20)
 8008c78:	98c5883a 	add	r2,r19,r3
 8008c7c:	11000417 	ldw	r4,16(r2)
 8008c80:	8020917a 	slli	r16,r16,5
 8008c84:	80081fc0 	call	80081fc <__hi0bits>
 8008c88:	8085c83a 	sub	r2,r16,r2
 8008c8c:	90800015 	stw	r2,0(r18)
 8008c90:	9805883a 	mov	r2,r19
 8008c94:	dfc00817 	ldw	ra,32(sp)
 8008c98:	dd400717 	ldw	r21,28(sp)
 8008c9c:	dd000617 	ldw	r20,24(sp)
 8008ca0:	dcc00517 	ldw	r19,20(sp)
 8008ca4:	dc800417 	ldw	r18,16(sp)
 8008ca8:	dc400317 	ldw	r17,12(sp)
 8008cac:	dc000217 	ldw	r16,8(sp)
 8008cb0:	dec00904 	addi	sp,sp,36
 8008cb4:	f800283a 	ret
 8008cb8:	d809883a 	mov	r4,sp
 8008cbc:	80082640 	call	8008264 <__lo0bits>
 8008cc0:	d8c00017 	ldw	r3,0(sp)
 8008cc4:	04000044 	movi	r16,1
 8008cc8:	9c000415 	stw	r16,16(r19)
 8008ccc:	98c00515 	stw	r3,20(r19)
 8008cd0:	10800804 	addi	r2,r2,32
 8008cd4:	883fe526 	beq	r17,zero,8008c6c <__alt_data_end+0xfc008c6c>
 8008cd8:	8c7ef344 	addi	r17,r17,-1075
 8008cdc:	88a3883a 	add	r17,r17,r2
 8008ce0:	00c00d44 	movi	r3,53
 8008ce4:	a4400015 	stw	r17,0(r20)
 8008ce8:	1885c83a 	sub	r2,r3,r2
 8008cec:	90800015 	stw	r2,0(r18)
 8008cf0:	003fe706 	br	8008c90 <__alt_data_end+0xfc008c90>
 8008cf4:	01000804 	movi	r4,32
 8008cf8:	2089c83a 	sub	r4,r4,r2
 8008cfc:	1908983a 	sll	r4,r3,r4
 8008d00:	d9400117 	ldw	r5,4(sp)
 8008d04:	1886d83a 	srl	r3,r3,r2
 8008d08:	2148b03a 	or	r4,r4,r5
 8008d0c:	99000515 	stw	r4,20(r19)
 8008d10:	d8c00015 	stw	r3,0(sp)
 8008d14:	003fd006 	br	8008c58 <__alt_data_end+0xfc008c58>

08008d18 <__ratio>:
 8008d18:	defff904 	addi	sp,sp,-28
 8008d1c:	dc400315 	stw	r17,12(sp)
 8008d20:	2823883a 	mov	r17,r5
 8008d24:	d9400104 	addi	r5,sp,4
 8008d28:	dfc00615 	stw	ra,24(sp)
 8008d2c:	dcc00515 	stw	r19,20(sp)
 8008d30:	dc800415 	stw	r18,16(sp)
 8008d34:	2027883a 	mov	r19,r4
 8008d38:	dc000215 	stw	r16,8(sp)
 8008d3c:	8008ac00 	call	8008ac0 <__b2d>
 8008d40:	8809883a 	mov	r4,r17
 8008d44:	d80b883a 	mov	r5,sp
 8008d48:	1025883a 	mov	r18,r2
 8008d4c:	1821883a 	mov	r16,r3
 8008d50:	8008ac00 	call	8008ac0 <__b2d>
 8008d54:	8a400417 	ldw	r9,16(r17)
 8008d58:	9a000417 	ldw	r8,16(r19)
 8008d5c:	100d883a 	mov	r6,r2
 8008d60:	d8800017 	ldw	r2,0(sp)
 8008d64:	4251c83a 	sub	r8,r8,r9
 8008d68:	4012917a 	slli	r9,r8,5
 8008d6c:	da000117 	ldw	r8,4(sp)
 8008d70:	4091c83a 	sub	r8,r8,r2
 8008d74:	4251883a 	add	r8,r8,r9
 8008d78:	02000d0e 	bge	zero,r8,8008db0 <__ratio+0x98>
 8008d7c:	4010953a 	slli	r8,r8,20
 8008d80:	4421883a 	add	r16,r8,r16
 8008d84:	9009883a 	mov	r4,r18
 8008d88:	800b883a 	mov	r5,r16
 8008d8c:	180f883a 	mov	r7,r3
 8008d90:	800c8140 	call	800c814 <__divdf3>
 8008d94:	dfc00617 	ldw	ra,24(sp)
 8008d98:	dcc00517 	ldw	r19,20(sp)
 8008d9c:	dc800417 	ldw	r18,16(sp)
 8008da0:	dc400317 	ldw	r17,12(sp)
 8008da4:	dc000217 	ldw	r16,8(sp)
 8008da8:	dec00704 	addi	sp,sp,28
 8008dac:	f800283a 	ret
 8008db0:	4010953a 	slli	r8,r8,20
 8008db4:	1a07c83a 	sub	r3,r3,r8
 8008db8:	003ff206 	br	8008d84 <__alt_data_end+0xfc008d84>

08008dbc <_mprec_log10>:
 8008dbc:	defffe04 	addi	sp,sp,-8
 8008dc0:	dc000015 	stw	r16,0(sp)
 8008dc4:	dfc00115 	stw	ra,4(sp)
 8008dc8:	008005c4 	movi	r2,23
 8008dcc:	2021883a 	mov	r16,r4
 8008dd0:	11000d0e 	bge	r2,r4,8008e08 <_mprec_log10+0x4c>
 8008dd4:	0005883a 	mov	r2,zero
 8008dd8:	00cffc34 	movhi	r3,16368
 8008ddc:	843fffc4 	addi	r16,r16,-1
 8008de0:	1009883a 	mov	r4,r2
 8008de4:	180b883a 	mov	r5,r3
 8008de8:	000d883a 	mov	r6,zero
 8008dec:	01d00934 	movhi	r7,16420
 8008df0:	800d3d80 	call	800d3d8 <__muldf3>
 8008df4:	803ff91e 	bne	r16,zero,8008ddc <__alt_data_end+0xfc008ddc>
 8008df8:	dfc00117 	ldw	ra,4(sp)
 8008dfc:	dc000017 	ldw	r16,0(sp)
 8008e00:	dec00204 	addi	sp,sp,8
 8008e04:	f800283a 	ret
 8008e08:	202090fa 	slli	r16,r4,3
 8008e0c:	00820074 	movhi	r2,2049
 8008e10:	1087cb04 	addi	r2,r2,7980
 8008e14:	1421883a 	add	r16,r2,r16
 8008e18:	80800017 	ldw	r2,0(r16)
 8008e1c:	80c00117 	ldw	r3,4(r16)
 8008e20:	dfc00117 	ldw	ra,4(sp)
 8008e24:	dc000017 	ldw	r16,0(sp)
 8008e28:	dec00204 	addi	sp,sp,8
 8008e2c:	f800283a 	ret

08008e30 <__copybits>:
 8008e30:	297fffc4 	addi	r5,r5,-1
 8008e34:	280fd17a 	srai	r7,r5,5
 8008e38:	30c00417 	ldw	r3,16(r6)
 8008e3c:	30800504 	addi	r2,r6,20
 8008e40:	39c00044 	addi	r7,r7,1
 8008e44:	18c7883a 	add	r3,r3,r3
 8008e48:	39cf883a 	add	r7,r7,r7
 8008e4c:	18c7883a 	add	r3,r3,r3
 8008e50:	39cf883a 	add	r7,r7,r7
 8008e54:	10c7883a 	add	r3,r2,r3
 8008e58:	21cf883a 	add	r7,r4,r7
 8008e5c:	10c00d2e 	bgeu	r2,r3,8008e94 <__copybits+0x64>
 8008e60:	200b883a 	mov	r5,r4
 8008e64:	12000017 	ldw	r8,0(r2)
 8008e68:	29400104 	addi	r5,r5,4
 8008e6c:	10800104 	addi	r2,r2,4
 8008e70:	2a3fff15 	stw	r8,-4(r5)
 8008e74:	10fffb36 	bltu	r2,r3,8008e64 <__alt_data_end+0xfc008e64>
 8008e78:	1985c83a 	sub	r2,r3,r6
 8008e7c:	10bffac4 	addi	r2,r2,-21
 8008e80:	1004d0ba 	srli	r2,r2,2
 8008e84:	10800044 	addi	r2,r2,1
 8008e88:	1085883a 	add	r2,r2,r2
 8008e8c:	1085883a 	add	r2,r2,r2
 8008e90:	2089883a 	add	r4,r4,r2
 8008e94:	21c0032e 	bgeu	r4,r7,8008ea4 <__copybits+0x74>
 8008e98:	20000015 	stw	zero,0(r4)
 8008e9c:	21000104 	addi	r4,r4,4
 8008ea0:	21fffd36 	bltu	r4,r7,8008e98 <__alt_data_end+0xfc008e98>
 8008ea4:	f800283a 	ret

08008ea8 <__any_on>:
 8008ea8:	20c00417 	ldw	r3,16(r4)
 8008eac:	2805d17a 	srai	r2,r5,5
 8008eb0:	21000504 	addi	r4,r4,20
 8008eb4:	18800d0e 	bge	r3,r2,8008eec <__any_on+0x44>
 8008eb8:	18c7883a 	add	r3,r3,r3
 8008ebc:	18c7883a 	add	r3,r3,r3
 8008ec0:	20c7883a 	add	r3,r4,r3
 8008ec4:	20c0192e 	bgeu	r4,r3,8008f2c <__any_on+0x84>
 8008ec8:	18bfff17 	ldw	r2,-4(r3)
 8008ecc:	18ffff04 	addi	r3,r3,-4
 8008ed0:	1000041e 	bne	r2,zero,8008ee4 <__any_on+0x3c>
 8008ed4:	20c0142e 	bgeu	r4,r3,8008f28 <__any_on+0x80>
 8008ed8:	18ffff04 	addi	r3,r3,-4
 8008edc:	19400017 	ldw	r5,0(r3)
 8008ee0:	283ffc26 	beq	r5,zero,8008ed4 <__alt_data_end+0xfc008ed4>
 8008ee4:	00800044 	movi	r2,1
 8008ee8:	f800283a 	ret
 8008eec:	10c00a0e 	bge	r2,r3,8008f18 <__any_on+0x70>
 8008ef0:	1085883a 	add	r2,r2,r2
 8008ef4:	1085883a 	add	r2,r2,r2
 8008ef8:	294007cc 	andi	r5,r5,31
 8008efc:	2087883a 	add	r3,r4,r2
 8008f00:	283ff026 	beq	r5,zero,8008ec4 <__alt_data_end+0xfc008ec4>
 8008f04:	19800017 	ldw	r6,0(r3)
 8008f08:	3144d83a 	srl	r2,r6,r5
 8008f0c:	114a983a 	sll	r5,r2,r5
 8008f10:	29bff41e 	bne	r5,r6,8008ee4 <__alt_data_end+0xfc008ee4>
 8008f14:	003feb06 	br	8008ec4 <__alt_data_end+0xfc008ec4>
 8008f18:	1085883a 	add	r2,r2,r2
 8008f1c:	1085883a 	add	r2,r2,r2
 8008f20:	2087883a 	add	r3,r4,r2
 8008f24:	003fe706 	br	8008ec4 <__alt_data_end+0xfc008ec4>
 8008f28:	f800283a 	ret
 8008f2c:	0005883a 	mov	r2,zero
 8008f30:	f800283a 	ret

08008f34 <_read_r>:
 8008f34:	defffd04 	addi	sp,sp,-12
 8008f38:	dc000015 	stw	r16,0(sp)
 8008f3c:	04020074 	movhi	r16,2049
 8008f40:	dc400115 	stw	r17,4(sp)
 8008f44:	84162f04 	addi	r16,r16,22716
 8008f48:	2023883a 	mov	r17,r4
 8008f4c:	2809883a 	mov	r4,r5
 8008f50:	300b883a 	mov	r5,r6
 8008f54:	380d883a 	mov	r6,r7
 8008f58:	dfc00215 	stw	ra,8(sp)
 8008f5c:	80000015 	stw	zero,0(r16)
 8008f60:	800f0880 	call	800f088 <read>
 8008f64:	00ffffc4 	movi	r3,-1
 8008f68:	10c00526 	beq	r2,r3,8008f80 <_read_r+0x4c>
 8008f6c:	dfc00217 	ldw	ra,8(sp)
 8008f70:	dc400117 	ldw	r17,4(sp)
 8008f74:	dc000017 	ldw	r16,0(sp)
 8008f78:	dec00304 	addi	sp,sp,12
 8008f7c:	f800283a 	ret
 8008f80:	80c00017 	ldw	r3,0(r16)
 8008f84:	183ff926 	beq	r3,zero,8008f6c <__alt_data_end+0xfc008f6c>
 8008f88:	88c00015 	stw	r3,0(r17)
 8008f8c:	003ff706 	br	8008f6c <__alt_data_end+0xfc008f6c>

08008f90 <_realloc_r>:
 8008f90:	defff604 	addi	sp,sp,-40
 8008f94:	dcc00315 	stw	r19,12(sp)
 8008f98:	dc400115 	stw	r17,4(sp)
 8008f9c:	dfc00915 	stw	ra,36(sp)
 8008fa0:	df000815 	stw	fp,32(sp)
 8008fa4:	ddc00715 	stw	r23,28(sp)
 8008fa8:	dd800615 	stw	r22,24(sp)
 8008fac:	dd400515 	stw	r21,20(sp)
 8008fb0:	dd000415 	stw	r20,16(sp)
 8008fb4:	dc800215 	stw	r18,8(sp)
 8008fb8:	dc000015 	stw	r16,0(sp)
 8008fbc:	2827883a 	mov	r19,r5
 8008fc0:	3023883a 	mov	r17,r6
 8008fc4:	2800bf26 	beq	r5,zero,80092c4 <_realloc_r+0x334>
 8008fc8:	2025883a 	mov	r18,r4
 8008fcc:	800ed540 	call	800ed54 <__malloc_lock>
 8008fd0:	98ffff17 	ldw	r3,-4(r19)
 8008fd4:	01bfff04 	movi	r6,-4
 8008fd8:	890002c4 	addi	r4,r17,11
 8008fdc:	01c00584 	movi	r7,22
 8008fe0:	9d7ffe04 	addi	r21,r19,-8
 8008fe4:	19a0703a 	and	r16,r3,r6
 8008fe8:	39003f2e 	bgeu	r7,r4,80090e8 <_realloc_r+0x158>
 8008fec:	053ffe04 	movi	r20,-8
 8008ff0:	2528703a 	and	r20,r4,r20
 8008ff4:	a00f883a 	mov	r7,r20
 8008ff8:	a0008216 	blt	r20,zero,8009204 <_realloc_r+0x274>
 8008ffc:	a4408136 	bltu	r20,r17,8009204 <_realloc_r+0x274>
 8009000:	81c03c0e 	bge	r16,r7,80090f4 <_realloc_r+0x164>
 8009004:	07020074 	movhi	fp,2049
 8009008:	e7095e04 	addi	fp,fp,9592
 800900c:	e1000217 	ldw	r4,8(fp)
 8009010:	ac05883a 	add	r2,r21,r16
 8009014:	2080bf26 	beq	r4,r2,8009314 <_realloc_r+0x384>
 8009018:	11000117 	ldw	r4,4(r2)
 800901c:	023fff84 	movi	r8,-2
 8009020:	2210703a 	and	r8,r4,r8
 8009024:	1211883a 	add	r8,r2,r8
 8009028:	41400117 	ldw	r5,4(r8)
 800902c:	2940004c 	andi	r5,r5,1
 8009030:	28004a1e 	bne	r5,zero,800915c <_realloc_r+0x1cc>
 8009034:	017fff04 	movi	r5,-4
 8009038:	2148703a 	and	r4,r4,r5
 800903c:	2409883a 	add	r4,r4,r16
 8009040:	21c0ad0e 	bge	r4,r7,80092f8 <_realloc_r+0x368>
 8009044:	18c0004c 	andi	r3,r3,1
 8009048:	18007f1e 	bne	r3,zero,8009248 <_realloc_r+0x2b8>
 800904c:	9dfffe17 	ldw	r23,-8(r19)
 8009050:	adefc83a 	sub	r23,r21,r23
 8009054:	bd800117 	ldw	r22,4(r23)
 8009058:	b14a703a 	and	r5,r22,r5
 800905c:	216d883a 	add	r22,r4,r5
 8009060:	b1c04516 	blt	r22,r7,8009178 <_realloc_r+0x1e8>
 8009064:	10c00317 	ldw	r3,12(r2)
 8009068:	10800217 	ldw	r2,8(r2)
 800906c:	81bfff04 	addi	r6,r16,-4
 8009070:	bc400204 	addi	r17,r23,8
 8009074:	10c00315 	stw	r3,12(r2)
 8009078:	18800215 	stw	r2,8(r3)
 800907c:	b9400217 	ldw	r5,8(r23)
 8009080:	b8c00317 	ldw	r3,12(r23)
 8009084:	00800904 	movi	r2,36
 8009088:	28c00315 	stw	r3,12(r5)
 800908c:	19400215 	stw	r5,8(r3)
 8009090:	1180ef36 	bltu	r2,r6,8009450 <_realloc_r+0x4c0>
 8009094:	008004c4 	movi	r2,19
 8009098:	1180da2e 	bgeu	r2,r6,8009404 <_realloc_r+0x474>
 800909c:	98800017 	ldw	r2,0(r19)
 80090a0:	b8800215 	stw	r2,8(r23)
 80090a4:	98800117 	ldw	r2,4(r19)
 80090a8:	b8800315 	stw	r2,12(r23)
 80090ac:	008006c4 	movi	r2,27
 80090b0:	1180fc2e 	bgeu	r2,r6,80094a4 <_realloc_r+0x514>
 80090b4:	98800217 	ldw	r2,8(r19)
 80090b8:	b8800415 	stw	r2,16(r23)
 80090bc:	98800317 	ldw	r2,12(r19)
 80090c0:	b8800515 	stw	r2,20(r23)
 80090c4:	00800904 	movi	r2,36
 80090c8:	3080421e 	bne	r6,r2,80091d4 <_realloc_r+0x244>
 80090cc:	98800417 	ldw	r2,16(r19)
 80090d0:	9cc00604 	addi	r19,r19,24
 80090d4:	b8c00804 	addi	r3,r23,32
 80090d8:	b8800615 	stw	r2,24(r23)
 80090dc:	98bfff17 	ldw	r2,-4(r19)
 80090e0:	b8800715 	stw	r2,28(r23)
 80090e4:	00003d06 	br	80091dc <_realloc_r+0x24c>
 80090e8:	01c00404 	movi	r7,16
 80090ec:	3829883a 	mov	r20,r7
 80090f0:	003fc206 	br	8008ffc <__alt_data_end+0xfc008ffc>
 80090f4:	9823883a 	mov	r17,r19
 80090f8:	850fc83a 	sub	r7,r16,r20
 80090fc:	008003c4 	movi	r2,15
 8009100:	18c0004c 	andi	r3,r3,1
 8009104:	11c04336 	bltu	r2,r7,8009214 <_realloc_r+0x284>
 8009108:	1c06b03a 	or	r3,r3,r16
 800910c:	a8c00115 	stw	r3,4(r21)
 8009110:	ac21883a 	add	r16,r21,r16
 8009114:	80c00117 	ldw	r3,4(r16)
 8009118:	18c00054 	ori	r3,r3,1
 800911c:	80c00115 	stw	r3,4(r16)
 8009120:	9009883a 	mov	r4,r18
 8009124:	800ed740 	call	800ed74 <__malloc_unlock>
 8009128:	8805883a 	mov	r2,r17
 800912c:	dfc00917 	ldw	ra,36(sp)
 8009130:	df000817 	ldw	fp,32(sp)
 8009134:	ddc00717 	ldw	r23,28(sp)
 8009138:	dd800617 	ldw	r22,24(sp)
 800913c:	dd400517 	ldw	r21,20(sp)
 8009140:	dd000417 	ldw	r20,16(sp)
 8009144:	dcc00317 	ldw	r19,12(sp)
 8009148:	dc800217 	ldw	r18,8(sp)
 800914c:	dc400117 	ldw	r17,4(sp)
 8009150:	dc000017 	ldw	r16,0(sp)
 8009154:	dec00a04 	addi	sp,sp,40
 8009158:	f800283a 	ret
 800915c:	18c0004c 	andi	r3,r3,1
 8009160:	1800391e 	bne	r3,zero,8009248 <_realloc_r+0x2b8>
 8009164:	9dfffe17 	ldw	r23,-8(r19)
 8009168:	00bfff04 	movi	r2,-4
 800916c:	adefc83a 	sub	r23,r21,r23
 8009170:	b9400117 	ldw	r5,4(r23)
 8009174:	288a703a 	and	r5,r5,r2
 8009178:	2c2d883a 	add	r22,r5,r16
 800917c:	b1c03216 	blt	r22,r7,8009248 <_realloc_r+0x2b8>
 8009180:	b8800317 	ldw	r2,12(r23)
 8009184:	b8c00217 	ldw	r3,8(r23)
 8009188:	81bfff04 	addi	r6,r16,-4
 800918c:	01000904 	movi	r4,36
 8009190:	18800315 	stw	r2,12(r3)
 8009194:	10c00215 	stw	r3,8(r2)
 8009198:	bc400204 	addi	r17,r23,8
 800919c:	2180ac36 	bltu	r4,r6,8009450 <_realloc_r+0x4c0>
 80091a0:	008004c4 	movi	r2,19
 80091a4:	1180972e 	bgeu	r2,r6,8009404 <_realloc_r+0x474>
 80091a8:	98800017 	ldw	r2,0(r19)
 80091ac:	b8800215 	stw	r2,8(r23)
 80091b0:	98800117 	ldw	r2,4(r19)
 80091b4:	b8800315 	stw	r2,12(r23)
 80091b8:	008006c4 	movi	r2,27
 80091bc:	1180b92e 	bgeu	r2,r6,80094a4 <_realloc_r+0x514>
 80091c0:	98800217 	ldw	r2,8(r19)
 80091c4:	b8800415 	stw	r2,16(r23)
 80091c8:	98800317 	ldw	r2,12(r19)
 80091cc:	b8800515 	stw	r2,20(r23)
 80091d0:	313fbe26 	beq	r6,r4,80090cc <__alt_data_end+0xfc0090cc>
 80091d4:	b8c00604 	addi	r3,r23,24
 80091d8:	9cc00404 	addi	r19,r19,16
 80091dc:	98800017 	ldw	r2,0(r19)
 80091e0:	b021883a 	mov	r16,r22
 80091e4:	b82b883a 	mov	r21,r23
 80091e8:	18800015 	stw	r2,0(r3)
 80091ec:	98800117 	ldw	r2,4(r19)
 80091f0:	18800115 	stw	r2,4(r3)
 80091f4:	98800217 	ldw	r2,8(r19)
 80091f8:	18800215 	stw	r2,8(r3)
 80091fc:	b8c00117 	ldw	r3,4(r23)
 8009200:	003fbd06 	br	80090f8 <__alt_data_end+0xfc0090f8>
 8009204:	00800304 	movi	r2,12
 8009208:	90800015 	stw	r2,0(r18)
 800920c:	0005883a 	mov	r2,zero
 8009210:	003fc606 	br	800912c <__alt_data_end+0xfc00912c>
 8009214:	1d06b03a 	or	r3,r3,r20
 8009218:	ad0b883a 	add	r5,r21,r20
 800921c:	a8c00115 	stw	r3,4(r21)
 8009220:	38800054 	ori	r2,r7,1
 8009224:	28800115 	stw	r2,4(r5)
 8009228:	29cf883a 	add	r7,r5,r7
 800922c:	38800117 	ldw	r2,4(r7)
 8009230:	9009883a 	mov	r4,r18
 8009234:	29400204 	addi	r5,r5,8
 8009238:	10800054 	ori	r2,r2,1
 800923c:	38800115 	stw	r2,4(r7)
 8009240:	800192c0 	call	800192c <_free_r>
 8009244:	003fb606 	br	8009120 <__alt_data_end+0xfc009120>
 8009248:	880b883a 	mov	r5,r17
 800924c:	9009883a 	mov	r4,r18
 8009250:	80026380 	call	8002638 <_malloc_r>
 8009254:	1023883a 	mov	r17,r2
 8009258:	1000aa26 	beq	r2,zero,8009504 <_realloc_r+0x574>
 800925c:	98ffff17 	ldw	r3,-4(r19)
 8009260:	113ffe04 	addi	r4,r2,-8
 8009264:	00bfff84 	movi	r2,-2
 8009268:	1884703a 	and	r2,r3,r2
 800926c:	a885883a 	add	r2,r21,r2
 8009270:	20808626 	beq	r4,r2,800948c <_realloc_r+0x4fc>
 8009274:	81bfff04 	addi	r6,r16,-4
 8009278:	00800904 	movi	r2,36
 800927c:	11807036 	bltu	r2,r6,8009440 <_realloc_r+0x4b0>
 8009280:	00c004c4 	movi	r3,19
 8009284:	19805636 	bltu	r3,r6,80093e0 <_realloc_r+0x450>
 8009288:	8805883a 	mov	r2,r17
 800928c:	9807883a 	mov	r3,r19
 8009290:	19000017 	ldw	r4,0(r3)
 8009294:	11000015 	stw	r4,0(r2)
 8009298:	19000117 	ldw	r4,4(r3)
 800929c:	11000115 	stw	r4,4(r2)
 80092a0:	18c00217 	ldw	r3,8(r3)
 80092a4:	10c00215 	stw	r3,8(r2)
 80092a8:	980b883a 	mov	r5,r19
 80092ac:	9009883a 	mov	r4,r18
 80092b0:	800192c0 	call	800192c <_free_r>
 80092b4:	9009883a 	mov	r4,r18
 80092b8:	800ed740 	call	800ed74 <__malloc_unlock>
 80092bc:	8805883a 	mov	r2,r17
 80092c0:	003f9a06 	br	800912c <__alt_data_end+0xfc00912c>
 80092c4:	300b883a 	mov	r5,r6
 80092c8:	dfc00917 	ldw	ra,36(sp)
 80092cc:	df000817 	ldw	fp,32(sp)
 80092d0:	ddc00717 	ldw	r23,28(sp)
 80092d4:	dd800617 	ldw	r22,24(sp)
 80092d8:	dd400517 	ldw	r21,20(sp)
 80092dc:	dd000417 	ldw	r20,16(sp)
 80092e0:	dcc00317 	ldw	r19,12(sp)
 80092e4:	dc800217 	ldw	r18,8(sp)
 80092e8:	dc400117 	ldw	r17,4(sp)
 80092ec:	dc000017 	ldw	r16,0(sp)
 80092f0:	dec00a04 	addi	sp,sp,40
 80092f4:	80026381 	jmpi	8002638 <_malloc_r>
 80092f8:	11400317 	ldw	r5,12(r2)
 80092fc:	10800217 	ldw	r2,8(r2)
 8009300:	9823883a 	mov	r17,r19
 8009304:	2021883a 	mov	r16,r4
 8009308:	11400315 	stw	r5,12(r2)
 800930c:	28800215 	stw	r2,8(r5)
 8009310:	003f7906 	br	80090f8 <__alt_data_end+0xfc0090f8>
 8009314:	21000117 	ldw	r4,4(r4)
 8009318:	00bfff04 	movi	r2,-4
 800931c:	a1800404 	addi	r6,r20,16
 8009320:	2088703a 	and	r4,r4,r2
 8009324:	2409883a 	add	r4,r4,r16
 8009328:	2180380e 	bge	r4,r6,800940c <_realloc_r+0x47c>
 800932c:	18c0004c 	andi	r3,r3,1
 8009330:	183fc51e 	bne	r3,zero,8009248 <__alt_data_end+0xfc009248>
 8009334:	9dfffe17 	ldw	r23,-8(r19)
 8009338:	adefc83a 	sub	r23,r21,r23
 800933c:	b9400117 	ldw	r5,4(r23)
 8009340:	288a703a 	and	r5,r5,r2
 8009344:	216d883a 	add	r22,r4,r5
 8009348:	b1bf8b16 	blt	r22,r6,8009178 <__alt_data_end+0xfc009178>
 800934c:	b8800317 	ldw	r2,12(r23)
 8009350:	b8c00217 	ldw	r3,8(r23)
 8009354:	81bfff04 	addi	r6,r16,-4
 8009358:	01000904 	movi	r4,36
 800935c:	18800315 	stw	r2,12(r3)
 8009360:	10c00215 	stw	r3,8(r2)
 8009364:	bc400204 	addi	r17,r23,8
 8009368:	21805a36 	bltu	r4,r6,80094d4 <_realloc_r+0x544>
 800936c:	008004c4 	movi	r2,19
 8009370:	1180562e 	bgeu	r2,r6,80094cc <_realloc_r+0x53c>
 8009374:	98800017 	ldw	r2,0(r19)
 8009378:	b8800215 	stw	r2,8(r23)
 800937c:	98800117 	ldw	r2,4(r19)
 8009380:	b8800315 	stw	r2,12(r23)
 8009384:	008006c4 	movi	r2,27
 8009388:	11805636 	bltu	r2,r6,80094e4 <_realloc_r+0x554>
 800938c:	b8800404 	addi	r2,r23,16
 8009390:	9cc00204 	addi	r19,r19,8
 8009394:	98c00017 	ldw	r3,0(r19)
 8009398:	10c00015 	stw	r3,0(r2)
 800939c:	98c00117 	ldw	r3,4(r19)
 80093a0:	10c00115 	stw	r3,4(r2)
 80093a4:	98c00217 	ldw	r3,8(r19)
 80093a8:	10c00215 	stw	r3,8(r2)
 80093ac:	bd07883a 	add	r3,r23,r20
 80093b0:	b505c83a 	sub	r2,r22,r20
 80093b4:	e0c00215 	stw	r3,8(fp)
 80093b8:	10800054 	ori	r2,r2,1
 80093bc:	18800115 	stw	r2,4(r3)
 80093c0:	b8800117 	ldw	r2,4(r23)
 80093c4:	9009883a 	mov	r4,r18
 80093c8:	1080004c 	andi	r2,r2,1
 80093cc:	a0a8b03a 	or	r20,r20,r2
 80093d0:	bd000115 	stw	r20,4(r23)
 80093d4:	800ed740 	call	800ed74 <__malloc_unlock>
 80093d8:	8805883a 	mov	r2,r17
 80093dc:	003f5306 	br	800912c <__alt_data_end+0xfc00912c>
 80093e0:	98c00017 	ldw	r3,0(r19)
 80093e4:	88c00015 	stw	r3,0(r17)
 80093e8:	98c00117 	ldw	r3,4(r19)
 80093ec:	88c00115 	stw	r3,4(r17)
 80093f0:	00c006c4 	movi	r3,27
 80093f4:	19801d36 	bltu	r3,r6,800946c <_realloc_r+0x4dc>
 80093f8:	88800204 	addi	r2,r17,8
 80093fc:	98c00204 	addi	r3,r19,8
 8009400:	003fa306 	br	8009290 <__alt_data_end+0xfc009290>
 8009404:	8807883a 	mov	r3,r17
 8009408:	003f7406 	br	80091dc <__alt_data_end+0xfc0091dc>
 800940c:	ad2b883a 	add	r21,r21,r20
 8009410:	2505c83a 	sub	r2,r4,r20
 8009414:	e5400215 	stw	r21,8(fp)
 8009418:	10800054 	ori	r2,r2,1
 800941c:	a8800115 	stw	r2,4(r21)
 8009420:	98bfff17 	ldw	r2,-4(r19)
 8009424:	9009883a 	mov	r4,r18
 8009428:	1080004c 	andi	r2,r2,1
 800942c:	a0a8b03a 	or	r20,r20,r2
 8009430:	9d3fff15 	stw	r20,-4(r19)
 8009434:	800ed740 	call	800ed74 <__malloc_unlock>
 8009438:	9805883a 	mov	r2,r19
 800943c:	003f3b06 	br	800912c <__alt_data_end+0xfc00912c>
 8009440:	8809883a 	mov	r4,r17
 8009444:	980b883a 	mov	r5,r19
 8009448:	8007d900 	call	8007d90 <memmove>
 800944c:	003f9606 	br	80092a8 <__alt_data_end+0xfc0092a8>
 8009450:	8809883a 	mov	r4,r17
 8009454:	980b883a 	mov	r5,r19
 8009458:	8007d900 	call	8007d90 <memmove>
 800945c:	b8c00117 	ldw	r3,4(r23)
 8009460:	b021883a 	mov	r16,r22
 8009464:	b82b883a 	mov	r21,r23
 8009468:	003f2306 	br	80090f8 <__alt_data_end+0xfc0090f8>
 800946c:	98c00217 	ldw	r3,8(r19)
 8009470:	88c00215 	stw	r3,8(r17)
 8009474:	98c00317 	ldw	r3,12(r19)
 8009478:	88c00315 	stw	r3,12(r17)
 800947c:	30800c26 	beq	r6,r2,80094b0 <_realloc_r+0x520>
 8009480:	88800404 	addi	r2,r17,16
 8009484:	98c00404 	addi	r3,r19,16
 8009488:	003f8106 	br	8009290 <__alt_data_end+0xfc009290>
 800948c:	893fff17 	ldw	r4,-4(r17)
 8009490:	00bfff04 	movi	r2,-4
 8009494:	9823883a 	mov	r17,r19
 8009498:	2084703a 	and	r2,r4,r2
 800949c:	80a1883a 	add	r16,r16,r2
 80094a0:	003f1506 	br	80090f8 <__alt_data_end+0xfc0090f8>
 80094a4:	b8c00404 	addi	r3,r23,16
 80094a8:	9cc00204 	addi	r19,r19,8
 80094ac:	003f4b06 	br	80091dc <__alt_data_end+0xfc0091dc>
 80094b0:	99000417 	ldw	r4,16(r19)
 80094b4:	88800604 	addi	r2,r17,24
 80094b8:	98c00604 	addi	r3,r19,24
 80094bc:	89000415 	stw	r4,16(r17)
 80094c0:	99000517 	ldw	r4,20(r19)
 80094c4:	89000515 	stw	r4,20(r17)
 80094c8:	003f7106 	br	8009290 <__alt_data_end+0xfc009290>
 80094cc:	8805883a 	mov	r2,r17
 80094d0:	003fb006 	br	8009394 <__alt_data_end+0xfc009394>
 80094d4:	8809883a 	mov	r4,r17
 80094d8:	980b883a 	mov	r5,r19
 80094dc:	8007d900 	call	8007d90 <memmove>
 80094e0:	003fb206 	br	80093ac <__alt_data_end+0xfc0093ac>
 80094e4:	98800217 	ldw	r2,8(r19)
 80094e8:	b8800415 	stw	r2,16(r23)
 80094ec:	98800317 	ldw	r2,12(r19)
 80094f0:	b8800515 	stw	r2,20(r23)
 80094f4:	31000726 	beq	r6,r4,8009514 <_realloc_r+0x584>
 80094f8:	b8800604 	addi	r2,r23,24
 80094fc:	9cc00404 	addi	r19,r19,16
 8009500:	003fa406 	br	8009394 <__alt_data_end+0xfc009394>
 8009504:	9009883a 	mov	r4,r18
 8009508:	800ed740 	call	800ed74 <__malloc_unlock>
 800950c:	0005883a 	mov	r2,zero
 8009510:	003f0606 	br	800912c <__alt_data_end+0xfc00912c>
 8009514:	98c00417 	ldw	r3,16(r19)
 8009518:	9cc00604 	addi	r19,r19,24
 800951c:	b8800804 	addi	r2,r23,32
 8009520:	b8c00615 	stw	r3,24(r23)
 8009524:	98ffff17 	ldw	r3,-4(r19)
 8009528:	b8c00715 	stw	r3,28(r23)
 800952c:	003f9906 	br	8009394 <__alt_data_end+0xfc009394>

08009530 <__fpclassifyd>:
 8009530:	00a00034 	movhi	r2,32768
 8009534:	10bfffc4 	addi	r2,r2,-1
 8009538:	2884703a 	and	r2,r5,r2
 800953c:	10000726 	beq	r2,zero,800955c <__fpclassifyd+0x2c>
 8009540:	00fffc34 	movhi	r3,65520
 8009544:	019ff834 	movhi	r6,32736
 8009548:	28c7883a 	add	r3,r5,r3
 800954c:	31bfffc4 	addi	r6,r6,-1
 8009550:	30c00536 	bltu	r6,r3,8009568 <__fpclassifyd+0x38>
 8009554:	00800104 	movi	r2,4
 8009558:	f800283a 	ret
 800955c:	2000021e 	bne	r4,zero,8009568 <__fpclassifyd+0x38>
 8009560:	00800084 	movi	r2,2
 8009564:	f800283a 	ret
 8009568:	00dffc34 	movhi	r3,32752
 800956c:	019ff834 	movhi	r6,32736
 8009570:	28cb883a 	add	r5,r5,r3
 8009574:	31bfffc4 	addi	r6,r6,-1
 8009578:	317ff62e 	bgeu	r6,r5,8009554 <__alt_data_end+0xfc009554>
 800957c:	01400434 	movhi	r5,16
 8009580:	297fffc4 	addi	r5,r5,-1
 8009584:	28800236 	bltu	r5,r2,8009590 <__fpclassifyd+0x60>
 8009588:	008000c4 	movi	r2,3
 800958c:	f800283a 	ret
 8009590:	10c00226 	beq	r2,r3,800959c <__fpclassifyd+0x6c>
 8009594:	0005883a 	mov	r2,zero
 8009598:	f800283a 	ret
 800959c:	2005003a 	cmpeq	r2,r4,zero
 80095a0:	f800283a 	ret

080095a4 <strcmp>:
 80095a4:	2144b03a 	or	r2,r4,r5
 80095a8:	108000cc 	andi	r2,r2,3
 80095ac:	1000171e 	bne	r2,zero,800960c <strcmp+0x68>
 80095b0:	20800017 	ldw	r2,0(r4)
 80095b4:	28c00017 	ldw	r3,0(r5)
 80095b8:	10c0141e 	bne	r2,r3,800960c <strcmp+0x68>
 80095bc:	027fbff4 	movhi	r9,65279
 80095c0:	4a7fbfc4 	addi	r9,r9,-257
 80095c4:	0086303a 	nor	r3,zero,r2
 80095c8:	02202074 	movhi	r8,32897
 80095cc:	1245883a 	add	r2,r2,r9
 80095d0:	42202004 	addi	r8,r8,-32640
 80095d4:	10c4703a 	and	r2,r2,r3
 80095d8:	1204703a 	and	r2,r2,r8
 80095dc:	10000226 	beq	r2,zero,80095e8 <strcmp+0x44>
 80095e0:	00001706 	br	8009640 <strcmp+0x9c>
 80095e4:	1000161e 	bne	r2,zero,8009640 <strcmp+0x9c>
 80095e8:	21000104 	addi	r4,r4,4
 80095ec:	20c00017 	ldw	r3,0(r4)
 80095f0:	29400104 	addi	r5,r5,4
 80095f4:	29800017 	ldw	r6,0(r5)
 80095f8:	1a4f883a 	add	r7,r3,r9
 80095fc:	00c4303a 	nor	r2,zero,r3
 8009600:	3884703a 	and	r2,r7,r2
 8009604:	1204703a 	and	r2,r2,r8
 8009608:	19bff626 	beq	r3,r6,80095e4 <__alt_data_end+0xfc0095e4>
 800960c:	20800007 	ldb	r2,0(r4)
 8009610:	1000051e 	bne	r2,zero,8009628 <strcmp+0x84>
 8009614:	00000606 	br	8009630 <strcmp+0x8c>
 8009618:	21000044 	addi	r4,r4,1
 800961c:	20800007 	ldb	r2,0(r4)
 8009620:	29400044 	addi	r5,r5,1
 8009624:	10000226 	beq	r2,zero,8009630 <strcmp+0x8c>
 8009628:	28c00007 	ldb	r3,0(r5)
 800962c:	10fffa26 	beq	r2,r3,8009618 <__alt_data_end+0xfc009618>
 8009630:	20800003 	ldbu	r2,0(r4)
 8009634:	28c00003 	ldbu	r3,0(r5)
 8009638:	10c5c83a 	sub	r2,r2,r3
 800963c:	f800283a 	ret
 8009640:	0005883a 	mov	r2,zero
 8009644:	f800283a 	ret

08009648 <__sprint_r.part.0>:
 8009648:	28801917 	ldw	r2,100(r5)
 800964c:	defff604 	addi	sp,sp,-40
 8009650:	dd400515 	stw	r21,20(sp)
 8009654:	dcc00315 	stw	r19,12(sp)
 8009658:	dfc00915 	stw	ra,36(sp)
 800965c:	df000815 	stw	fp,32(sp)
 8009660:	ddc00715 	stw	r23,28(sp)
 8009664:	dd800615 	stw	r22,24(sp)
 8009668:	dd000415 	stw	r20,16(sp)
 800966c:	dc800215 	stw	r18,8(sp)
 8009670:	dc400115 	stw	r17,4(sp)
 8009674:	dc000015 	stw	r16,0(sp)
 8009678:	1088000c 	andi	r2,r2,8192
 800967c:	2827883a 	mov	r19,r5
 8009680:	302b883a 	mov	r21,r6
 8009684:	10002d26 	beq	r2,zero,800973c <__sprint_r.part.0+0xf4>
 8009688:	30800217 	ldw	r2,8(r6)
 800968c:	35800017 	ldw	r22,0(r6)
 8009690:	10002826 	beq	r2,zero,8009734 <__sprint_r.part.0+0xec>
 8009694:	2029883a 	mov	r20,r4
 8009698:	b5c00104 	addi	r23,r22,4
 800969c:	04bfffc4 	movi	r18,-1
 80096a0:	bc400017 	ldw	r17,0(r23)
 80096a4:	b4000017 	ldw	r16,0(r22)
 80096a8:	0039883a 	mov	fp,zero
 80096ac:	8822d0ba 	srli	r17,r17,2
 80096b0:	04400316 	blt	zero,r17,80096c0 <__sprint_r.part.0+0x78>
 80096b4:	00001706 	br	8009714 <__sprint_r.part.0+0xcc>
 80096b8:	84000104 	addi	r16,r16,4
 80096bc:	8f001526 	beq	r17,fp,8009714 <__sprint_r.part.0+0xcc>
 80096c0:	81400017 	ldw	r5,0(r16)
 80096c4:	a009883a 	mov	r4,r20
 80096c8:	980d883a 	mov	r6,r19
 80096cc:	800ac7c0 	call	800ac7c <_fputwc_r>
 80096d0:	e7000044 	addi	fp,fp,1
 80096d4:	14bff81e 	bne	r2,r18,80096b8 <__alt_data_end+0xfc0096b8>
 80096d8:	9005883a 	mov	r2,r18
 80096dc:	a8000215 	stw	zero,8(r21)
 80096e0:	a8000115 	stw	zero,4(r21)
 80096e4:	dfc00917 	ldw	ra,36(sp)
 80096e8:	df000817 	ldw	fp,32(sp)
 80096ec:	ddc00717 	ldw	r23,28(sp)
 80096f0:	dd800617 	ldw	r22,24(sp)
 80096f4:	dd400517 	ldw	r21,20(sp)
 80096f8:	dd000417 	ldw	r20,16(sp)
 80096fc:	dcc00317 	ldw	r19,12(sp)
 8009700:	dc800217 	ldw	r18,8(sp)
 8009704:	dc400117 	ldw	r17,4(sp)
 8009708:	dc000017 	ldw	r16,0(sp)
 800970c:	dec00a04 	addi	sp,sp,40
 8009710:	f800283a 	ret
 8009714:	a8c00217 	ldw	r3,8(r21)
 8009718:	8c63883a 	add	r17,r17,r17
 800971c:	8c63883a 	add	r17,r17,r17
 8009720:	1c45c83a 	sub	r2,r3,r17
 8009724:	a8800215 	stw	r2,8(r21)
 8009728:	b5800204 	addi	r22,r22,8
 800972c:	bdc00204 	addi	r23,r23,8
 8009730:	103fdb1e 	bne	r2,zero,80096a0 <__alt_data_end+0xfc0096a0>
 8009734:	0005883a 	mov	r2,zero
 8009738:	003fe806 	br	80096dc <__alt_data_end+0xfc0096dc>
 800973c:	800753c0 	call	800753c <__sfvwrite_r>
 8009740:	003fe606 	br	80096dc <__alt_data_end+0xfc0096dc>

08009744 <__sprint_r>:
 8009744:	30c00217 	ldw	r3,8(r6)
 8009748:	18000126 	beq	r3,zero,8009750 <__sprint_r+0xc>
 800974c:	80096481 	jmpi	8009648 <__sprint_r.part.0>
 8009750:	30000115 	stw	zero,4(r6)
 8009754:	0005883a 	mov	r2,zero
 8009758:	f800283a 	ret

0800975c <___vfiprintf_internal_r>:
 800975c:	defeca04 	addi	sp,sp,-1240
 8009760:	dcc12f15 	stw	r19,1212(sp)
 8009764:	dfc13515 	stw	ra,1236(sp)
 8009768:	df013415 	stw	fp,1232(sp)
 800976c:	ddc13315 	stw	r23,1228(sp)
 8009770:	dd813215 	stw	r22,1224(sp)
 8009774:	dd413115 	stw	r21,1220(sp)
 8009778:	dd013015 	stw	r20,1216(sp)
 800977c:	dc812e15 	stw	r18,1208(sp)
 8009780:	dc412d15 	stw	r17,1204(sp)
 8009784:	dc012c15 	stw	r16,1200(sp)
 8009788:	d9012115 	stw	r4,1156(sp)
 800978c:	d9412015 	stw	r5,1152(sp)
 8009790:	d9c12315 	stw	r7,1164(sp)
 8009794:	3027883a 	mov	r19,r6
 8009798:	20000226 	beq	r4,zero,80097a4 <___vfiprintf_internal_r+0x48>
 800979c:	20800e17 	ldw	r2,56(r4)
 80097a0:	1000f726 	beq	r2,zero,8009b80 <___vfiprintf_internal_r+0x424>
 80097a4:	d8812017 	ldw	r2,1152(sp)
 80097a8:	10c0030b 	ldhu	r3,12(r2)
 80097ac:	1908000c 	andi	r4,r3,8192
 80097b0:	1805883a 	mov	r2,r3
 80097b4:	2000081e 	bne	r4,zero,80097d8 <___vfiprintf_internal_r+0x7c>
 80097b8:	d9412017 	ldw	r5,1152(sp)
 80097bc:	18880014 	ori	r2,r3,8192
 80097c0:	00f7ffc4 	movi	r3,-8193
 80097c4:	29001917 	ldw	r4,100(r5)
 80097c8:	2880030d 	sth	r2,12(r5)
 80097cc:	20c8703a 	and	r4,r4,r3
 80097d0:	29001915 	stw	r4,100(r5)
 80097d4:	1007883a 	mov	r3,r2
 80097d8:	1100020c 	andi	r4,r2,8
 80097dc:	2000a726 	beq	r4,zero,8009a7c <___vfiprintf_internal_r+0x320>
 80097e0:	d9412017 	ldw	r5,1152(sp)
 80097e4:	29000417 	ldw	r4,16(r5)
 80097e8:	2000a426 	beq	r4,zero,8009a7c <___vfiprintf_internal_r+0x320>
 80097ec:	1080068c 	andi	r2,r2,26
 80097f0:	01000284 	movi	r4,10
 80097f4:	1100ab26 	beq	r2,r4,8009aa4 <___vfiprintf_internal_r+0x348>
 80097f8:	d9010a04 	addi	r4,sp,1064
 80097fc:	d94109c4 	addi	r5,sp,1063
 8009800:	07020074 	movhi	fp,2049
 8009804:	04420074 	movhi	r17,2049
 8009808:	2145c83a 	sub	r2,r4,r5
 800980c:	e7080104 	addi	fp,fp,8196
 8009810:	8c47fd04 	addi	r17,r17,8180
 8009814:	d9011e15 	stw	r4,1144(sp)
 8009818:	d9411f15 	stw	r5,1148(sp)
 800981c:	dec11a15 	stw	sp,1128(sp)
 8009820:	d8011c15 	stw	zero,1136(sp)
 8009824:	d8011b15 	stw	zero,1132(sp)
 8009828:	d8012715 	stw	zero,1180(sp)
 800982c:	d8012515 	stw	zero,1172(sp)
 8009830:	d811883a 	mov	r8,sp
 8009834:	d8812815 	stw	r2,1184(sp)
 8009838:	982f883a 	mov	r23,r19
 800983c:	b8800007 	ldb	r2,0(r23)
 8009840:	1003b026 	beq	r2,zero,800a704 <___vfiprintf_internal_r+0xfa8>
 8009844:	01000944 	movi	r4,37
 8009848:	1103ae26 	beq	r2,r4,800a704 <___vfiprintf_internal_r+0xfa8>
 800984c:	b805883a 	mov	r2,r23
 8009850:	00000106 	br	8009858 <___vfiprintf_internal_r+0xfc>
 8009854:	19000326 	beq	r3,r4,8009864 <___vfiprintf_internal_r+0x108>
 8009858:	10800044 	addi	r2,r2,1
 800985c:	10c00007 	ldb	r3,0(r2)
 8009860:	183ffc1e 	bne	r3,zero,8009854 <__alt_data_end+0xfc009854>
 8009864:	15e1c83a 	sub	r16,r2,r23
 8009868:	1029883a 	mov	r20,r2
 800986c:	80001026 	beq	r16,zero,80098b0 <___vfiprintf_internal_r+0x154>
 8009870:	d8c11c17 	ldw	r3,1136(sp)
 8009874:	d8811b17 	ldw	r2,1132(sp)
 8009878:	45c00015 	stw	r23,0(r8)
 800987c:	80c7883a 	add	r3,r16,r3
 8009880:	10800044 	addi	r2,r2,1
 8009884:	44000115 	stw	r16,4(r8)
 8009888:	d8c11c15 	stw	r3,1136(sp)
 800988c:	d8811b15 	stw	r2,1132(sp)
 8009890:	010001c4 	movi	r4,7
 8009894:	2080740e 	bge	r4,r2,8009a68 <___vfiprintf_internal_r+0x30c>
 8009898:	1803a71e 	bne	r3,zero,800a738 <___vfiprintf_internal_r+0xfdc>
 800989c:	d8c12517 	ldw	r3,1172(sp)
 80098a0:	d8011b15 	stw	zero,1132(sp)
 80098a4:	d811883a 	mov	r8,sp
 80098a8:	1c07883a 	add	r3,r3,r16
 80098ac:	d8c12515 	stw	r3,1172(sp)
 80098b0:	a0800007 	ldb	r2,0(r20)
 80098b4:	1002bf26 	beq	r2,zero,800a3b4 <___vfiprintf_internal_r+0xc58>
 80098b8:	a5c00044 	addi	r23,r20,1
 80098bc:	a1800047 	ldb	r6,1(r20)
 80098c0:	d8011d85 	stb	zero,1142(sp)
 80098c4:	d8012205 	stb	zero,1160(sp)
 80098c8:	043fffc4 	movi	r16,-1
 80098cc:	d8012415 	stw	zero,1168(sp)
 80098d0:	0025883a 	mov	r18,zero
 80098d4:	05001604 	movi	r20,88
 80098d8:	05400244 	movi	r21,9
 80098dc:	4027883a 	mov	r19,r8
 80098e0:	bdc00044 	addi	r23,r23,1
 80098e4:	30bff804 	addi	r2,r6,-32
 80098e8:	a0825636 	bltu	r20,r2,800a244 <___vfiprintf_internal_r+0xae8>
 80098ec:	100490ba 	slli	r2,r2,2
 80098f0:	01020074 	movhi	r4,2049
 80098f4:	21264104 	addi	r4,r4,-26364
 80098f8:	1105883a 	add	r2,r2,r4
 80098fc:	10800017 	ldw	r2,0(r2)
 8009900:	1000683a 	jmp	r2
 8009904:	0800a1d4 	ori	zero,at,647
 8009908:	0800a244 	addi	zero,at,649
 800990c:	0800a244 	addi	zero,at,649
 8009910:	0800a238 	rdprs	zero,at,648
 8009914:	0800a244 	addi	zero,at,649
 8009918:	0800a244 	addi	zero,at,649
 800991c:	0800a244 	addi	zero,at,649
 8009920:	0800a244 	addi	zero,at,649
 8009924:	0800a244 	addi	zero,at,649
 8009928:	0800a244 	addi	zero,at,649
 800992c:	08009fc4 	addi	zero,at,639
 8009930:	0800a1ec 	andhi	zero,at,647
 8009934:	0800a244 	addi	zero,at,649
 8009938:	08009b98 	cmpnei	zero,at,622
 800993c:	08009fe8 	cmpgeui	zero,at,639
 8009940:	0800a244 	addi	zero,at,649
 8009944:	08009ba4 	muli	zero,at,622
 8009948:	08009bb0 	cmpltui	zero,at,622
 800994c:	08009bb0 	cmpltui	zero,at,622
 8009950:	08009bb0 	cmpltui	zero,at,622
 8009954:	08009bb0 	cmpltui	zero,at,622
 8009958:	08009bb0 	cmpltui	zero,at,622
 800995c:	08009bb0 	cmpltui	zero,at,622
 8009960:	08009bb0 	cmpltui	zero,at,622
 8009964:	08009bb0 	cmpltui	zero,at,622
 8009968:	08009bb0 	cmpltui	zero,at,622
 800996c:	0800a244 	addi	zero,at,649
 8009970:	0800a244 	addi	zero,at,649
 8009974:	0800a244 	addi	zero,at,649
 8009978:	0800a244 	addi	zero,at,649
 800997c:	0800a244 	addi	zero,at,649
 8009980:	0800a244 	addi	zero,at,649
 8009984:	0800a244 	addi	zero,at,649
 8009988:	0800a244 	addi	zero,at,649
 800998c:	0800a244 	addi	zero,at,649
 8009990:	0800a244 	addi	zero,at,649
 8009994:	08009bf0 	cmpltui	zero,at,623
 8009998:	0800a244 	addi	zero,at,649
 800999c:	0800a244 	addi	zero,at,649
 80099a0:	0800a244 	addi	zero,at,649
 80099a4:	0800a244 	addi	zero,at,649
 80099a8:	0800a244 	addi	zero,at,649
 80099ac:	0800a244 	addi	zero,at,649
 80099b0:	0800a244 	addi	zero,at,649
 80099b4:	0800a244 	addi	zero,at,649
 80099b8:	0800a244 	addi	zero,at,649
 80099bc:	0800a244 	addi	zero,at,649
 80099c0:	08009ee0 	cmpeqi	zero,at,635
 80099c4:	0800a244 	addi	zero,at,649
 80099c8:	0800a244 	addi	zero,at,649
 80099cc:	0800a244 	addi	zero,at,649
 80099d0:	0800a244 	addi	zero,at,649
 80099d4:	0800a244 	addi	zero,at,649
 80099d8:	08009f20 	cmpeqi	zero,at,636
 80099dc:	0800a244 	addi	zero,at,649
 80099e0:	0800a244 	addi	zero,at,649
 80099e4:	08009f64 	muli	zero,at,637
 80099e8:	0800a244 	addi	zero,at,649
 80099ec:	0800a244 	addi	zero,at,649
 80099f0:	0800a244 	addi	zero,at,649
 80099f4:	0800a244 	addi	zero,at,649
 80099f8:	0800a244 	addi	zero,at,649
 80099fc:	0800a244 	addi	zero,at,649
 8009a00:	0800a244 	addi	zero,at,649
 8009a04:	0800a244 	addi	zero,at,649
 8009a08:	0800a244 	addi	zero,at,649
 8009a0c:	0800a244 	addi	zero,at,649
 8009a10:	08009eac 	andhi	zero,at,634
 8009a14:	0800a1fc 	xorhi	zero,at,647
 8009a18:	0800a244 	addi	zero,at,649
 8009a1c:	0800a244 	addi	zero,at,649
 8009a20:	0800a244 	addi	zero,at,649
 8009a24:	0800a038 	rdprs	zero,at,640
 8009a28:	0800a1fc 	xorhi	zero,at,647
 8009a2c:	0800a244 	addi	zero,at,649
 8009a30:	0800a244 	addi	zero,at,649
 8009a34:	08009f50 	cmplti	zero,at,637
 8009a38:	0800a244 	addi	zero,at,649
 8009a3c:	0800a19c 	xori	zero,at,646
 8009a40:	0800a124 	muli	zero,at,644
 8009a44:	0800a158 	cmpnei	zero,at,645
 8009a48:	0800a044 	addi	zero,at,641
 8009a4c:	0800a244 	addi	zero,at,649
 8009a50:	0800a050 	cmplti	zero,at,641
 8009a54:	0800a244 	addi	zero,at,649
 8009a58:	0800a0ac 	andhi	zero,at,642
 8009a5c:	0800a244 	addi	zero,at,649
 8009a60:	0800a244 	addi	zero,at,649
 8009a64:	0800a0e0 	cmpeqi	zero,at,643
 8009a68:	42000204 	addi	r8,r8,8
 8009a6c:	d8c12517 	ldw	r3,1172(sp)
 8009a70:	1c07883a 	add	r3,r3,r16
 8009a74:	d8c12515 	stw	r3,1172(sp)
 8009a78:	003f8d06 	br	80098b0 <__alt_data_end+0xfc0098b0>
 8009a7c:	d9012117 	ldw	r4,1156(sp)
 8009a80:	d9412017 	ldw	r5,1152(sp)
 8009a84:	80059d00 	call	80059d0 <__swsetup_r>
 8009a88:	1000301e 	bne	r2,zero,8009b4c <___vfiprintf_internal_r+0x3f0>
 8009a8c:	d8812017 	ldw	r2,1152(sp)
 8009a90:	01000284 	movi	r4,10
 8009a94:	10c0030b 	ldhu	r3,12(r2)
 8009a98:	1805883a 	mov	r2,r3
 8009a9c:	1080068c 	andi	r2,r2,26
 8009aa0:	113f551e 	bne	r2,r4,80097f8 <__alt_data_end+0xfc0097f8>
 8009aa4:	d9012017 	ldw	r4,1152(sp)
 8009aa8:	2080038b 	ldhu	r2,14(r4)
 8009aac:	113fffcc 	andi	r4,r2,65535
 8009ab0:	2120001c 	xori	r4,r4,32768
 8009ab4:	21200004 	addi	r4,r4,-32768
 8009ab8:	203f4f16 	blt	r4,zero,80097f8 <__alt_data_end+0xfc0097f8>
 8009abc:	d9412017 	ldw	r5,1152(sp)
 8009ac0:	d9012117 	ldw	r4,1156(sp)
 8009ac4:	d9c12317 	ldw	r7,1164(sp)
 8009ac8:	2b001917 	ldw	r12,100(r5)
 8009acc:	2ac00717 	ldw	r11,28(r5)
 8009ad0:	2a800917 	ldw	r10,36(r5)
 8009ad4:	02010004 	movi	r8,1024
 8009ad8:	18ffff4c 	andi	r3,r3,65533
 8009adc:	da0b883a 	add	r5,sp,r8
 8009ae0:	980d883a 	mov	r6,r19
 8009ae4:	d8c1030d 	sth	r3,1036(sp)
 8009ae8:	db011915 	stw	r12,1124(sp)
 8009aec:	d881038d 	sth	r2,1038(sp)
 8009af0:	dac10715 	stw	r11,1052(sp)
 8009af4:	da810915 	stw	r10,1060(sp)
 8009af8:	dec10015 	stw	sp,1024(sp)
 8009afc:	dec10415 	stw	sp,1040(sp)
 8009b00:	da010215 	stw	r8,1032(sp)
 8009b04:	da010515 	stw	r8,1044(sp)
 8009b08:	d8010615 	stw	zero,1048(sp)
 8009b0c:	800975c0 	call	800975c <___vfiprintf_internal_r>
 8009b10:	1021883a 	mov	r16,r2
 8009b14:	10000416 	blt	r2,zero,8009b28 <___vfiprintf_internal_r+0x3cc>
 8009b18:	d9012117 	ldw	r4,1156(sp)
 8009b1c:	d9410004 	addi	r5,sp,1024
 8009b20:	80010f00 	call	80010f0 <_fflush_r>
 8009b24:	10040f1e 	bne	r2,zero,800ab64 <___vfiprintf_internal_r+0x1408>
 8009b28:	d881030b 	ldhu	r2,1036(sp)
 8009b2c:	1080100c 	andi	r2,r2,64
 8009b30:	10000426 	beq	r2,zero,8009b44 <___vfiprintf_internal_r+0x3e8>
 8009b34:	d8c12017 	ldw	r3,1152(sp)
 8009b38:	1880030b 	ldhu	r2,12(r3)
 8009b3c:	10801014 	ori	r2,r2,64
 8009b40:	1880030d 	sth	r2,12(r3)
 8009b44:	8005883a 	mov	r2,r16
 8009b48:	00000106 	br	8009b50 <___vfiprintf_internal_r+0x3f4>
 8009b4c:	00bfffc4 	movi	r2,-1
 8009b50:	dfc13517 	ldw	ra,1236(sp)
 8009b54:	df013417 	ldw	fp,1232(sp)
 8009b58:	ddc13317 	ldw	r23,1228(sp)
 8009b5c:	dd813217 	ldw	r22,1224(sp)
 8009b60:	dd413117 	ldw	r21,1220(sp)
 8009b64:	dd013017 	ldw	r20,1216(sp)
 8009b68:	dcc12f17 	ldw	r19,1212(sp)
 8009b6c:	dc812e17 	ldw	r18,1208(sp)
 8009b70:	dc412d17 	ldw	r17,1204(sp)
 8009b74:	dc012c17 	ldw	r16,1200(sp)
 8009b78:	dec13604 	addi	sp,sp,1240
 8009b7c:	f800283a 	ret
 8009b80:	80016ac0 	call	80016ac <__sinit>
 8009b84:	003f0706 	br	80097a4 <__alt_data_end+0xfc0097a4>
 8009b88:	d8c12417 	ldw	r3,1168(sp)
 8009b8c:	d8812315 	stw	r2,1164(sp)
 8009b90:	00c7c83a 	sub	r3,zero,r3
 8009b94:	d8c12415 	stw	r3,1168(sp)
 8009b98:	94800114 	ori	r18,r18,4
 8009b9c:	b9800007 	ldb	r6,0(r23)
 8009ba0:	003f4f06 	br	80098e0 <__alt_data_end+0xfc0098e0>
 8009ba4:	94802014 	ori	r18,r18,128
 8009ba8:	b9800007 	ldb	r6,0(r23)
 8009bac:	003f4c06 	br	80098e0 <__alt_data_end+0xfc0098e0>
 8009bb0:	dc012615 	stw	r16,1176(sp)
 8009bb4:	d8012415 	stw	zero,1168(sp)
 8009bb8:	35bff404 	addi	r22,r6,-48
 8009bbc:	0009883a 	mov	r4,zero
 8009bc0:	b821883a 	mov	r16,r23
 8009bc4:	01400284 	movi	r5,10
 8009bc8:	800bf500 	call	800bf50 <__mulsi3>
 8009bcc:	81800007 	ldb	r6,0(r16)
 8009bd0:	1589883a 	add	r4,r2,r22
 8009bd4:	bdc00044 	addi	r23,r23,1
 8009bd8:	35bff404 	addi	r22,r6,-48
 8009bdc:	b821883a 	mov	r16,r23
 8009be0:	adbff82e 	bgeu	r21,r22,8009bc4 <__alt_data_end+0xfc009bc4>
 8009be4:	d9012415 	stw	r4,1168(sp)
 8009be8:	dc012617 	ldw	r16,1176(sp)
 8009bec:	003f3d06 	br	80098e4 <__alt_data_end+0xfc0098e4>
 8009bf0:	d8c12203 	ldbu	r3,1160(sp)
 8009bf4:	94800414 	ori	r18,r18,16
 8009bf8:	9080080c 	andi	r2,r18,32
 8009bfc:	d8c11d85 	stb	r3,1142(sp)
 8009c00:	9811883a 	mov	r8,r19
 8009c04:	d8c12317 	ldw	r3,1164(sp)
 8009c08:	10018226 	beq	r2,zero,800a214 <___vfiprintf_internal_r+0xab8>
 8009c0c:	d9012317 	ldw	r4,1164(sp)
 8009c10:	18800117 	ldw	r2,4(r3)
 8009c14:	1cc00017 	ldw	r19,0(r3)
 8009c18:	21000204 	addi	r4,r4,8
 8009c1c:	d9012315 	stw	r4,1164(sp)
 8009c20:	102b883a 	mov	r21,r2
 8009c24:	10030016 	blt	r2,zero,800a828 <___vfiprintf_internal_r+0x10cc>
 8009c28:	dd811d83 	ldbu	r22,1142(sp)
 8009c2c:	8029883a 	mov	r20,r16
 8009c30:	00800044 	movi	r2,1
 8009c34:	9d46b03a 	or	r3,r19,r21
 8009c38:	80000216 	blt	r16,zero,8009c44 <___vfiprintf_internal_r+0x4e8>
 8009c3c:	013fdfc4 	movi	r4,-129
 8009c40:	9124703a 	and	r18,r18,r4
 8009c44:	1801b41e 	bne	r3,zero,800a318 <___vfiprintf_internal_r+0xbbc>
 8009c48:	80028126 	beq	r16,zero,800a650 <___vfiprintf_internal_r+0xef4>
 8009c4c:	10803fcc 	andi	r2,r2,255
 8009c50:	00c00044 	movi	r3,1
 8009c54:	10c1d126 	beq	r2,r3,800a39c <___vfiprintf_internal_r+0xc40>
 8009c58:	00c00084 	movi	r3,2
 8009c5c:	10c28626 	beq	r2,r3,800a678 <___vfiprintf_internal_r+0xf1c>
 8009c60:	d8c10a04 	addi	r3,sp,1064
 8009c64:	9808d0fa 	srli	r4,r19,3
 8009c68:	a80a977a 	slli	r5,r21,29
 8009c6c:	a82ad0fa 	srli	r21,r21,3
 8009c70:	9cc001cc 	andi	r19,r19,7
 8009c74:	98800c04 	addi	r2,r19,48
 8009c78:	18ffffc4 	addi	r3,r3,-1
 8009c7c:	2926b03a 	or	r19,r5,r4
 8009c80:	18800005 	stb	r2,0(r3)
 8009c84:	9d48b03a 	or	r4,r19,r21
 8009c88:	203ff61e 	bne	r4,zero,8009c64 <__alt_data_end+0xfc009c64>
 8009c8c:	9100004c 	andi	r4,r18,1
 8009c90:	d8c12215 	stw	r3,1160(sp)
 8009c94:	2002b31e 	bne	r4,zero,800a764 <___vfiprintf_internal_r+0x1008>
 8009c98:	d9411e17 	ldw	r5,1144(sp)
 8009c9c:	28e9c83a 	sub	r20,r5,r3
 8009ca0:	a02b883a 	mov	r21,r20
 8009ca4:	a400010e 	bge	r20,r16,8009cac <___vfiprintf_internal_r+0x550>
 8009ca8:	802b883a 	mov	r21,r16
 8009cac:	b5803fcc 	andi	r22,r22,255
 8009cb0:	b580201c 	xori	r22,r22,128
 8009cb4:	b5bfe004 	addi	r22,r22,-128
 8009cb8:	b0000126 	beq	r22,zero,8009cc0 <___vfiprintf_internal_r+0x564>
 8009cbc:	ad400044 	addi	r21,r21,1
 8009cc0:	9280008c 	andi	r10,r18,2
 8009cc4:	50000126 	beq	r10,zero,8009ccc <___vfiprintf_internal_r+0x570>
 8009cc8:	ad400084 	addi	r21,r21,2
 8009ccc:	9580210c 	andi	r22,r18,132
 8009cd0:	b001751e 	bne	r22,zero,800a2a8 <___vfiprintf_internal_r+0xb4c>
 8009cd4:	d9012417 	ldw	r4,1168(sp)
 8009cd8:	2567c83a 	sub	r19,r4,r21
 8009cdc:	04c1720e 	bge	zero,r19,800a2a8 <___vfiprintf_internal_r+0xb4c>
 8009ce0:	01c00404 	movi	r7,16
 8009ce4:	d8c11c17 	ldw	r3,1136(sp)
 8009ce8:	3cc36b0e 	bge	r7,r19,800aa98 <___vfiprintf_internal_r+0x133c>
 8009cec:	00820074 	movhi	r2,2049
 8009cf0:	10880104 	addi	r2,r2,8196
 8009cf4:	dc012915 	stw	r16,1188(sp)
 8009cf8:	d9011b17 	ldw	r4,1132(sp)
 8009cfc:	9821883a 	mov	r16,r19
 8009d00:	d8812615 	stw	r2,1176(sp)
 8009d04:	030001c4 	movi	r12,7
 8009d08:	5027883a 	mov	r19,r10
 8009d0c:	00000506 	br	8009d24 <___vfiprintf_internal_r+0x5c8>
 8009d10:	21400084 	addi	r5,r4,2
 8009d14:	42000204 	addi	r8,r8,8
 8009d18:	1009883a 	mov	r4,r2
 8009d1c:	843ffc04 	addi	r16,r16,-16
 8009d20:	3c000d0e 	bge	r7,r16,8009d58 <___vfiprintf_internal_r+0x5fc>
 8009d24:	18c00404 	addi	r3,r3,16
 8009d28:	20800044 	addi	r2,r4,1
 8009d2c:	47000015 	stw	fp,0(r8)
 8009d30:	41c00115 	stw	r7,4(r8)
 8009d34:	d8c11c15 	stw	r3,1136(sp)
 8009d38:	d8811b15 	stw	r2,1132(sp)
 8009d3c:	60bff40e 	bge	r12,r2,8009d10 <__alt_data_end+0xfc009d10>
 8009d40:	18014b1e 	bne	r3,zero,800a270 <___vfiprintf_internal_r+0xb14>
 8009d44:	843ffc04 	addi	r16,r16,-16
 8009d48:	0009883a 	mov	r4,zero
 8009d4c:	01400044 	movi	r5,1
 8009d50:	d811883a 	mov	r8,sp
 8009d54:	3c3ff316 	blt	r7,r16,8009d24 <__alt_data_end+0xfc009d24>
 8009d58:	9815883a 	mov	r10,r19
 8009d5c:	8027883a 	mov	r19,r16
 8009d60:	dc012917 	ldw	r16,1188(sp)
 8009d64:	d9012617 	ldw	r4,1176(sp)
 8009d68:	98c7883a 	add	r3,r19,r3
 8009d6c:	44c00115 	stw	r19,4(r8)
 8009d70:	41000015 	stw	r4,0(r8)
 8009d74:	d8c11c15 	stw	r3,1136(sp)
 8009d78:	d9411b15 	stw	r5,1132(sp)
 8009d7c:	008001c4 	movi	r2,7
 8009d80:	11425116 	blt	r2,r5,800a6c8 <___vfiprintf_internal_r+0xf6c>
 8009d84:	d9011d87 	ldb	r4,1142(sp)
 8009d88:	42000204 	addi	r8,r8,8
 8009d8c:	28800044 	addi	r2,r5,1
 8009d90:	20014a1e 	bne	r4,zero,800a2bc <___vfiprintf_internal_r+0xb60>
 8009d94:	50000c26 	beq	r10,zero,8009dc8 <___vfiprintf_internal_r+0x66c>
 8009d98:	d9011d04 	addi	r4,sp,1140
 8009d9c:	18c00084 	addi	r3,r3,2
 8009da0:	41000015 	stw	r4,0(r8)
 8009da4:	01000084 	movi	r4,2
 8009da8:	41000115 	stw	r4,4(r8)
 8009dac:	d8c11c15 	stw	r3,1136(sp)
 8009db0:	d8811b15 	stw	r2,1132(sp)
 8009db4:	010001c4 	movi	r4,7
 8009db8:	20822016 	blt	r4,r2,800a63c <___vfiprintf_internal_r+0xee0>
 8009dbc:	100b883a 	mov	r5,r2
 8009dc0:	42000204 	addi	r8,r8,8
 8009dc4:	10800044 	addi	r2,r2,1
 8009dc8:	01002004 	movi	r4,128
 8009dcc:	b101de26 	beq	r22,r4,800a548 <___vfiprintf_internal_r+0xdec>
 8009dd0:	8521c83a 	sub	r16,r16,r20
 8009dd4:	0400230e 	bge	zero,r16,8009e64 <___vfiprintf_internal_r+0x708>
 8009dd8:	04c00404 	movi	r19,16
 8009ddc:	9c030d0e 	bge	r19,r16,800aa14 <___vfiprintf_internal_r+0x12b8>
 8009de0:	00820074 	movhi	r2,2049
 8009de4:	1087fd04 	addi	r2,r2,8180
 8009de8:	d8812615 	stw	r2,1176(sp)
 8009dec:	058001c4 	movi	r22,7
 8009df0:	00000506 	br	8009e08 <___vfiprintf_internal_r+0x6ac>
 8009df4:	28800084 	addi	r2,r5,2
 8009df8:	42000204 	addi	r8,r8,8
 8009dfc:	200b883a 	mov	r5,r4
 8009e00:	843ffc04 	addi	r16,r16,-16
 8009e04:	9c000d0e 	bge	r19,r16,8009e3c <___vfiprintf_internal_r+0x6e0>
 8009e08:	18c00404 	addi	r3,r3,16
 8009e0c:	29000044 	addi	r4,r5,1
 8009e10:	44400015 	stw	r17,0(r8)
 8009e14:	44c00115 	stw	r19,4(r8)
 8009e18:	d8c11c15 	stw	r3,1136(sp)
 8009e1c:	d9011b15 	stw	r4,1132(sp)
 8009e20:	b13ff40e 	bge	r22,r4,8009df4 <__alt_data_end+0xfc009df4>
 8009e24:	1801321e 	bne	r3,zero,800a2f0 <___vfiprintf_internal_r+0xb94>
 8009e28:	843ffc04 	addi	r16,r16,-16
 8009e2c:	000b883a 	mov	r5,zero
 8009e30:	00800044 	movi	r2,1
 8009e34:	d811883a 	mov	r8,sp
 8009e38:	9c3ff316 	blt	r19,r16,8009e08 <__alt_data_end+0xfc009e08>
 8009e3c:	d9012617 	ldw	r4,1176(sp)
 8009e40:	1c07883a 	add	r3,r3,r16
 8009e44:	44000115 	stw	r16,4(r8)
 8009e48:	41000015 	stw	r4,0(r8)
 8009e4c:	d8c11c15 	stw	r3,1136(sp)
 8009e50:	d8811b15 	stw	r2,1132(sp)
 8009e54:	010001c4 	movi	r4,7
 8009e58:	20816216 	blt	r4,r2,800a3e4 <___vfiprintf_internal_r+0xc88>
 8009e5c:	42000204 	addi	r8,r8,8
 8009e60:	10800044 	addi	r2,r2,1
 8009e64:	d9012217 	ldw	r4,1160(sp)
 8009e68:	1d07883a 	add	r3,r3,r20
 8009e6c:	45000115 	stw	r20,4(r8)
 8009e70:	41000015 	stw	r4,0(r8)
 8009e74:	d8c11c15 	stw	r3,1136(sp)
 8009e78:	d8811b15 	stw	r2,1132(sp)
 8009e7c:	010001c4 	movi	r4,7
 8009e80:	2081610e 	bge	r4,r2,800a408 <___vfiprintf_internal_r+0xcac>
 8009e84:	1802211e 	bne	r3,zero,800a70c <___vfiprintf_internal_r+0xfb0>
 8009e88:	d8011b15 	stw	zero,1132(sp)
 8009e8c:	9480010c 	andi	r18,r18,4
 8009e90:	9002171e 	bne	r18,zero,800a6f0 <___vfiprintf_internal_r+0xf94>
 8009e94:	d9412417 	ldw	r5,1168(sp)
 8009e98:	a9433716 	blt	r21,r5,800ab78 <___vfiprintf_internal_r+0x141c>
 8009e9c:	d8812517 	ldw	r2,1172(sp)
 8009ea0:	1545883a 	add	r2,r2,r21
 8009ea4:	d8812515 	stw	r2,1172(sp)
 8009ea8:	00019a06 	br	800a514 <___vfiprintf_internal_r+0xdb8>
 8009eac:	d8c12317 	ldw	r3,1164(sp)
 8009eb0:	05400044 	movi	r21,1
 8009eb4:	9811883a 	mov	r8,r19
 8009eb8:	18800017 	ldw	r2,0(r3)
 8009ebc:	18c00104 	addi	r3,r3,4
 8009ec0:	d8c12315 	stw	r3,1164(sp)
 8009ec4:	d8c10004 	addi	r3,sp,1024
 8009ec8:	d8011d85 	stb	zero,1142(sp)
 8009ecc:	d8810005 	stb	r2,1024(sp)
 8009ed0:	a829883a 	mov	r20,r21
 8009ed4:	d8c12215 	stw	r3,1160(sp)
 8009ed8:	0021883a 	mov	r16,zero
 8009edc:	003f7806 	br	8009cc0 <__alt_data_end+0xfc009cc0>
 8009ee0:	94800414 	ori	r18,r18,16
 8009ee4:	9080080c 	andi	r2,r18,32
 8009ee8:	9811883a 	mov	r8,r19
 8009eec:	10009026 	beq	r2,zero,800a130 <___vfiprintf_internal_r+0x9d4>
 8009ef0:	d8812317 	ldw	r2,1164(sp)
 8009ef4:	d8c12317 	ldw	r3,1164(sp)
 8009ef8:	14c00017 	ldw	r19,0(r2)
 8009efc:	15400117 	ldw	r21,4(r2)
 8009f00:	18c00204 	addi	r3,r3,8
 8009f04:	d8c12315 	stw	r3,1164(sp)
 8009f08:	0005883a 	mov	r2,zero
 8009f0c:	9d46b03a 	or	r3,r19,r21
 8009f10:	d8011d85 	stb	zero,1142(sp)
 8009f14:	8029883a 	mov	r20,r16
 8009f18:	002d883a 	mov	r22,zero
 8009f1c:	003f4606 	br	8009c38 <__alt_data_end+0xfc009c38>
 8009f20:	94800414 	ori	r18,r18,16
 8009f24:	9080080c 	andi	r2,r18,32
 8009f28:	9811883a 	mov	r8,r19
 8009f2c:	10006226 	beq	r2,zero,800a0b8 <___vfiprintf_internal_r+0x95c>
 8009f30:	d9012317 	ldw	r4,1164(sp)
 8009f34:	00800044 	movi	r2,1
 8009f38:	24c00017 	ldw	r19,0(r4)
 8009f3c:	25400117 	ldw	r21,4(r4)
 8009f40:	21000204 	addi	r4,r4,8
 8009f44:	d9012315 	stw	r4,1164(sp)
 8009f48:	9d46b03a 	or	r3,r19,r21
 8009f4c:	003ff006 	br	8009f10 <__alt_data_end+0xfc009f10>
 8009f50:	b9800007 	ldb	r6,0(r23)
 8009f54:	00801b04 	movi	r2,108
 8009f58:	3082b226 	beq	r6,r2,800aa24 <___vfiprintf_internal_r+0x12c8>
 8009f5c:	94800414 	ori	r18,r18,16
 8009f60:	003e5f06 	br	80098e0 <__alt_data_end+0xfc0098e0>
 8009f64:	d8c12203 	ldbu	r3,1160(sp)
 8009f68:	01020074 	movhi	r4,2049
 8009f6c:	2106f804 	addi	r4,r4,7136
 8009f70:	d8c11d85 	stb	r3,1142(sp)
 8009f74:	d9012715 	stw	r4,1180(sp)
 8009f78:	90c0080c 	andi	r3,r18,32
 8009f7c:	9811883a 	mov	r8,r19
 8009f80:	d8812317 	ldw	r2,1164(sp)
 8009f84:	18005f26 	beq	r3,zero,800a104 <___vfiprintf_internal_r+0x9a8>
 8009f88:	d9012317 	ldw	r4,1164(sp)
 8009f8c:	14c00017 	ldw	r19,0(r2)
 8009f90:	15400117 	ldw	r21,4(r2)
 8009f94:	21000204 	addi	r4,r4,8
 8009f98:	d9012315 	stw	r4,1164(sp)
 8009f9c:	9080004c 	andi	r2,r18,1
 8009fa0:	1001e226 	beq	r2,zero,800a72c <___vfiprintf_internal_r+0xfd0>
 8009fa4:	9d46b03a 	or	r3,r19,r21
 8009fa8:	18024e26 	beq	r3,zero,800a8e4 <___vfiprintf_internal_r+0x1188>
 8009fac:	00800c04 	movi	r2,48
 8009fb0:	d8811d05 	stb	r2,1140(sp)
 8009fb4:	d9811d45 	stb	r6,1141(sp)
 8009fb8:	94800094 	ori	r18,r18,2
 8009fbc:	00800084 	movi	r2,2
 8009fc0:	003fd306 	br	8009f10 <__alt_data_end+0xfc009f10>
 8009fc4:	d9012317 	ldw	r4,1164(sp)
 8009fc8:	d9412317 	ldw	r5,1164(sp)
 8009fcc:	21000017 	ldw	r4,0(r4)
 8009fd0:	28800104 	addi	r2,r5,4
 8009fd4:	d9012415 	stw	r4,1168(sp)
 8009fd8:	203eeb16 	blt	r4,zero,8009b88 <__alt_data_end+0xfc009b88>
 8009fdc:	d8812315 	stw	r2,1164(sp)
 8009fe0:	b9800007 	ldb	r6,0(r23)
 8009fe4:	003e3e06 	br	80098e0 <__alt_data_end+0xfc0098e0>
 8009fe8:	b9800007 	ldb	r6,0(r23)
 8009fec:	01000a84 	movi	r4,42
 8009ff0:	b8800044 	addi	r2,r23,1
 8009ff4:	3102d226 	beq	r6,r4,800ab40 <___vfiprintf_internal_r+0x13e4>
 8009ff8:	35bff404 	addi	r22,r6,-48
 8009ffc:	102f883a 	mov	r23,r2
 800a000:	0021883a 	mov	r16,zero
 800a004:	adbe3736 	bltu	r21,r22,80098e4 <__alt_data_end+0xfc0098e4>
 800a008:	0009883a 	mov	r4,zero
 800a00c:	01400284 	movi	r5,10
 800a010:	800bf500 	call	800bf50 <__mulsi3>
 800a014:	b9800007 	ldb	r6,0(r23)
 800a018:	b089883a 	add	r4,r22,r2
 800a01c:	bdc00044 	addi	r23,r23,1
 800a020:	35bff404 	addi	r22,r6,-48
 800a024:	adbff92e 	bgeu	r21,r22,800a00c <__alt_data_end+0xfc00a00c>
 800a028:	2021883a 	mov	r16,r4
 800a02c:	203e2d0e 	bge	r4,zero,80098e4 <__alt_data_end+0xfc0098e4>
 800a030:	043fffc4 	movi	r16,-1
 800a034:	003e2b06 	br	80098e4 <__alt_data_end+0xfc0098e4>
 800a038:	94801014 	ori	r18,r18,64
 800a03c:	b9800007 	ldb	r6,0(r23)
 800a040:	003e2706 	br	80098e0 <__alt_data_end+0xfc0098e0>
 800a044:	94800814 	ori	r18,r18,32
 800a048:	b9800007 	ldb	r6,0(r23)
 800a04c:	003e2406 	br	80098e0 <__alt_data_end+0xfc0098e0>
 800a050:	d9412317 	ldw	r5,1164(sp)
 800a054:	d8812317 	ldw	r2,1164(sp)
 800a058:	d8011d85 	stb	zero,1142(sp)
 800a05c:	29400017 	ldw	r5,0(r5)
 800a060:	9811883a 	mov	r8,r19
 800a064:	14c00104 	addi	r19,r2,4
 800a068:	d9412215 	stw	r5,1160(sp)
 800a06c:	28029026 	beq	r5,zero,800aab0 <___vfiprintf_internal_r+0x1354>
 800a070:	d9012217 	ldw	r4,1160(sp)
 800a074:	80027616 	blt	r16,zero,800aa50 <___vfiprintf_internal_r+0x12f4>
 800a078:	000b883a 	mov	r5,zero
 800a07c:	800d883a 	mov	r6,r16
 800a080:	da012a15 	stw	r8,1192(sp)
 800a084:	8007b700 	call	8007b70 <memchr>
 800a088:	da012a17 	ldw	r8,1192(sp)
 800a08c:	1002a026 	beq	r2,zero,800ab10 <___vfiprintf_internal_r+0x13b4>
 800a090:	d8c12217 	ldw	r3,1160(sp)
 800a094:	10e9c83a 	sub	r20,r2,r3
 800a098:	85023816 	blt	r16,r20,800a97c <___vfiprintf_internal_r+0x1220>
 800a09c:	dd811d83 	ldbu	r22,1142(sp)
 800a0a0:	dcc12315 	stw	r19,1164(sp)
 800a0a4:	0021883a 	mov	r16,zero
 800a0a8:	003efd06 	br	8009ca0 <__alt_data_end+0xfc009ca0>
 800a0ac:	9080080c 	andi	r2,r18,32
 800a0b0:	9811883a 	mov	r8,r19
 800a0b4:	103f9e1e 	bne	r2,zero,8009f30 <__alt_data_end+0xfc009f30>
 800a0b8:	9080040c 	andi	r2,r18,16
 800a0bc:	10021726 	beq	r2,zero,800a91c <___vfiprintf_internal_r+0x11c0>
 800a0c0:	d9412317 	ldw	r5,1164(sp)
 800a0c4:	002b883a 	mov	r21,zero
 800a0c8:	00800044 	movi	r2,1
 800a0cc:	2cc00017 	ldw	r19,0(r5)
 800a0d0:	29400104 	addi	r5,r5,4
 800a0d4:	d9412315 	stw	r5,1164(sp)
 800a0d8:	9807883a 	mov	r3,r19
 800a0dc:	003f8c06 	br	8009f10 <__alt_data_end+0xfc009f10>
 800a0e0:	d8c12203 	ldbu	r3,1160(sp)
 800a0e4:	01020074 	movhi	r4,2049
 800a0e8:	2106fd04 	addi	r4,r4,7156
 800a0ec:	d8c11d85 	stb	r3,1142(sp)
 800a0f0:	d9012715 	stw	r4,1180(sp)
 800a0f4:	90c0080c 	andi	r3,r18,32
 800a0f8:	9811883a 	mov	r8,r19
 800a0fc:	d8812317 	ldw	r2,1164(sp)
 800a100:	183fa11e 	bne	r3,zero,8009f88 <__alt_data_end+0xfc009f88>
 800a104:	90c0040c 	andi	r3,r18,16
 800a108:	1801e526 	beq	r3,zero,800a8a0 <___vfiprintf_internal_r+0x1144>
 800a10c:	d9412317 	ldw	r5,1164(sp)
 800a110:	14c00017 	ldw	r19,0(r2)
 800a114:	002b883a 	mov	r21,zero
 800a118:	29400104 	addi	r5,r5,4
 800a11c:	d9412315 	stw	r5,1164(sp)
 800a120:	003f9e06 	br	8009f9c <__alt_data_end+0xfc009f9c>
 800a124:	9080080c 	andi	r2,r18,32
 800a128:	9811883a 	mov	r8,r19
 800a12c:	103f701e 	bne	r2,zero,8009ef0 <__alt_data_end+0xfc009ef0>
 800a130:	9080040c 	andi	r2,r18,16
 800a134:	1001ef26 	beq	r2,zero,800a8f4 <___vfiprintf_internal_r+0x1198>
 800a138:	d9012317 	ldw	r4,1164(sp)
 800a13c:	002b883a 	mov	r21,zero
 800a140:	0005883a 	mov	r2,zero
 800a144:	24c00017 	ldw	r19,0(r4)
 800a148:	21000104 	addi	r4,r4,4
 800a14c:	d9012315 	stw	r4,1164(sp)
 800a150:	9807883a 	mov	r3,r19
 800a154:	003f6e06 	br	8009f10 <__alt_data_end+0xfc009f10>
 800a158:	d8c12317 	ldw	r3,1164(sp)
 800a15c:	9811883a 	mov	r8,r19
 800a160:	00800c04 	movi	r2,48
 800a164:	1cc00017 	ldw	r19,0(r3)
 800a168:	01020074 	movhi	r4,2049
 800a16c:	18c00104 	addi	r3,r3,4
 800a170:	d8811d05 	stb	r2,1140(sp)
 800a174:	2106fd04 	addi	r4,r4,7156
 800a178:	00801e04 	movi	r2,120
 800a17c:	d8811d45 	stb	r2,1141(sp)
 800a180:	d8c12315 	stw	r3,1164(sp)
 800a184:	002b883a 	mov	r21,zero
 800a188:	94800094 	ori	r18,r18,2
 800a18c:	d9012715 	stw	r4,1180(sp)
 800a190:	00800084 	movi	r2,2
 800a194:	9807883a 	mov	r3,r19
 800a198:	003f5d06 	br	8009f10 <__alt_data_end+0xfc009f10>
 800a19c:	d8c12203 	ldbu	r3,1160(sp)
 800a1a0:	9080080c 	andi	r2,r18,32
 800a1a4:	9811883a 	mov	r8,r19
 800a1a8:	d8c11d85 	stb	r3,1142(sp)
 800a1ac:	1001b126 	beq	r2,zero,800a874 <___vfiprintf_internal_r+0x1118>
 800a1b0:	d9012317 	ldw	r4,1164(sp)
 800a1b4:	d9412517 	ldw	r5,1172(sp)
 800a1b8:	20800017 	ldw	r2,0(r4)
 800a1bc:	2807d7fa 	srai	r3,r5,31
 800a1c0:	21000104 	addi	r4,r4,4
 800a1c4:	d9012315 	stw	r4,1164(sp)
 800a1c8:	11400015 	stw	r5,0(r2)
 800a1cc:	10c00115 	stw	r3,4(r2)
 800a1d0:	003d9a06 	br	800983c <__alt_data_end+0xfc00983c>
 800a1d4:	d8812207 	ldb	r2,1160(sp)
 800a1d8:	1001c41e 	bne	r2,zero,800a8ec <___vfiprintf_internal_r+0x1190>
 800a1dc:	00c00804 	movi	r3,32
 800a1e0:	d8c12205 	stb	r3,1160(sp)
 800a1e4:	b9800007 	ldb	r6,0(r23)
 800a1e8:	003dbd06 	br	80098e0 <__alt_data_end+0xfc0098e0>
 800a1ec:	00c00ac4 	movi	r3,43
 800a1f0:	d8c12205 	stb	r3,1160(sp)
 800a1f4:	b9800007 	ldb	r6,0(r23)
 800a1f8:	003db906 	br	80098e0 <__alt_data_end+0xfc0098e0>
 800a1fc:	d8c12203 	ldbu	r3,1160(sp)
 800a200:	9080080c 	andi	r2,r18,32
 800a204:	9811883a 	mov	r8,r19
 800a208:	d8c11d85 	stb	r3,1142(sp)
 800a20c:	d8c12317 	ldw	r3,1164(sp)
 800a210:	103e7e1e 	bne	r2,zero,8009c0c <__alt_data_end+0xfc009c0c>
 800a214:	9080040c 	andi	r2,r18,16
 800a218:	1001a926 	beq	r2,zero,800a8c0 <___vfiprintf_internal_r+0x1164>
 800a21c:	1cc00017 	ldw	r19,0(r3)
 800a220:	d9412317 	ldw	r5,1164(sp)
 800a224:	982bd7fa 	srai	r21,r19,31
 800a228:	29400104 	addi	r5,r5,4
 800a22c:	d9412315 	stw	r5,1164(sp)
 800a230:	a805883a 	mov	r2,r21
 800a234:	003e7b06 	br	8009c24 <__alt_data_end+0xfc009c24>
 800a238:	94800054 	ori	r18,r18,1
 800a23c:	b9800007 	ldb	r6,0(r23)
 800a240:	003da706 	br	80098e0 <__alt_data_end+0xfc0098e0>
 800a244:	d8c12203 	ldbu	r3,1160(sp)
 800a248:	9811883a 	mov	r8,r19
 800a24c:	d8c11d85 	stb	r3,1142(sp)
 800a250:	30005826 	beq	r6,zero,800a3b4 <___vfiprintf_internal_r+0xc58>
 800a254:	05400044 	movi	r21,1
 800a258:	d8c10004 	addi	r3,sp,1024
 800a25c:	d9810005 	stb	r6,1024(sp)
 800a260:	d8011d85 	stb	zero,1142(sp)
 800a264:	a829883a 	mov	r20,r21
 800a268:	d8c12215 	stw	r3,1160(sp)
 800a26c:	003f1a06 	br	8009ed8 <__alt_data_end+0xfc009ed8>
 800a270:	d9012117 	ldw	r4,1156(sp)
 800a274:	d9412017 	ldw	r5,1152(sp)
 800a278:	d9811a04 	addi	r6,sp,1128
 800a27c:	d9c12a15 	stw	r7,1192(sp)
 800a280:	db012b15 	stw	r12,1196(sp)
 800a284:	80096480 	call	8009648 <__sprint_r.part.0>
 800a288:	d9c12a17 	ldw	r7,1192(sp)
 800a28c:	db012b17 	ldw	r12,1196(sp)
 800a290:	10004e1e 	bne	r2,zero,800a3cc <___vfiprintf_internal_r+0xc70>
 800a294:	d9011b17 	ldw	r4,1132(sp)
 800a298:	d8c11c17 	ldw	r3,1136(sp)
 800a29c:	d811883a 	mov	r8,sp
 800a2a0:	21400044 	addi	r5,r4,1
 800a2a4:	003e9d06 	br	8009d1c <__alt_data_end+0xfc009d1c>
 800a2a8:	d9411b17 	ldw	r5,1132(sp)
 800a2ac:	d8c11c17 	ldw	r3,1136(sp)
 800a2b0:	28800044 	addi	r2,r5,1
 800a2b4:	d9011d87 	ldb	r4,1142(sp)
 800a2b8:	203eb626 	beq	r4,zero,8009d94 <__alt_data_end+0xfc009d94>
 800a2bc:	01000044 	movi	r4,1
 800a2c0:	d9411d84 	addi	r5,sp,1142
 800a2c4:	1907883a 	add	r3,r3,r4
 800a2c8:	41400015 	stw	r5,0(r8)
 800a2cc:	41000115 	stw	r4,4(r8)
 800a2d0:	d8c11c15 	stw	r3,1136(sp)
 800a2d4:	d8811b15 	stw	r2,1132(sp)
 800a2d8:	014001c4 	movi	r5,7
 800a2dc:	2880ce16 	blt	r5,r2,800a618 <___vfiprintf_internal_r+0xebc>
 800a2e0:	100b883a 	mov	r5,r2
 800a2e4:	42000204 	addi	r8,r8,8
 800a2e8:	10800044 	addi	r2,r2,1
 800a2ec:	003ea906 	br	8009d94 <__alt_data_end+0xfc009d94>
 800a2f0:	d9012117 	ldw	r4,1156(sp)
 800a2f4:	d9412017 	ldw	r5,1152(sp)
 800a2f8:	d9811a04 	addi	r6,sp,1128
 800a2fc:	80096480 	call	8009648 <__sprint_r.part.0>
 800a300:	1000321e 	bne	r2,zero,800a3cc <___vfiprintf_internal_r+0xc70>
 800a304:	d9411b17 	ldw	r5,1132(sp)
 800a308:	d8c11c17 	ldw	r3,1136(sp)
 800a30c:	d811883a 	mov	r8,sp
 800a310:	28800044 	addi	r2,r5,1
 800a314:	003eba06 	br	8009e00 <__alt_data_end+0xfc009e00>
 800a318:	10803fcc 	andi	r2,r2,255
 800a31c:	00c00044 	movi	r3,1
 800a320:	10fe4d1e 	bne	r2,r3,8009c58 <__alt_data_end+0xfc009c58>
 800a324:	a800021e 	bne	r21,zero,800a330 <___vfiprintf_internal_r+0xbd4>
 800a328:	00800244 	movi	r2,9
 800a32c:	14c01b2e 	bgeu	r2,r19,800a39c <___vfiprintf_internal_r+0xc40>
 800a330:	dc012215 	stw	r16,1160(sp)
 800a334:	dd010a04 	addi	r20,sp,1064
 800a338:	a821883a 	mov	r16,r21
 800a33c:	402b883a 	mov	r21,r8
 800a340:	9809883a 	mov	r4,r19
 800a344:	800b883a 	mov	r5,r16
 800a348:	01800284 	movi	r6,10
 800a34c:	000f883a 	mov	r7,zero
 800a350:	800b8080 	call	800b808 <__umoddi3>
 800a354:	10800c04 	addi	r2,r2,48
 800a358:	a53fffc4 	addi	r20,r20,-1
 800a35c:	9809883a 	mov	r4,r19
 800a360:	800b883a 	mov	r5,r16
 800a364:	01800284 	movi	r6,10
 800a368:	000f883a 	mov	r7,zero
 800a36c:	a0800005 	stb	r2,0(r20)
 800a370:	800b1c80 	call	800b1c8 <__udivdi3>
 800a374:	1027883a 	mov	r19,r2
 800a378:	10c4b03a 	or	r2,r2,r3
 800a37c:	1821883a 	mov	r16,r3
 800a380:	103fef1e 	bne	r2,zero,800a340 <__alt_data_end+0xfc00a340>
 800a384:	d9011e17 	ldw	r4,1144(sp)
 800a388:	dc012217 	ldw	r16,1160(sp)
 800a38c:	a811883a 	mov	r8,r21
 800a390:	dd012215 	stw	r20,1160(sp)
 800a394:	2529c83a 	sub	r20,r4,r20
 800a398:	003e4106 	br	8009ca0 <__alt_data_end+0xfc009ca0>
 800a39c:	9cc00c04 	addi	r19,r19,48
 800a3a0:	d8c109c4 	addi	r3,sp,1063
 800a3a4:	dcc109c5 	stb	r19,1063(sp)
 800a3a8:	dd012817 	ldw	r20,1184(sp)
 800a3ac:	d8c12215 	stw	r3,1160(sp)
 800a3b0:	003e3b06 	br	8009ca0 <__alt_data_end+0xfc009ca0>
 800a3b4:	d8811c17 	ldw	r2,1136(sp)
 800a3b8:	10000426 	beq	r2,zero,800a3cc <___vfiprintf_internal_r+0xc70>
 800a3bc:	d9012117 	ldw	r4,1156(sp)
 800a3c0:	d9412017 	ldw	r5,1152(sp)
 800a3c4:	d9811a04 	addi	r6,sp,1128
 800a3c8:	80096480 	call	8009648 <__sprint_r.part.0>
 800a3cc:	d9412017 	ldw	r5,1152(sp)
 800a3d0:	2880030b 	ldhu	r2,12(r5)
 800a3d4:	1080100c 	andi	r2,r2,64
 800a3d8:	103ddc1e 	bne	r2,zero,8009b4c <__alt_data_end+0xfc009b4c>
 800a3dc:	d8812517 	ldw	r2,1172(sp)
 800a3e0:	003ddb06 	br	8009b50 <__alt_data_end+0xfc009b50>
 800a3e4:	1801061e 	bne	r3,zero,800a800 <___vfiprintf_internal_r+0x10a4>
 800a3e8:	d8c12217 	ldw	r3,1160(sp)
 800a3ec:	00800044 	movi	r2,1
 800a3f0:	dd000115 	stw	r20,4(sp)
 800a3f4:	d8c00015 	stw	r3,0(sp)
 800a3f8:	dd011c15 	stw	r20,1136(sp)
 800a3fc:	d8811b15 	stw	r2,1132(sp)
 800a400:	a007883a 	mov	r3,r20
 800a404:	d811883a 	mov	r8,sp
 800a408:	42000204 	addi	r8,r8,8
 800a40c:	9480010c 	andi	r18,r18,4
 800a410:	90003426 	beq	r18,zero,800a4e4 <___vfiprintf_internal_r+0xd88>
 800a414:	d9412417 	ldw	r5,1168(sp)
 800a418:	2d65c83a 	sub	r18,r5,r21
 800a41c:	0480310e 	bge	zero,r18,800a4e4 <___vfiprintf_internal_r+0xd88>
 800a420:	04000404 	movi	r16,16
 800a424:	8481ad0e 	bge	r16,r18,800aadc <___vfiprintf_internal_r+0x1380>
 800a428:	01420074 	movhi	r5,2049
 800a42c:	29480104 	addi	r5,r5,8196
 800a430:	d9011b17 	ldw	r4,1132(sp)
 800a434:	d9412615 	stw	r5,1176(sp)
 800a438:	04c001c4 	movi	r19,7
 800a43c:	dd012117 	ldw	r20,1156(sp)
 800a440:	dd812017 	ldw	r22,1152(sp)
 800a444:	00000506 	br	800a45c <___vfiprintf_internal_r+0xd00>
 800a448:	21400084 	addi	r5,r4,2
 800a44c:	42000204 	addi	r8,r8,8
 800a450:	1009883a 	mov	r4,r2
 800a454:	94bffc04 	addi	r18,r18,-16
 800a458:	84800d0e 	bge	r16,r18,800a490 <___vfiprintf_internal_r+0xd34>
 800a45c:	18c00404 	addi	r3,r3,16
 800a460:	20800044 	addi	r2,r4,1
 800a464:	47000015 	stw	fp,0(r8)
 800a468:	44000115 	stw	r16,4(r8)
 800a46c:	d8c11c15 	stw	r3,1136(sp)
 800a470:	d8811b15 	stw	r2,1132(sp)
 800a474:	98bff40e 	bge	r19,r2,800a448 <__alt_data_end+0xfc00a448>
 800a478:	1800291e 	bne	r3,zero,800a520 <___vfiprintf_internal_r+0xdc4>
 800a47c:	94bffc04 	addi	r18,r18,-16
 800a480:	0009883a 	mov	r4,zero
 800a484:	01400044 	movi	r5,1
 800a488:	d811883a 	mov	r8,sp
 800a48c:	84bff316 	blt	r16,r18,800a45c <__alt_data_end+0xfc00a45c>
 800a490:	d8812617 	ldw	r2,1176(sp)
 800a494:	1c87883a 	add	r3,r3,r18
 800a498:	44800115 	stw	r18,4(r8)
 800a49c:	40800015 	stw	r2,0(r8)
 800a4a0:	d8c11c15 	stw	r3,1136(sp)
 800a4a4:	d9411b15 	stw	r5,1132(sp)
 800a4a8:	008001c4 	movi	r2,7
 800a4ac:	11400d0e 	bge	r2,r5,800a4e4 <___vfiprintf_internal_r+0xd88>
 800a4b0:	1800061e 	bne	r3,zero,800a4cc <___vfiprintf_internal_r+0xd70>
 800a4b4:	d8c12417 	ldw	r3,1168(sp)
 800a4b8:	a8c12e16 	blt	r21,r3,800a974 <___vfiprintf_internal_r+0x1218>
 800a4bc:	d9012517 	ldw	r4,1172(sp)
 800a4c0:	2549883a 	add	r4,r4,r21
 800a4c4:	d9012515 	stw	r4,1172(sp)
 800a4c8:	00001206 	br	800a514 <___vfiprintf_internal_r+0xdb8>
 800a4cc:	d9012117 	ldw	r4,1156(sp)
 800a4d0:	d9412017 	ldw	r5,1152(sp)
 800a4d4:	d9811a04 	addi	r6,sp,1128
 800a4d8:	80096480 	call	8009648 <__sprint_r.part.0>
 800a4dc:	103fbb1e 	bne	r2,zero,800a3cc <__alt_data_end+0xfc00a3cc>
 800a4e0:	d8c11c17 	ldw	r3,1136(sp)
 800a4e4:	d8812417 	ldw	r2,1168(sp)
 800a4e8:	a880010e 	bge	r21,r2,800a4f0 <___vfiprintf_internal_r+0xd94>
 800a4ec:	102b883a 	mov	r21,r2
 800a4f0:	d9012517 	ldw	r4,1172(sp)
 800a4f4:	2549883a 	add	r4,r4,r21
 800a4f8:	d9012515 	stw	r4,1172(sp)
 800a4fc:	18000526 	beq	r3,zero,800a514 <___vfiprintf_internal_r+0xdb8>
 800a500:	d9012117 	ldw	r4,1156(sp)
 800a504:	d9412017 	ldw	r5,1152(sp)
 800a508:	d9811a04 	addi	r6,sp,1128
 800a50c:	80096480 	call	8009648 <__sprint_r.part.0>
 800a510:	103fae1e 	bne	r2,zero,800a3cc <__alt_data_end+0xfc00a3cc>
 800a514:	d8011b15 	stw	zero,1132(sp)
 800a518:	d811883a 	mov	r8,sp
 800a51c:	003cc706 	br	800983c <__alt_data_end+0xfc00983c>
 800a520:	a009883a 	mov	r4,r20
 800a524:	b00b883a 	mov	r5,r22
 800a528:	d9811a04 	addi	r6,sp,1128
 800a52c:	80096480 	call	8009648 <__sprint_r.part.0>
 800a530:	103fa61e 	bne	r2,zero,800a3cc <__alt_data_end+0xfc00a3cc>
 800a534:	d9011b17 	ldw	r4,1132(sp)
 800a538:	d8c11c17 	ldw	r3,1136(sp)
 800a53c:	d811883a 	mov	r8,sp
 800a540:	21400044 	addi	r5,r4,1
 800a544:	003fc306 	br	800a454 <__alt_data_end+0xfc00a454>
 800a548:	d9012417 	ldw	r4,1168(sp)
 800a54c:	256dc83a 	sub	r22,r4,r21
 800a550:	05be1f0e 	bge	zero,r22,8009dd0 <__alt_data_end+0xfc009dd0>
 800a554:	04c00404 	movi	r19,16
 800a558:	9d81720e 	bge	r19,r22,800ab24 <___vfiprintf_internal_r+0x13c8>
 800a55c:	00820074 	movhi	r2,2049
 800a560:	1087fd04 	addi	r2,r2,8180
 800a564:	d8812615 	stw	r2,1176(sp)
 800a568:	028001c4 	movi	r10,7
 800a56c:	00000506 	br	800a584 <___vfiprintf_internal_r+0xe28>
 800a570:	29000084 	addi	r4,r5,2
 800a574:	42000204 	addi	r8,r8,8
 800a578:	100b883a 	mov	r5,r2
 800a57c:	b5bffc04 	addi	r22,r22,-16
 800a580:	9d800d0e 	bge	r19,r22,800a5b8 <___vfiprintf_internal_r+0xe5c>
 800a584:	18c00404 	addi	r3,r3,16
 800a588:	28800044 	addi	r2,r5,1
 800a58c:	44400015 	stw	r17,0(r8)
 800a590:	44c00115 	stw	r19,4(r8)
 800a594:	d8c11c15 	stw	r3,1136(sp)
 800a598:	d8811b15 	stw	r2,1132(sp)
 800a59c:	50bff40e 	bge	r10,r2,800a570 <__alt_data_end+0xfc00a570>
 800a5a0:	1800111e 	bne	r3,zero,800a5e8 <___vfiprintf_internal_r+0xe8c>
 800a5a4:	b5bffc04 	addi	r22,r22,-16
 800a5a8:	000b883a 	mov	r5,zero
 800a5ac:	01000044 	movi	r4,1
 800a5b0:	d811883a 	mov	r8,sp
 800a5b4:	9dbff316 	blt	r19,r22,800a584 <__alt_data_end+0xfc00a584>
 800a5b8:	d9412617 	ldw	r5,1176(sp)
 800a5bc:	1d87883a 	add	r3,r3,r22
 800a5c0:	45800115 	stw	r22,4(r8)
 800a5c4:	41400015 	stw	r5,0(r8)
 800a5c8:	d8c11c15 	stw	r3,1136(sp)
 800a5cc:	d9011b15 	stw	r4,1132(sp)
 800a5d0:	008001c4 	movi	r2,7
 800a5d4:	11008516 	blt	r2,r4,800a7ec <___vfiprintf_internal_r+0x1090>
 800a5d8:	42000204 	addi	r8,r8,8
 800a5dc:	20800044 	addi	r2,r4,1
 800a5e0:	200b883a 	mov	r5,r4
 800a5e4:	003dfa06 	br	8009dd0 <__alt_data_end+0xfc009dd0>
 800a5e8:	d9012117 	ldw	r4,1156(sp)
 800a5ec:	d9412017 	ldw	r5,1152(sp)
 800a5f0:	d9811a04 	addi	r6,sp,1128
 800a5f4:	da812a15 	stw	r10,1192(sp)
 800a5f8:	80096480 	call	8009648 <__sprint_r.part.0>
 800a5fc:	da812a17 	ldw	r10,1192(sp)
 800a600:	103f721e 	bne	r2,zero,800a3cc <__alt_data_end+0xfc00a3cc>
 800a604:	d9411b17 	ldw	r5,1132(sp)
 800a608:	d8c11c17 	ldw	r3,1136(sp)
 800a60c:	d811883a 	mov	r8,sp
 800a610:	29000044 	addi	r4,r5,1
 800a614:	003fd906 	br	800a57c <__alt_data_end+0xfc00a57c>
 800a618:	1800681e 	bne	r3,zero,800a7bc <___vfiprintf_internal_r+0x1060>
 800a61c:	50004d26 	beq	r10,zero,800a754 <___vfiprintf_internal_r+0xff8>
 800a620:	d8811d04 	addi	r2,sp,1140
 800a624:	00c00084 	movi	r3,2
 800a628:	d8800015 	stw	r2,0(sp)
 800a62c:	d8c00115 	stw	r3,4(sp)
 800a630:	2005883a 	mov	r2,r4
 800a634:	d811883a 	mov	r8,sp
 800a638:	003de006 	br	8009dbc <__alt_data_end+0xfc009dbc>
 800a63c:	1800551e 	bne	r3,zero,800a794 <___vfiprintf_internal_r+0x1038>
 800a640:	000b883a 	mov	r5,zero
 800a644:	00800044 	movi	r2,1
 800a648:	d811883a 	mov	r8,sp
 800a64c:	003dde06 	br	8009dc8 <__alt_data_end+0xfc009dc8>
 800a650:	10803fcc 	andi	r2,r2,255
 800a654:	1000191e 	bne	r2,zero,800a6bc <___vfiprintf_internal_r+0xf60>
 800a658:	9080004c 	andi	r2,r18,1
 800a65c:	10001726 	beq	r2,zero,800a6bc <___vfiprintf_internal_r+0xf60>
 800a660:	00800c04 	movi	r2,48
 800a664:	d8c109c4 	addi	r3,sp,1063
 800a668:	d88109c5 	stb	r2,1063(sp)
 800a66c:	dd012817 	ldw	r20,1184(sp)
 800a670:	d8c12215 	stw	r3,1160(sp)
 800a674:	003d8a06 	br	8009ca0 <__alt_data_end+0xfc009ca0>
 800a678:	d9012717 	ldw	r4,1180(sp)
 800a67c:	dd010a04 	addi	r20,sp,1064
 800a680:	988003cc 	andi	r2,r19,15
 800a684:	a806973a 	slli	r3,r21,28
 800a688:	2085883a 	add	r2,r4,r2
 800a68c:	9826d13a 	srli	r19,r19,4
 800a690:	10800003 	ldbu	r2,0(r2)
 800a694:	a82ad13a 	srli	r21,r21,4
 800a698:	a53fffc4 	addi	r20,r20,-1
 800a69c:	1ce6b03a 	or	r19,r3,r19
 800a6a0:	a0800005 	stb	r2,0(r20)
 800a6a4:	9d44b03a 	or	r2,r19,r21
 800a6a8:	103ff51e 	bne	r2,zero,800a680 <__alt_data_end+0xfc00a680>
 800a6ac:	d9411e17 	ldw	r5,1144(sp)
 800a6b0:	dd012215 	stw	r20,1160(sp)
 800a6b4:	2d29c83a 	sub	r20,r5,r20
 800a6b8:	003d7906 	br	8009ca0 <__alt_data_end+0xfc009ca0>
 800a6bc:	d8c10a04 	addi	r3,sp,1064
 800a6c0:	d8c12215 	stw	r3,1160(sp)
 800a6c4:	003d7606 	br	8009ca0 <__alt_data_end+0xfc009ca0>
 800a6c8:	18009e1e 	bne	r3,zero,800a944 <___vfiprintf_internal_r+0x11e8>
 800a6cc:	d8811d87 	ldb	r2,1142(sp)
 800a6d0:	10005f26 	beq	r2,zero,800a850 <___vfiprintf_internal_r+0x10f4>
 800a6d4:	00c00044 	movi	r3,1
 800a6d8:	d9011d84 	addi	r4,sp,1142
 800a6dc:	1805883a 	mov	r2,r3
 800a6e0:	d9000015 	stw	r4,0(sp)
 800a6e4:	d8c00115 	stw	r3,4(sp)
 800a6e8:	d811883a 	mov	r8,sp
 800a6ec:	003efc06 	br	800a2e0 <__alt_data_end+0xfc00a2e0>
 800a6f0:	d9412417 	ldw	r5,1168(sp)
 800a6f4:	d811883a 	mov	r8,sp
 800a6f8:	2d65c83a 	sub	r18,r5,r21
 800a6fc:	04bf4816 	blt	zero,r18,800a420 <__alt_data_end+0xfc00a420>
 800a700:	003f6c06 	br	800a4b4 <__alt_data_end+0xfc00a4b4>
 800a704:	b829883a 	mov	r20,r23
 800a708:	003c6906 	br	80098b0 <__alt_data_end+0xfc0098b0>
 800a70c:	d9012117 	ldw	r4,1156(sp)
 800a710:	d9412017 	ldw	r5,1152(sp)
 800a714:	d9811a04 	addi	r6,sp,1128
 800a718:	80096480 	call	8009648 <__sprint_r.part.0>
 800a71c:	103f2b1e 	bne	r2,zero,800a3cc <__alt_data_end+0xfc00a3cc>
 800a720:	d8c11c17 	ldw	r3,1136(sp)
 800a724:	d811883a 	mov	r8,sp
 800a728:	003f3806 	br	800a40c <__alt_data_end+0xfc00a40c>
 800a72c:	00800084 	movi	r2,2
 800a730:	9d46b03a 	or	r3,r19,r21
 800a734:	003df606 	br	8009f10 <__alt_data_end+0xfc009f10>
 800a738:	d9012117 	ldw	r4,1156(sp)
 800a73c:	d9412017 	ldw	r5,1152(sp)
 800a740:	d9811a04 	addi	r6,sp,1128
 800a744:	80096480 	call	8009648 <__sprint_r.part.0>
 800a748:	103f201e 	bne	r2,zero,800a3cc <__alt_data_end+0xfc00a3cc>
 800a74c:	d811883a 	mov	r8,sp
 800a750:	003cc606 	br	8009a6c <__alt_data_end+0xfc009a6c>
 800a754:	000b883a 	mov	r5,zero
 800a758:	2005883a 	mov	r2,r4
 800a75c:	d811883a 	mov	r8,sp
 800a760:	003d9906 	br	8009dc8 <__alt_data_end+0xfc009dc8>
 800a764:	10803fcc 	andi	r2,r2,255
 800a768:	1080201c 	xori	r2,r2,128
 800a76c:	10bfe004 	addi	r2,r2,-128
 800a770:	01000c04 	movi	r4,48
 800a774:	1100b226 	beq	r2,r4,800aa40 <___vfiprintf_internal_r+0x12e4>
 800a778:	d9412217 	ldw	r5,1160(sp)
 800a77c:	d8811e17 	ldw	r2,1144(sp)
 800a780:	193fffc5 	stb	r4,-1(r3)
 800a784:	297fffc4 	addi	r5,r5,-1
 800a788:	d9412215 	stw	r5,1160(sp)
 800a78c:	1169c83a 	sub	r20,r2,r5
 800a790:	003d4306 	br	8009ca0 <__alt_data_end+0xfc009ca0>
 800a794:	d9012117 	ldw	r4,1156(sp)
 800a798:	d9412017 	ldw	r5,1152(sp)
 800a79c:	d9811a04 	addi	r6,sp,1128
 800a7a0:	80096480 	call	8009648 <__sprint_r.part.0>
 800a7a4:	103f091e 	bne	r2,zero,800a3cc <__alt_data_end+0xfc00a3cc>
 800a7a8:	d9411b17 	ldw	r5,1132(sp)
 800a7ac:	d8c11c17 	ldw	r3,1136(sp)
 800a7b0:	d811883a 	mov	r8,sp
 800a7b4:	28800044 	addi	r2,r5,1
 800a7b8:	003d8306 	br	8009dc8 <__alt_data_end+0xfc009dc8>
 800a7bc:	d9012117 	ldw	r4,1156(sp)
 800a7c0:	d9412017 	ldw	r5,1152(sp)
 800a7c4:	d9811a04 	addi	r6,sp,1128
 800a7c8:	da812a15 	stw	r10,1192(sp)
 800a7cc:	80096480 	call	8009648 <__sprint_r.part.0>
 800a7d0:	da812a17 	ldw	r10,1192(sp)
 800a7d4:	103efd1e 	bne	r2,zero,800a3cc <__alt_data_end+0xfc00a3cc>
 800a7d8:	d9411b17 	ldw	r5,1132(sp)
 800a7dc:	d8c11c17 	ldw	r3,1136(sp)
 800a7e0:	d811883a 	mov	r8,sp
 800a7e4:	28800044 	addi	r2,r5,1
 800a7e8:	003d6a06 	br	8009d94 <__alt_data_end+0xfc009d94>
 800a7ec:	1800a01e 	bne	r3,zero,800aa70 <___vfiprintf_internal_r+0x1314>
 800a7f0:	000b883a 	mov	r5,zero
 800a7f4:	00800044 	movi	r2,1
 800a7f8:	d811883a 	mov	r8,sp
 800a7fc:	003d7406 	br	8009dd0 <__alt_data_end+0xfc009dd0>
 800a800:	d9012117 	ldw	r4,1156(sp)
 800a804:	d9412017 	ldw	r5,1152(sp)
 800a808:	d9811a04 	addi	r6,sp,1128
 800a80c:	80096480 	call	8009648 <__sprint_r.part.0>
 800a810:	103eee1e 	bne	r2,zero,800a3cc <__alt_data_end+0xfc00a3cc>
 800a814:	d8811b17 	ldw	r2,1132(sp)
 800a818:	d8c11c17 	ldw	r3,1136(sp)
 800a81c:	d811883a 	mov	r8,sp
 800a820:	10800044 	addi	r2,r2,1
 800a824:	003d8f06 	br	8009e64 <__alt_data_end+0xfc009e64>
 800a828:	04e7c83a 	sub	r19,zero,r19
 800a82c:	9804c03a 	cmpne	r2,r19,zero
 800a830:	056bc83a 	sub	r21,zero,r21
 800a834:	a8abc83a 	sub	r21,r21,r2
 800a838:	05800b44 	movi	r22,45
 800a83c:	dd811d85 	stb	r22,1142(sp)
 800a840:	8029883a 	mov	r20,r16
 800a844:	00800044 	movi	r2,1
 800a848:	9d46b03a 	or	r3,r19,r21
 800a84c:	003cfa06 	br	8009c38 <__alt_data_end+0xfc009c38>
 800a850:	000b883a 	mov	r5,zero
 800a854:	00800044 	movi	r2,1
 800a858:	d811883a 	mov	r8,sp
 800a85c:	503d5a26 	beq	r10,zero,8009dc8 <__alt_data_end+0xfc009dc8>
 800a860:	00c00084 	movi	r3,2
 800a864:	d9011d04 	addi	r4,sp,1140
 800a868:	d9000015 	stw	r4,0(sp)
 800a86c:	d8c00115 	stw	r3,4(sp)
 800a870:	003d5206 	br	8009dbc <__alt_data_end+0xfc009dbc>
 800a874:	9080040c 	andi	r2,r18,16
 800a878:	1000421e 	bne	r2,zero,800a984 <___vfiprintf_internal_r+0x1228>
 800a87c:	9480100c 	andi	r18,r18,64
 800a880:	90009c26 	beq	r18,zero,800aaf4 <___vfiprintf_internal_r+0x1398>
 800a884:	d9412317 	ldw	r5,1164(sp)
 800a888:	d8c12517 	ldw	r3,1172(sp)
 800a88c:	28800017 	ldw	r2,0(r5)
 800a890:	29400104 	addi	r5,r5,4
 800a894:	d9412315 	stw	r5,1164(sp)
 800a898:	10c0000d 	sth	r3,0(r2)
 800a89c:	003be706 	br	800983c <__alt_data_end+0xfc00983c>
 800a8a0:	90c0100c 	andi	r3,r18,64
 800a8a4:	18003e26 	beq	r3,zero,800a9a0 <___vfiprintf_internal_r+0x1244>
 800a8a8:	d8c12317 	ldw	r3,1164(sp)
 800a8ac:	14c0000b 	ldhu	r19,0(r2)
 800a8b0:	002b883a 	mov	r21,zero
 800a8b4:	18c00104 	addi	r3,r3,4
 800a8b8:	d8c12315 	stw	r3,1164(sp)
 800a8bc:	003db706 	br	8009f9c <__alt_data_end+0xfc009f9c>
 800a8c0:	9080100c 	andi	r2,r18,64
 800a8c4:	10004c26 	beq	r2,zero,800a9f8 <___vfiprintf_internal_r+0x129c>
 800a8c8:	1cc0000f 	ldh	r19,0(r3)
 800a8cc:	d8812317 	ldw	r2,1164(sp)
 800a8d0:	982bd7fa 	srai	r21,r19,31
 800a8d4:	10800104 	addi	r2,r2,4
 800a8d8:	d8812315 	stw	r2,1164(sp)
 800a8dc:	a805883a 	mov	r2,r21
 800a8e0:	003cd006 	br	8009c24 <__alt_data_end+0xfc009c24>
 800a8e4:	00800084 	movi	r2,2
 800a8e8:	003d8906 	br	8009f10 <__alt_data_end+0xfc009f10>
 800a8ec:	b9800007 	ldb	r6,0(r23)
 800a8f0:	003bfb06 	br	80098e0 <__alt_data_end+0xfc0098e0>
 800a8f4:	9080100c 	andi	r2,r18,64
 800a8f8:	10003726 	beq	r2,zero,800a9d8 <___vfiprintf_internal_r+0x127c>
 800a8fc:	d9412317 	ldw	r5,1164(sp)
 800a900:	002b883a 	mov	r21,zero
 800a904:	0005883a 	mov	r2,zero
 800a908:	2cc0000b 	ldhu	r19,0(r5)
 800a90c:	29400104 	addi	r5,r5,4
 800a910:	d9412315 	stw	r5,1164(sp)
 800a914:	9807883a 	mov	r3,r19
 800a918:	003d7d06 	br	8009f10 <__alt_data_end+0xfc009f10>
 800a91c:	9080100c 	andi	r2,r18,64
 800a920:	10002526 	beq	r2,zero,800a9b8 <___vfiprintf_internal_r+0x125c>
 800a924:	d8812317 	ldw	r2,1164(sp)
 800a928:	002b883a 	mov	r21,zero
 800a92c:	14c0000b 	ldhu	r19,0(r2)
 800a930:	10800104 	addi	r2,r2,4
 800a934:	d8812315 	stw	r2,1164(sp)
 800a938:	9807883a 	mov	r3,r19
 800a93c:	00800044 	movi	r2,1
 800a940:	003d7306 	br	8009f10 <__alt_data_end+0xfc009f10>
 800a944:	d9012117 	ldw	r4,1156(sp)
 800a948:	d9412017 	ldw	r5,1152(sp)
 800a94c:	d9811a04 	addi	r6,sp,1128
 800a950:	da812a15 	stw	r10,1192(sp)
 800a954:	80096480 	call	8009648 <__sprint_r.part.0>
 800a958:	da812a17 	ldw	r10,1192(sp)
 800a95c:	103e9b1e 	bne	r2,zero,800a3cc <__alt_data_end+0xfc00a3cc>
 800a960:	d9411b17 	ldw	r5,1132(sp)
 800a964:	d8c11c17 	ldw	r3,1136(sp)
 800a968:	d811883a 	mov	r8,sp
 800a96c:	28800044 	addi	r2,r5,1
 800a970:	003e5006 	br	800a2b4 <__alt_data_end+0xfc00a2b4>
 800a974:	182b883a 	mov	r21,r3
 800a978:	003ed006 	br	800a4bc <__alt_data_end+0xfc00a4bc>
 800a97c:	8029883a 	mov	r20,r16
 800a980:	003dc606 	br	800a09c <__alt_data_end+0xfc00a09c>
 800a984:	d8c12317 	ldw	r3,1164(sp)
 800a988:	d9012517 	ldw	r4,1172(sp)
 800a98c:	18800017 	ldw	r2,0(r3)
 800a990:	18c00104 	addi	r3,r3,4
 800a994:	d8c12315 	stw	r3,1164(sp)
 800a998:	11000015 	stw	r4,0(r2)
 800a99c:	003ba706 	br	800983c <__alt_data_end+0xfc00983c>
 800a9a0:	d9012317 	ldw	r4,1164(sp)
 800a9a4:	14c00017 	ldw	r19,0(r2)
 800a9a8:	002b883a 	mov	r21,zero
 800a9ac:	21000104 	addi	r4,r4,4
 800a9b0:	d9012315 	stw	r4,1164(sp)
 800a9b4:	003d7906 	br	8009f9c <__alt_data_end+0xfc009f9c>
 800a9b8:	d8c12317 	ldw	r3,1164(sp)
 800a9bc:	002b883a 	mov	r21,zero
 800a9c0:	00800044 	movi	r2,1
 800a9c4:	1cc00017 	ldw	r19,0(r3)
 800a9c8:	18c00104 	addi	r3,r3,4
 800a9cc:	d8c12315 	stw	r3,1164(sp)
 800a9d0:	9807883a 	mov	r3,r19
 800a9d4:	003d4e06 	br	8009f10 <__alt_data_end+0xfc009f10>
 800a9d8:	d8812317 	ldw	r2,1164(sp)
 800a9dc:	002b883a 	mov	r21,zero
 800a9e0:	14c00017 	ldw	r19,0(r2)
 800a9e4:	10800104 	addi	r2,r2,4
 800a9e8:	d8812315 	stw	r2,1164(sp)
 800a9ec:	9807883a 	mov	r3,r19
 800a9f0:	0005883a 	mov	r2,zero
 800a9f4:	003d4606 	br	8009f10 <__alt_data_end+0xfc009f10>
 800a9f8:	1cc00017 	ldw	r19,0(r3)
 800a9fc:	d8c12317 	ldw	r3,1164(sp)
 800aa00:	982bd7fa 	srai	r21,r19,31
 800aa04:	18c00104 	addi	r3,r3,4
 800aa08:	d8c12315 	stw	r3,1164(sp)
 800aa0c:	a805883a 	mov	r2,r21
 800aa10:	003c8406 	br	8009c24 <__alt_data_end+0xfc009c24>
 800aa14:	01020074 	movhi	r4,2049
 800aa18:	2107fd04 	addi	r4,r4,8180
 800aa1c:	d9012615 	stw	r4,1176(sp)
 800aa20:	003d0606 	br	8009e3c <__alt_data_end+0xfc009e3c>
 800aa24:	b9800043 	ldbu	r6,1(r23)
 800aa28:	94800814 	ori	r18,r18,32
 800aa2c:	bdc00044 	addi	r23,r23,1
 800aa30:	31803fcc 	andi	r6,r6,255
 800aa34:	3180201c 	xori	r6,r6,128
 800aa38:	31bfe004 	addi	r6,r6,-128
 800aa3c:	003ba806 	br	80098e0 <__alt_data_end+0xfc0098e0>
 800aa40:	d8811e17 	ldw	r2,1144(sp)
 800aa44:	d8c12217 	ldw	r3,1160(sp)
 800aa48:	10e9c83a 	sub	r20,r2,r3
 800aa4c:	003c9406 	br	8009ca0 <__alt_data_end+0xfc009ca0>
 800aa50:	da012a15 	stw	r8,1192(sp)
 800aa54:	80034700 	call	8003470 <strlen>
 800aa58:	1029883a 	mov	r20,r2
 800aa5c:	dd811d83 	ldbu	r22,1142(sp)
 800aa60:	dcc12315 	stw	r19,1164(sp)
 800aa64:	0021883a 	mov	r16,zero
 800aa68:	da012a17 	ldw	r8,1192(sp)
 800aa6c:	003c8c06 	br	8009ca0 <__alt_data_end+0xfc009ca0>
 800aa70:	d9012117 	ldw	r4,1156(sp)
 800aa74:	d9412017 	ldw	r5,1152(sp)
 800aa78:	d9811a04 	addi	r6,sp,1128
 800aa7c:	80096480 	call	8009648 <__sprint_r.part.0>
 800aa80:	103e521e 	bne	r2,zero,800a3cc <__alt_data_end+0xfc00a3cc>
 800aa84:	d9411b17 	ldw	r5,1132(sp)
 800aa88:	d8c11c17 	ldw	r3,1136(sp)
 800aa8c:	d811883a 	mov	r8,sp
 800aa90:	28800044 	addi	r2,r5,1
 800aa94:	003cce06 	br	8009dd0 <__alt_data_end+0xfc009dd0>
 800aa98:	01420074 	movhi	r5,2049
 800aa9c:	29480104 	addi	r5,r5,8196
 800aaa0:	d9412615 	stw	r5,1176(sp)
 800aaa4:	d9411b17 	ldw	r5,1132(sp)
 800aaa8:	29400044 	addi	r5,r5,1
 800aaac:	003cad06 	br	8009d64 <__alt_data_end+0xfc009d64>
 800aab0:	00800184 	movi	r2,6
 800aab4:	1400012e 	bgeu	r2,r16,800aabc <___vfiprintf_internal_r+0x1360>
 800aab8:	1021883a 	mov	r16,r2
 800aabc:	8029883a 	mov	r20,r16
 800aac0:	802b883a 	mov	r21,r16
 800aac4:	80001c16 	blt	r16,zero,800ab38 <___vfiprintf_internal_r+0x13dc>
 800aac8:	00c20074 	movhi	r3,2049
 800aacc:	18c70204 	addi	r3,r3,7176
 800aad0:	dcc12315 	stw	r19,1164(sp)
 800aad4:	d8c12215 	stw	r3,1160(sp)
 800aad8:	003cff06 	br	8009ed8 <__alt_data_end+0xfc009ed8>
 800aadc:	d9411b17 	ldw	r5,1132(sp)
 800aae0:	00820074 	movhi	r2,2049
 800aae4:	10880104 	addi	r2,r2,8196
 800aae8:	d8812615 	stw	r2,1176(sp)
 800aaec:	29400044 	addi	r5,r5,1
 800aaf0:	003e6706 	br	800a490 <__alt_data_end+0xfc00a490>
 800aaf4:	d9012317 	ldw	r4,1164(sp)
 800aaf8:	d9412517 	ldw	r5,1172(sp)
 800aafc:	20800017 	ldw	r2,0(r4)
 800ab00:	21000104 	addi	r4,r4,4
 800ab04:	d9012315 	stw	r4,1164(sp)
 800ab08:	11400015 	stw	r5,0(r2)
 800ab0c:	003b4b06 	br	800983c <__alt_data_end+0xfc00983c>
 800ab10:	8029883a 	mov	r20,r16
 800ab14:	dd811d83 	ldbu	r22,1142(sp)
 800ab18:	dcc12315 	stw	r19,1164(sp)
 800ab1c:	0021883a 	mov	r16,zero
 800ab20:	003c5f06 	br	8009ca0 <__alt_data_end+0xfc009ca0>
 800ab24:	01020074 	movhi	r4,2049
 800ab28:	2107fd04 	addi	r4,r4,8180
 800ab2c:	d9012615 	stw	r4,1176(sp)
 800ab30:	1009883a 	mov	r4,r2
 800ab34:	003ea006 	br	800a5b8 <__alt_data_end+0xfc00a5b8>
 800ab38:	002b883a 	mov	r21,zero
 800ab3c:	003fe206 	br	800aac8 <__alt_data_end+0xfc00aac8>
 800ab40:	d9412317 	ldw	r5,1164(sp)
 800ab44:	b807883a 	mov	r3,r23
 800ab48:	102f883a 	mov	r23,r2
 800ab4c:	2c000017 	ldw	r16,0(r5)
 800ab50:	29000104 	addi	r4,r5,4
 800ab54:	d9012315 	stw	r4,1164(sp)
 800ab58:	80000416 	blt	r16,zero,800ab6c <___vfiprintf_internal_r+0x1410>
 800ab5c:	19800047 	ldb	r6,1(r3)
 800ab60:	003b5f06 	br	80098e0 <__alt_data_end+0xfc0098e0>
 800ab64:	043fffc4 	movi	r16,-1
 800ab68:	003bef06 	br	8009b28 <__alt_data_end+0xfc009b28>
 800ab6c:	043fffc4 	movi	r16,-1
 800ab70:	19800047 	ldb	r6,1(r3)
 800ab74:	003b5a06 	br	80098e0 <__alt_data_end+0xfc0098e0>
 800ab78:	282b883a 	mov	r21,r5
 800ab7c:	003cc706 	br	8009e9c <__alt_data_end+0xfc009e9c>

0800ab80 <__vfiprintf_internal>:
 800ab80:	2007883a 	mov	r3,r4
 800ab84:	01020074 	movhi	r4,2049
 800ab88:	210f3204 	addi	r4,r4,15560
 800ab8c:	21000017 	ldw	r4,0(r4)
 800ab90:	2805883a 	mov	r2,r5
 800ab94:	300f883a 	mov	r7,r6
 800ab98:	180b883a 	mov	r5,r3
 800ab9c:	100d883a 	mov	r6,r2
 800aba0:	800975c1 	jmpi	800975c <___vfiprintf_internal_r>

0800aba4 <_calloc_r>:
 800aba4:	defffe04 	addi	sp,sp,-8
 800aba8:	dc000015 	stw	r16,0(sp)
 800abac:	2021883a 	mov	r16,r4
 800abb0:	2809883a 	mov	r4,r5
 800abb4:	300b883a 	mov	r5,r6
 800abb8:	dfc00115 	stw	ra,4(sp)
 800abbc:	800bf500 	call	800bf50 <__mulsi3>
 800abc0:	8009883a 	mov	r4,r16
 800abc4:	100b883a 	mov	r5,r2
 800abc8:	80026380 	call	8002638 <_malloc_r>
 800abcc:	1021883a 	mov	r16,r2
 800abd0:	10002826 	beq	r2,zero,800ac74 <_calloc_r+0xd0>
 800abd4:	11bfff17 	ldw	r6,-4(r2)
 800abd8:	00bfff04 	movi	r2,-4
 800abdc:	00c00904 	movi	r3,36
 800abe0:	308c703a 	and	r6,r6,r2
 800abe4:	308d883a 	add	r6,r6,r2
 800abe8:	19801436 	bltu	r3,r6,800ac3c <_calloc_r+0x98>
 800abec:	008004c4 	movi	r2,19
 800abf0:	11800936 	bltu	r2,r6,800ac18 <_calloc_r+0x74>
 800abf4:	8005883a 	mov	r2,r16
 800abf8:	10000015 	stw	zero,0(r2)
 800abfc:	10000115 	stw	zero,4(r2)
 800ac00:	10000215 	stw	zero,8(r2)
 800ac04:	8005883a 	mov	r2,r16
 800ac08:	dfc00117 	ldw	ra,4(sp)
 800ac0c:	dc000017 	ldw	r16,0(sp)
 800ac10:	dec00204 	addi	sp,sp,8
 800ac14:	f800283a 	ret
 800ac18:	80000015 	stw	zero,0(r16)
 800ac1c:	80000115 	stw	zero,4(r16)
 800ac20:	008006c4 	movi	r2,27
 800ac24:	11800d2e 	bgeu	r2,r6,800ac5c <_calloc_r+0xb8>
 800ac28:	80000215 	stw	zero,8(r16)
 800ac2c:	80000315 	stw	zero,12(r16)
 800ac30:	30c00c26 	beq	r6,r3,800ac64 <_calloc_r+0xc0>
 800ac34:	80800404 	addi	r2,r16,16
 800ac38:	003fef06 	br	800abf8 <__alt_data_end+0xfc00abf8>
 800ac3c:	8009883a 	mov	r4,r16
 800ac40:	000b883a 	mov	r5,zero
 800ac44:	8002de00 	call	8002de0 <memset>
 800ac48:	8005883a 	mov	r2,r16
 800ac4c:	dfc00117 	ldw	ra,4(sp)
 800ac50:	dc000017 	ldw	r16,0(sp)
 800ac54:	dec00204 	addi	sp,sp,8
 800ac58:	f800283a 	ret
 800ac5c:	80800204 	addi	r2,r16,8
 800ac60:	003fe506 	br	800abf8 <__alt_data_end+0xfc00abf8>
 800ac64:	80000415 	stw	zero,16(r16)
 800ac68:	80800604 	addi	r2,r16,24
 800ac6c:	80000515 	stw	zero,20(r16)
 800ac70:	003fe106 	br	800abf8 <__alt_data_end+0xfc00abf8>
 800ac74:	0005883a 	mov	r2,zero
 800ac78:	003fe306 	br	800ac08 <__alt_data_end+0xfc00ac08>

0800ac7c <_fputwc_r>:
 800ac7c:	3080030b 	ldhu	r2,12(r6)
 800ac80:	defff804 	addi	sp,sp,-32
 800ac84:	dcc00415 	stw	r19,16(sp)
 800ac88:	dc800315 	stw	r18,12(sp)
 800ac8c:	dc000115 	stw	r16,4(sp)
 800ac90:	dfc00715 	stw	ra,28(sp)
 800ac94:	dd400615 	stw	r21,24(sp)
 800ac98:	dd000515 	stw	r20,20(sp)
 800ac9c:	dc400215 	stw	r17,8(sp)
 800aca0:	10c8000c 	andi	r3,r2,8192
 800aca4:	3021883a 	mov	r16,r6
 800aca8:	2027883a 	mov	r19,r4
 800acac:	2825883a 	mov	r18,r5
 800acb0:	1800051e 	bne	r3,zero,800acc8 <_fputwc_r+0x4c>
 800acb4:	30c01917 	ldw	r3,100(r6)
 800acb8:	10880014 	ori	r2,r2,8192
 800acbc:	3080030d 	sth	r2,12(r6)
 800acc0:	18880014 	ori	r2,r3,8192
 800acc4:	30801915 	stw	r2,100(r6)
 800acc8:	8007abc0 	call	8007abc <__locale_mb_cur_max>
 800accc:	00c00044 	movi	r3,1
 800acd0:	10c03e26 	beq	r2,r3,800adcc <_fputwc_r+0x150>
 800acd4:	9809883a 	mov	r4,r19
 800acd8:	d80b883a 	mov	r5,sp
 800acdc:	900d883a 	mov	r6,r18
 800ace0:	81c01704 	addi	r7,r16,92
 800ace4:	800afc80 	call	800afc8 <_wcrtomb_r>
 800ace8:	1029883a 	mov	r20,r2
 800acec:	00bfffc4 	movi	r2,-1
 800acf0:	a0802026 	beq	r20,r2,800ad74 <_fputwc_r+0xf8>
 800acf4:	d9400003 	ldbu	r5,0(sp)
 800acf8:	a0001c26 	beq	r20,zero,800ad6c <_fputwc_r+0xf0>
 800acfc:	0023883a 	mov	r17,zero
 800ad00:	05400284 	movi	r21,10
 800ad04:	00000906 	br	800ad2c <_fputwc_r+0xb0>
 800ad08:	80800017 	ldw	r2,0(r16)
 800ad0c:	11400005 	stb	r5,0(r2)
 800ad10:	80c00017 	ldw	r3,0(r16)
 800ad14:	18c00044 	addi	r3,r3,1
 800ad18:	80c00015 	stw	r3,0(r16)
 800ad1c:	8c400044 	addi	r17,r17,1
 800ad20:	dc45883a 	add	r2,sp,r17
 800ad24:	8d00112e 	bgeu	r17,r20,800ad6c <_fputwc_r+0xf0>
 800ad28:	11400003 	ldbu	r5,0(r2)
 800ad2c:	80c00217 	ldw	r3,8(r16)
 800ad30:	18ffffc4 	addi	r3,r3,-1
 800ad34:	80c00215 	stw	r3,8(r16)
 800ad38:	183ff30e 	bge	r3,zero,800ad08 <__alt_data_end+0xfc00ad08>
 800ad3c:	80800617 	ldw	r2,24(r16)
 800ad40:	18801916 	blt	r3,r2,800ada8 <_fputwc_r+0x12c>
 800ad44:	80800017 	ldw	r2,0(r16)
 800ad48:	11400005 	stb	r5,0(r2)
 800ad4c:	80800017 	ldw	r2,0(r16)
 800ad50:	10c00003 	ldbu	r3,0(r2)
 800ad54:	10800044 	addi	r2,r2,1
 800ad58:	1d402326 	beq	r3,r21,800ade8 <_fputwc_r+0x16c>
 800ad5c:	80800015 	stw	r2,0(r16)
 800ad60:	8c400044 	addi	r17,r17,1
 800ad64:	dc45883a 	add	r2,sp,r17
 800ad68:	8d3fef36 	bltu	r17,r20,800ad28 <__alt_data_end+0xfc00ad28>
 800ad6c:	9005883a 	mov	r2,r18
 800ad70:	00000406 	br	800ad84 <_fputwc_r+0x108>
 800ad74:	80c0030b 	ldhu	r3,12(r16)
 800ad78:	a005883a 	mov	r2,r20
 800ad7c:	18c01014 	ori	r3,r3,64
 800ad80:	80c0030d 	sth	r3,12(r16)
 800ad84:	dfc00717 	ldw	ra,28(sp)
 800ad88:	dd400617 	ldw	r21,24(sp)
 800ad8c:	dd000517 	ldw	r20,20(sp)
 800ad90:	dcc00417 	ldw	r19,16(sp)
 800ad94:	dc800317 	ldw	r18,12(sp)
 800ad98:	dc400217 	ldw	r17,8(sp)
 800ad9c:	dc000117 	ldw	r16,4(sp)
 800ada0:	dec00804 	addi	sp,sp,32
 800ada4:	f800283a 	ret
 800ada8:	9809883a 	mov	r4,r19
 800adac:	29403fcc 	andi	r5,r5,255
 800adb0:	800d883a 	mov	r6,r16
 800adb4:	800ae580 	call	800ae58 <__swbuf_r>
 800adb8:	10bfffe0 	cmpeqi	r2,r2,-1
 800adbc:	10803fcc 	andi	r2,r2,255
 800adc0:	103fd626 	beq	r2,zero,800ad1c <__alt_data_end+0xfc00ad1c>
 800adc4:	00bfffc4 	movi	r2,-1
 800adc8:	003fee06 	br	800ad84 <__alt_data_end+0xfc00ad84>
 800adcc:	90ffffc4 	addi	r3,r18,-1
 800add0:	01003f84 	movi	r4,254
 800add4:	20ffbf36 	bltu	r4,r3,800acd4 <__alt_data_end+0xfc00acd4>
 800add8:	900b883a 	mov	r5,r18
 800addc:	dc800005 	stb	r18,0(sp)
 800ade0:	1029883a 	mov	r20,r2
 800ade4:	003fc506 	br	800acfc <__alt_data_end+0xfc00acfc>
 800ade8:	9809883a 	mov	r4,r19
 800adec:	a80b883a 	mov	r5,r21
 800adf0:	800d883a 	mov	r6,r16
 800adf4:	800ae580 	call	800ae58 <__swbuf_r>
 800adf8:	10bfffe0 	cmpeqi	r2,r2,-1
 800adfc:	003fef06 	br	800adbc <__alt_data_end+0xfc00adbc>

0800ae00 <fputwc>:
 800ae00:	defffc04 	addi	sp,sp,-16
 800ae04:	dc000115 	stw	r16,4(sp)
 800ae08:	04020074 	movhi	r16,2049
 800ae0c:	840f3204 	addi	r16,r16,15560
 800ae10:	dc400215 	stw	r17,8(sp)
 800ae14:	2023883a 	mov	r17,r4
 800ae18:	81000017 	ldw	r4,0(r16)
 800ae1c:	dfc00315 	stw	ra,12(sp)
 800ae20:	280d883a 	mov	r6,r5
 800ae24:	20000626 	beq	r4,zero,800ae40 <fputwc+0x40>
 800ae28:	20800e17 	ldw	r2,56(r4)
 800ae2c:	1000041e 	bne	r2,zero,800ae40 <fputwc+0x40>
 800ae30:	d9400015 	stw	r5,0(sp)
 800ae34:	80016ac0 	call	80016ac <__sinit>
 800ae38:	81000017 	ldw	r4,0(r16)
 800ae3c:	d9800017 	ldw	r6,0(sp)
 800ae40:	880b883a 	mov	r5,r17
 800ae44:	dfc00317 	ldw	ra,12(sp)
 800ae48:	dc400217 	ldw	r17,8(sp)
 800ae4c:	dc000117 	ldw	r16,4(sp)
 800ae50:	dec00404 	addi	sp,sp,16
 800ae54:	800ac7c1 	jmpi	800ac7c <_fputwc_r>

0800ae58 <__swbuf_r>:
 800ae58:	defffc04 	addi	sp,sp,-16
 800ae5c:	dc800215 	stw	r18,8(sp)
 800ae60:	dc400115 	stw	r17,4(sp)
 800ae64:	dc000015 	stw	r16,0(sp)
 800ae68:	dfc00315 	stw	ra,12(sp)
 800ae6c:	2025883a 	mov	r18,r4
 800ae70:	2823883a 	mov	r17,r5
 800ae74:	3021883a 	mov	r16,r6
 800ae78:	20000226 	beq	r4,zero,800ae84 <__swbuf_r+0x2c>
 800ae7c:	20800e17 	ldw	r2,56(r4)
 800ae80:	10004126 	beq	r2,zero,800af88 <__swbuf_r+0x130>
 800ae84:	80c00617 	ldw	r3,24(r16)
 800ae88:	8180030b 	ldhu	r6,12(r16)
 800ae8c:	80c00215 	stw	r3,8(r16)
 800ae90:	30c0020c 	andi	r3,r6,8
 800ae94:	18003526 	beq	r3,zero,800af6c <__swbuf_r+0x114>
 800ae98:	80c00417 	ldw	r3,16(r16)
 800ae9c:	18003326 	beq	r3,zero,800af6c <__swbuf_r+0x114>
 800aea0:	3088000c 	andi	r2,r6,8192
 800aea4:	8c403fcc 	andi	r17,r17,255
 800aea8:	10001726 	beq	r2,zero,800af08 <__swbuf_r+0xb0>
 800aeac:	80800017 	ldw	r2,0(r16)
 800aeb0:	81000517 	ldw	r4,20(r16)
 800aeb4:	10c7c83a 	sub	r3,r2,r3
 800aeb8:	19001d0e 	bge	r3,r4,800af30 <__swbuf_r+0xd8>
 800aebc:	18c00044 	addi	r3,r3,1
 800aec0:	81400217 	ldw	r5,8(r16)
 800aec4:	11000044 	addi	r4,r2,1
 800aec8:	81000015 	stw	r4,0(r16)
 800aecc:	297fffc4 	addi	r5,r5,-1
 800aed0:	81400215 	stw	r5,8(r16)
 800aed4:	14400005 	stb	r17,0(r2)
 800aed8:	80800517 	ldw	r2,20(r16)
 800aedc:	10c01d26 	beq	r2,r3,800af54 <__swbuf_r+0xfc>
 800aee0:	8080030b 	ldhu	r2,12(r16)
 800aee4:	1080004c 	andi	r2,r2,1
 800aee8:	1000181e 	bne	r2,zero,800af4c <__swbuf_r+0xf4>
 800aeec:	8805883a 	mov	r2,r17
 800aef0:	dfc00317 	ldw	ra,12(sp)
 800aef4:	dc800217 	ldw	r18,8(sp)
 800aef8:	dc400117 	ldw	r17,4(sp)
 800aefc:	dc000017 	ldw	r16,0(sp)
 800af00:	dec00404 	addi	sp,sp,16
 800af04:	f800283a 	ret
 800af08:	81001917 	ldw	r4,100(r16)
 800af0c:	00b7ffc4 	movi	r2,-8193
 800af10:	31880014 	ori	r6,r6,8192
 800af14:	2084703a 	and	r2,r4,r2
 800af18:	80801915 	stw	r2,100(r16)
 800af1c:	80800017 	ldw	r2,0(r16)
 800af20:	81000517 	ldw	r4,20(r16)
 800af24:	8180030d 	sth	r6,12(r16)
 800af28:	10c7c83a 	sub	r3,r2,r3
 800af2c:	193fe316 	blt	r3,r4,800aebc <__alt_data_end+0xfc00aebc>
 800af30:	9009883a 	mov	r4,r18
 800af34:	800b883a 	mov	r5,r16
 800af38:	80010f00 	call	80010f0 <_fflush_r>
 800af3c:	1000091e 	bne	r2,zero,800af64 <__swbuf_r+0x10c>
 800af40:	80800017 	ldw	r2,0(r16)
 800af44:	00c00044 	movi	r3,1
 800af48:	003fdd06 	br	800aec0 <__alt_data_end+0xfc00aec0>
 800af4c:	00800284 	movi	r2,10
 800af50:	88bfe61e 	bne	r17,r2,800aeec <__alt_data_end+0xfc00aeec>
 800af54:	9009883a 	mov	r4,r18
 800af58:	800b883a 	mov	r5,r16
 800af5c:	80010f00 	call	80010f0 <_fflush_r>
 800af60:	103fe226 	beq	r2,zero,800aeec <__alt_data_end+0xfc00aeec>
 800af64:	00bfffc4 	movi	r2,-1
 800af68:	003fe106 	br	800aef0 <__alt_data_end+0xfc00aef0>
 800af6c:	9009883a 	mov	r4,r18
 800af70:	800b883a 	mov	r5,r16
 800af74:	80059d00 	call	80059d0 <__swsetup_r>
 800af78:	1000051e 	bne	r2,zero,800af90 <__swbuf_r+0x138>
 800af7c:	8180030b 	ldhu	r6,12(r16)
 800af80:	80c00417 	ldw	r3,16(r16)
 800af84:	003fc606 	br	800aea0 <__alt_data_end+0xfc00aea0>
 800af88:	80016ac0 	call	80016ac <__sinit>
 800af8c:	003fbd06 	br	800ae84 <__alt_data_end+0xfc00ae84>
 800af90:	80c0030b 	ldhu	r3,12(r16)
 800af94:	00bfffc4 	movi	r2,-1
 800af98:	18c01014 	ori	r3,r3,64
 800af9c:	80c0030d 	sth	r3,12(r16)
 800afa0:	00c00244 	movi	r3,9
 800afa4:	90c00015 	stw	r3,0(r18)
 800afa8:	003fd106 	br	800aef0 <__alt_data_end+0xfc00aef0>

0800afac <__swbuf>:
 800afac:	00c20074 	movhi	r3,2049
 800afb0:	18cf3204 	addi	r3,r3,15560
 800afb4:	2005883a 	mov	r2,r4
 800afb8:	19000017 	ldw	r4,0(r3)
 800afbc:	280d883a 	mov	r6,r5
 800afc0:	100b883a 	mov	r5,r2
 800afc4:	800ae581 	jmpi	800ae58 <__swbuf_r>

0800afc8 <_wcrtomb_r>:
 800afc8:	defff604 	addi	sp,sp,-40
 800afcc:	00820074 	movhi	r2,2049
 800afd0:	dc800815 	stw	r18,32(sp)
 800afd4:	dc400715 	stw	r17,28(sp)
 800afd8:	dc000615 	stw	r16,24(sp)
 800afdc:	108f3704 	addi	r2,r2,15580
 800afe0:	dfc00915 	stw	ra,36(sp)
 800afe4:	2021883a 	mov	r16,r4
 800afe8:	3823883a 	mov	r17,r7
 800afec:	14800017 	ldw	r18,0(r2)
 800aff0:	28001426 	beq	r5,zero,800b044 <_wcrtomb_r+0x7c>
 800aff4:	d9400415 	stw	r5,16(sp)
 800aff8:	d9800515 	stw	r6,20(sp)
 800affc:	8007ab00 	call	8007ab0 <__locale_charset>
 800b000:	d9400417 	ldw	r5,16(sp)
 800b004:	d9800517 	ldw	r6,20(sp)
 800b008:	8009883a 	mov	r4,r16
 800b00c:	dc400015 	stw	r17,0(sp)
 800b010:	100f883a 	mov	r7,r2
 800b014:	903ee83a 	callr	r18
 800b018:	00ffffc4 	movi	r3,-1
 800b01c:	10c0031e 	bne	r2,r3,800b02c <_wcrtomb_r+0x64>
 800b020:	88000015 	stw	zero,0(r17)
 800b024:	00c02284 	movi	r3,138
 800b028:	80c00015 	stw	r3,0(r16)
 800b02c:	dfc00917 	ldw	ra,36(sp)
 800b030:	dc800817 	ldw	r18,32(sp)
 800b034:	dc400717 	ldw	r17,28(sp)
 800b038:	dc000617 	ldw	r16,24(sp)
 800b03c:	dec00a04 	addi	sp,sp,40
 800b040:	f800283a 	ret
 800b044:	8007ab00 	call	8007ab0 <__locale_charset>
 800b048:	8009883a 	mov	r4,r16
 800b04c:	dc400015 	stw	r17,0(sp)
 800b050:	d9400104 	addi	r5,sp,4
 800b054:	000d883a 	mov	r6,zero
 800b058:	100f883a 	mov	r7,r2
 800b05c:	903ee83a 	callr	r18
 800b060:	003fed06 	br	800b018 <__alt_data_end+0xfc00b018>

0800b064 <wcrtomb>:
 800b064:	defff504 	addi	sp,sp,-44
 800b068:	dc400515 	stw	r17,20(sp)
 800b06c:	dc000415 	stw	r16,16(sp)
 800b070:	dfc00a15 	stw	ra,40(sp)
 800b074:	dd400915 	stw	r21,36(sp)
 800b078:	dd000815 	stw	r20,32(sp)
 800b07c:	dcc00715 	stw	r19,28(sp)
 800b080:	dc800615 	stw	r18,24(sp)
 800b084:	2021883a 	mov	r16,r4
 800b088:	3023883a 	mov	r17,r6
 800b08c:	20001d26 	beq	r4,zero,800b104 <wcrtomb+0xa0>
 800b090:	04820074 	movhi	r18,2049
 800b094:	948f3204 	addi	r18,r18,15560
 800b098:	00820074 	movhi	r2,2049
 800b09c:	95400017 	ldw	r21,0(r18)
 800b0a0:	108f3704 	addi	r2,r2,15580
 800b0a4:	15000017 	ldw	r20,0(r2)
 800b0a8:	2827883a 	mov	r19,r5
 800b0ac:	8007ab00 	call	8007ab0 <__locale_charset>
 800b0b0:	a809883a 	mov	r4,r21
 800b0b4:	dc400015 	stw	r17,0(sp)
 800b0b8:	800b883a 	mov	r5,r16
 800b0bc:	980d883a 	mov	r6,r19
 800b0c0:	100f883a 	mov	r7,r2
 800b0c4:	a03ee83a 	callr	r20
 800b0c8:	00ffffc4 	movi	r3,-1
 800b0cc:	10c0041e 	bne	r2,r3,800b0e0 <wcrtomb+0x7c>
 800b0d0:	90c00017 	ldw	r3,0(r18)
 800b0d4:	01002284 	movi	r4,138
 800b0d8:	88000015 	stw	zero,0(r17)
 800b0dc:	19000015 	stw	r4,0(r3)
 800b0e0:	dfc00a17 	ldw	ra,40(sp)
 800b0e4:	dd400917 	ldw	r21,36(sp)
 800b0e8:	dd000817 	ldw	r20,32(sp)
 800b0ec:	dcc00717 	ldw	r19,28(sp)
 800b0f0:	dc800617 	ldw	r18,24(sp)
 800b0f4:	dc400517 	ldw	r17,20(sp)
 800b0f8:	dc000417 	ldw	r16,16(sp)
 800b0fc:	dec00b04 	addi	sp,sp,44
 800b100:	f800283a 	ret
 800b104:	04820074 	movhi	r18,2049
 800b108:	948f3204 	addi	r18,r18,15560
 800b10c:	00820074 	movhi	r2,2049
 800b110:	94c00017 	ldw	r19,0(r18)
 800b114:	108f3704 	addi	r2,r2,15580
 800b118:	14000017 	ldw	r16,0(r2)
 800b11c:	8007ab00 	call	8007ab0 <__locale_charset>
 800b120:	9809883a 	mov	r4,r19
 800b124:	dc400015 	stw	r17,0(sp)
 800b128:	d9400104 	addi	r5,sp,4
 800b12c:	000d883a 	mov	r6,zero
 800b130:	100f883a 	mov	r7,r2
 800b134:	803ee83a 	callr	r16
 800b138:	003fe306 	br	800b0c8 <__alt_data_end+0xfc00b0c8>

0800b13c <__ascii_wctomb>:
 800b13c:	28000526 	beq	r5,zero,800b154 <__ascii_wctomb+0x18>
 800b140:	00803fc4 	movi	r2,255
 800b144:	11800536 	bltu	r2,r6,800b15c <__ascii_wctomb+0x20>
 800b148:	29800005 	stb	r6,0(r5)
 800b14c:	00800044 	movi	r2,1
 800b150:	f800283a 	ret
 800b154:	0005883a 	mov	r2,zero
 800b158:	f800283a 	ret
 800b15c:	00802284 	movi	r2,138
 800b160:	20800015 	stw	r2,0(r4)
 800b164:	00bfffc4 	movi	r2,-1
 800b168:	f800283a 	ret

0800b16c <_wctomb_r>:
 800b16c:	00820074 	movhi	r2,2049
 800b170:	defff904 	addi	sp,sp,-28
 800b174:	108f3704 	addi	r2,r2,15580
 800b178:	dfc00615 	stw	ra,24(sp)
 800b17c:	dc400515 	stw	r17,20(sp)
 800b180:	dc000415 	stw	r16,16(sp)
 800b184:	3823883a 	mov	r17,r7
 800b188:	14000017 	ldw	r16,0(r2)
 800b18c:	d9000115 	stw	r4,4(sp)
 800b190:	d9400215 	stw	r5,8(sp)
 800b194:	d9800315 	stw	r6,12(sp)
 800b198:	8007ab00 	call	8007ab0 <__locale_charset>
 800b19c:	d9000117 	ldw	r4,4(sp)
 800b1a0:	d9400217 	ldw	r5,8(sp)
 800b1a4:	d9800317 	ldw	r6,12(sp)
 800b1a8:	dc400015 	stw	r17,0(sp)
 800b1ac:	100f883a 	mov	r7,r2
 800b1b0:	803ee83a 	callr	r16
 800b1b4:	dfc00617 	ldw	ra,24(sp)
 800b1b8:	dc400517 	ldw	r17,20(sp)
 800b1bc:	dc000417 	ldw	r16,16(sp)
 800b1c0:	dec00704 	addi	sp,sp,28
 800b1c4:	f800283a 	ret

0800b1c8 <__udivdi3>:
 800b1c8:	defff504 	addi	sp,sp,-44
 800b1cc:	dcc00415 	stw	r19,16(sp)
 800b1d0:	dc000115 	stw	r16,4(sp)
 800b1d4:	dfc00a15 	stw	ra,40(sp)
 800b1d8:	df000915 	stw	fp,36(sp)
 800b1dc:	ddc00815 	stw	r23,32(sp)
 800b1e0:	dd800715 	stw	r22,28(sp)
 800b1e4:	dd400615 	stw	r21,24(sp)
 800b1e8:	dd000515 	stw	r20,20(sp)
 800b1ec:	dc800315 	stw	r18,12(sp)
 800b1f0:	dc400215 	stw	r17,8(sp)
 800b1f4:	2027883a 	mov	r19,r4
 800b1f8:	2821883a 	mov	r16,r5
 800b1fc:	3800471e 	bne	r7,zero,800b31c <__udivdi3+0x154>
 800b200:	3025883a 	mov	r18,r6
 800b204:	2023883a 	mov	r17,r4
 800b208:	2980592e 	bgeu	r5,r6,800b370 <__udivdi3+0x1a8>
 800b20c:	00bfffd4 	movui	r2,65535
 800b210:	2829883a 	mov	r20,r5
 800b214:	1180b236 	bltu	r2,r6,800b4e0 <__udivdi3+0x318>
 800b218:	00803fc4 	movi	r2,255
 800b21c:	1181622e 	bgeu	r2,r6,800b7a8 <__udivdi3+0x5e0>
 800b220:	00800204 	movi	r2,8
 800b224:	1007883a 	mov	r3,r2
 800b228:	3084d83a 	srl	r2,r6,r2
 800b22c:	01020074 	movhi	r4,2049
 800b230:	21080504 	addi	r4,r4,8212
 800b234:	2085883a 	add	r2,r4,r2
 800b238:	11000003 	ldbu	r4,0(r2)
 800b23c:	20c9883a 	add	r4,r4,r3
 800b240:	00c00804 	movi	r3,32
 800b244:	1907c83a 	sub	r3,r3,r4
 800b248:	18000526 	beq	r3,zero,800b260 <__udivdi3+0x98>
 800b24c:	80e0983a 	sll	r16,r16,r3
 800b250:	9908d83a 	srl	r4,r19,r4
 800b254:	30e4983a 	sll	r18,r6,r3
 800b258:	98e2983a 	sll	r17,r19,r3
 800b25c:	8128b03a 	or	r20,r16,r4
 800b260:	902ad43a 	srli	r21,r18,16
 800b264:	a009883a 	mov	r4,r20
 800b268:	95bfffcc 	andi	r22,r18,65535
 800b26c:	a80b883a 	mov	r5,r21
 800b270:	800bf480 	call	800bf48 <__umodsi3>
 800b274:	a009883a 	mov	r4,r20
 800b278:	a80b883a 	mov	r5,r21
 800b27c:	102f883a 	mov	r23,r2
 800b280:	800bf400 	call	800bf40 <__udivsi3>
 800b284:	1009883a 	mov	r4,r2
 800b288:	b00b883a 	mov	r5,r22
 800b28c:	1021883a 	mov	r16,r2
 800b290:	800bf500 	call	800bf50 <__mulsi3>
 800b294:	b82e943a 	slli	r23,r23,16
 800b298:	8808d43a 	srli	r4,r17,16
 800b29c:	b906b03a 	or	r3,r23,r4
 800b2a0:	1880052e 	bgeu	r3,r2,800b2b8 <__udivdi3+0xf0>
 800b2a4:	1c87883a 	add	r3,r3,r18
 800b2a8:	813fffc4 	addi	r4,r16,-1
 800b2ac:	1c800136 	bltu	r3,r18,800b2b4 <__udivdi3+0xec>
 800b2b0:	18815236 	bltu	r3,r2,800b7fc <__udivdi3+0x634>
 800b2b4:	2021883a 	mov	r16,r4
 800b2b8:	18a7c83a 	sub	r19,r3,r2
 800b2bc:	9809883a 	mov	r4,r19
 800b2c0:	a80b883a 	mov	r5,r21
 800b2c4:	800bf480 	call	800bf48 <__umodsi3>
 800b2c8:	1029883a 	mov	r20,r2
 800b2cc:	9809883a 	mov	r4,r19
 800b2d0:	a80b883a 	mov	r5,r21
 800b2d4:	a028943a 	slli	r20,r20,16
 800b2d8:	800bf400 	call	800bf40 <__udivsi3>
 800b2dc:	1009883a 	mov	r4,r2
 800b2e0:	b00b883a 	mov	r5,r22
 800b2e4:	8c7fffcc 	andi	r17,r17,65535
 800b2e8:	1027883a 	mov	r19,r2
 800b2ec:	a462b03a 	or	r17,r20,r17
 800b2f0:	800bf500 	call	800bf50 <__mulsi3>
 800b2f4:	8880052e 	bgeu	r17,r2,800b30c <__udivdi3+0x144>
 800b2f8:	8ca3883a 	add	r17,r17,r18
 800b2fc:	98ffffc4 	addi	r3,r19,-1
 800b300:	8c811036 	bltu	r17,r18,800b744 <__udivdi3+0x57c>
 800b304:	88810f2e 	bgeu	r17,r2,800b744 <__udivdi3+0x57c>
 800b308:	9cffff84 	addi	r19,r19,-2
 800b30c:	8020943a 	slli	r16,r16,16
 800b310:	0007883a 	mov	r3,zero
 800b314:	9c04b03a 	or	r2,r19,r16
 800b318:	00006006 	br	800b49c <__udivdi3+0x2d4>
 800b31c:	29c05d36 	bltu	r5,r7,800b494 <__udivdi3+0x2cc>
 800b320:	00bfffd4 	movui	r2,65535
 800b324:	11c0692e 	bgeu	r2,r7,800b4cc <__udivdi3+0x304>
 800b328:	00804034 	movhi	r2,256
 800b32c:	10bfffc4 	addi	r2,r2,-1
 800b330:	11c10e2e 	bgeu	r2,r7,800b76c <__udivdi3+0x5a4>
 800b334:	01400604 	movi	r5,24
 800b338:	2811883a 	mov	r8,r5
 800b33c:	394ad83a 	srl	r5,r7,r5
 800b340:	00820074 	movhi	r2,2049
 800b344:	10880504 	addi	r2,r2,8212
 800b348:	114b883a 	add	r5,r2,r5
 800b34c:	29400003 	ldbu	r5,0(r5)
 800b350:	00c00804 	movi	r3,32
 800b354:	2a0b883a 	add	r5,r5,r8
 800b358:	196fc83a 	sub	r23,r3,r5
 800b35c:	b8006b1e 	bne	r23,zero,800b50c <__udivdi3+0x344>
 800b360:	3c011436 	bltu	r7,r16,800b7b4 <__udivdi3+0x5ec>
 800b364:	9985403a 	cmpgeu	r2,r19,r6
 800b368:	0007883a 	mov	r3,zero
 800b36c:	00004b06 	br	800b49c <__udivdi3+0x2d4>
 800b370:	3000041e 	bne	r6,zero,800b384 <__udivdi3+0x1bc>
 800b374:	01000044 	movi	r4,1
 800b378:	000b883a 	mov	r5,zero
 800b37c:	800bf400 	call	800bf40 <__udivsi3>
 800b380:	1025883a 	mov	r18,r2
 800b384:	00bfffd4 	movui	r2,65535
 800b388:	14805b2e 	bgeu	r2,r18,800b4f8 <__udivdi3+0x330>
 800b38c:	00804034 	movhi	r2,256
 800b390:	10bfffc4 	addi	r2,r2,-1
 800b394:	1480fe2e 	bgeu	r2,r18,800b790 <__udivdi3+0x5c8>
 800b398:	00800604 	movi	r2,24
 800b39c:	1007883a 	mov	r3,r2
 800b3a0:	9084d83a 	srl	r2,r18,r2
 800b3a4:	01020074 	movhi	r4,2049
 800b3a8:	21080504 	addi	r4,r4,8212
 800b3ac:	2085883a 	add	r2,r4,r2
 800b3b0:	11800003 	ldbu	r6,0(r2)
 800b3b4:	01c00804 	movi	r7,32
 800b3b8:	30c7883a 	add	r3,r6,r3
 800b3bc:	38cfc83a 	sub	r7,r7,r3
 800b3c0:	3800a71e 	bne	r7,zero,800b660 <__udivdi3+0x498>
 800b3c4:	9028d43a 	srli	r20,r18,16
 800b3c8:	84a1c83a 	sub	r16,r16,r18
 800b3cc:	957fffcc 	andi	r21,r18,65535
 800b3d0:	00c00044 	movi	r3,1
 800b3d4:	8009883a 	mov	r4,r16
 800b3d8:	a00b883a 	mov	r5,r20
 800b3dc:	d8c00015 	stw	r3,0(sp)
 800b3e0:	800bf480 	call	800bf48 <__umodsi3>
 800b3e4:	8009883a 	mov	r4,r16
 800b3e8:	a00b883a 	mov	r5,r20
 800b3ec:	102d883a 	mov	r22,r2
 800b3f0:	800bf400 	call	800bf40 <__udivsi3>
 800b3f4:	1009883a 	mov	r4,r2
 800b3f8:	a80b883a 	mov	r5,r21
 800b3fc:	1021883a 	mov	r16,r2
 800b400:	800bf500 	call	800bf50 <__mulsi3>
 800b404:	b02c943a 	slli	r22,r22,16
 800b408:	880ed43a 	srli	r7,r17,16
 800b40c:	d8c00017 	ldw	r3,0(sp)
 800b410:	b1ccb03a 	or	r6,r22,r7
 800b414:	3080052e 	bgeu	r6,r2,800b42c <__udivdi3+0x264>
 800b418:	348d883a 	add	r6,r6,r18
 800b41c:	813fffc4 	addi	r4,r16,-1
 800b420:	34800136 	bltu	r6,r18,800b428 <__udivdi3+0x260>
 800b424:	3080f236 	bltu	r6,r2,800b7f0 <__udivdi3+0x628>
 800b428:	2021883a 	mov	r16,r4
 800b42c:	30a7c83a 	sub	r19,r6,r2
 800b430:	9809883a 	mov	r4,r19
 800b434:	a00b883a 	mov	r5,r20
 800b438:	d8c00015 	stw	r3,0(sp)
 800b43c:	800bf480 	call	800bf48 <__umodsi3>
 800b440:	102d883a 	mov	r22,r2
 800b444:	9809883a 	mov	r4,r19
 800b448:	a00b883a 	mov	r5,r20
 800b44c:	b02c943a 	slli	r22,r22,16
 800b450:	800bf400 	call	800bf40 <__udivsi3>
 800b454:	1009883a 	mov	r4,r2
 800b458:	a80b883a 	mov	r5,r21
 800b45c:	8c7fffcc 	andi	r17,r17,65535
 800b460:	1027883a 	mov	r19,r2
 800b464:	b462b03a 	or	r17,r22,r17
 800b468:	800bf500 	call	800bf50 <__mulsi3>
 800b46c:	d8c00017 	ldw	r3,0(sp)
 800b470:	8880052e 	bgeu	r17,r2,800b488 <__udivdi3+0x2c0>
 800b474:	8ca3883a 	add	r17,r17,r18
 800b478:	993fffc4 	addi	r4,r19,-1
 800b47c:	8c80af36 	bltu	r17,r18,800b73c <__udivdi3+0x574>
 800b480:	8880ae2e 	bgeu	r17,r2,800b73c <__udivdi3+0x574>
 800b484:	9cffff84 	addi	r19,r19,-2
 800b488:	8020943a 	slli	r16,r16,16
 800b48c:	9c04b03a 	or	r2,r19,r16
 800b490:	00000206 	br	800b49c <__udivdi3+0x2d4>
 800b494:	0007883a 	mov	r3,zero
 800b498:	0005883a 	mov	r2,zero
 800b49c:	dfc00a17 	ldw	ra,40(sp)
 800b4a0:	df000917 	ldw	fp,36(sp)
 800b4a4:	ddc00817 	ldw	r23,32(sp)
 800b4a8:	dd800717 	ldw	r22,28(sp)
 800b4ac:	dd400617 	ldw	r21,24(sp)
 800b4b0:	dd000517 	ldw	r20,20(sp)
 800b4b4:	dcc00417 	ldw	r19,16(sp)
 800b4b8:	dc800317 	ldw	r18,12(sp)
 800b4bc:	dc400217 	ldw	r17,8(sp)
 800b4c0:	dc000117 	ldw	r16,4(sp)
 800b4c4:	dec00b04 	addi	sp,sp,44
 800b4c8:	f800283a 	ret
 800b4cc:	00803fc4 	movi	r2,255
 800b4d0:	11c0a92e 	bgeu	r2,r7,800b778 <__udivdi3+0x5b0>
 800b4d4:	01400204 	movi	r5,8
 800b4d8:	2811883a 	mov	r8,r5
 800b4dc:	003f9706 	br	800b33c <__alt_data_end+0xfc00b33c>
 800b4e0:	00804034 	movhi	r2,256
 800b4e4:	10bfffc4 	addi	r2,r2,-1
 800b4e8:	1180a62e 	bgeu	r2,r6,800b784 <__udivdi3+0x5bc>
 800b4ec:	00800604 	movi	r2,24
 800b4f0:	1007883a 	mov	r3,r2
 800b4f4:	003f4c06 	br	800b228 <__alt_data_end+0xfc00b228>
 800b4f8:	00803fc4 	movi	r2,255
 800b4fc:	1480a72e 	bgeu	r2,r18,800b79c <__udivdi3+0x5d4>
 800b500:	00800204 	movi	r2,8
 800b504:	1007883a 	mov	r3,r2
 800b508:	003fa506 	br	800b3a0 <__alt_data_end+0xfc00b3a0>
 800b50c:	3178d83a 	srl	fp,r6,r5
 800b510:	3dce983a 	sll	r7,r7,r23
 800b514:	8168d83a 	srl	r20,r16,r5
 800b518:	9950d83a 	srl	r8,r19,r5
 800b51c:	3f38b03a 	or	fp,r7,fp
 800b520:	e024d43a 	srli	r18,fp,16
 800b524:	85e0983a 	sll	r16,r16,r23
 800b528:	a009883a 	mov	r4,r20
 800b52c:	900b883a 	mov	r5,r18
 800b530:	8220b03a 	or	r16,r16,r8
 800b534:	35ea983a 	sll	r21,r6,r23
 800b538:	800bf480 	call	800bf48 <__umodsi3>
 800b53c:	a009883a 	mov	r4,r20
 800b540:	900b883a 	mov	r5,r18
 800b544:	1023883a 	mov	r17,r2
 800b548:	e5bfffcc 	andi	r22,fp,65535
 800b54c:	800bf400 	call	800bf40 <__udivsi3>
 800b550:	1009883a 	mov	r4,r2
 800b554:	b00b883a 	mov	r5,r22
 800b558:	1029883a 	mov	r20,r2
 800b55c:	800bf500 	call	800bf50 <__mulsi3>
 800b560:	8806943a 	slli	r3,r17,16
 800b564:	8014d43a 	srli	r10,r16,16
 800b568:	1a92b03a 	or	r9,r3,r10
 800b56c:	4880042e 	bgeu	r9,r2,800b580 <__udivdi3+0x3b8>
 800b570:	4f13883a 	add	r9,r9,fp
 800b574:	a0ffffc4 	addi	r3,r20,-1
 800b578:	4f00952e 	bgeu	r9,fp,800b7d0 <__udivdi3+0x608>
 800b57c:	1829883a 	mov	r20,r3
 800b580:	48a3c83a 	sub	r17,r9,r2
 800b584:	8809883a 	mov	r4,r17
 800b588:	900b883a 	mov	r5,r18
 800b58c:	800bf480 	call	800bf48 <__umodsi3>
 800b590:	8809883a 	mov	r4,r17
 800b594:	900b883a 	mov	r5,r18
 800b598:	d8800015 	stw	r2,0(sp)
 800b59c:	800bf400 	call	800bf40 <__udivsi3>
 800b5a0:	1009883a 	mov	r4,r2
 800b5a4:	b00b883a 	mov	r5,r22
 800b5a8:	1023883a 	mov	r17,r2
 800b5ac:	800bf500 	call	800bf50 <__mulsi3>
 800b5b0:	d8c00017 	ldw	r3,0(sp)
 800b5b4:	823fffcc 	andi	r8,r16,65535
 800b5b8:	1806943a 	slli	r3,r3,16
 800b5bc:	1a20b03a 	or	r16,r3,r8
 800b5c0:	8080042e 	bgeu	r16,r2,800b5d4 <__udivdi3+0x40c>
 800b5c4:	8721883a 	add	r16,r16,fp
 800b5c8:	88ffffc4 	addi	r3,r17,-1
 800b5cc:	87007c2e 	bgeu	r16,fp,800b7c0 <__udivdi3+0x5f8>
 800b5d0:	1823883a 	mov	r17,r3
 800b5d4:	a028943a 	slli	r20,r20,16
 800b5d8:	acbfffcc 	andi	r18,r21,65535
 800b5dc:	900b883a 	mov	r5,r18
 800b5e0:	8d28b03a 	or	r20,r17,r20
 800b5e4:	a022d43a 	srli	r17,r20,16
 800b5e8:	a5bfffcc 	andi	r22,r20,65535
 800b5ec:	b009883a 	mov	r4,r22
 800b5f0:	a82ad43a 	srli	r21,r21,16
 800b5f4:	80a1c83a 	sub	r16,r16,r2
 800b5f8:	800bf500 	call	800bf50 <__mulsi3>
 800b5fc:	8809883a 	mov	r4,r17
 800b600:	900b883a 	mov	r5,r18
 800b604:	1039883a 	mov	fp,r2
 800b608:	800bf500 	call	800bf50 <__mulsi3>
 800b60c:	8809883a 	mov	r4,r17
 800b610:	a80b883a 	mov	r5,r21
 800b614:	1025883a 	mov	r18,r2
 800b618:	800bf500 	call	800bf50 <__mulsi3>
 800b61c:	b009883a 	mov	r4,r22
 800b620:	a80b883a 	mov	r5,r21
 800b624:	1023883a 	mov	r17,r2
 800b628:	800bf500 	call	800bf50 <__mulsi3>
 800b62c:	e006d43a 	srli	r3,fp,16
 800b630:	9085883a 	add	r2,r18,r2
 800b634:	10c7883a 	add	r3,r2,r3
 800b638:	1c80022e 	bgeu	r3,r18,800b644 <__udivdi3+0x47c>
 800b63c:	00800074 	movhi	r2,1
 800b640:	88a3883a 	add	r17,r17,r2
 800b644:	1808d43a 	srli	r4,r3,16
 800b648:	8909883a 	add	r4,r17,r4
 800b64c:	81004436 	bltu	r16,r4,800b760 <__udivdi3+0x598>
 800b650:	81003e26 	beq	r16,r4,800b74c <__udivdi3+0x584>
 800b654:	a005883a 	mov	r2,r20
 800b658:	0007883a 	mov	r3,zero
 800b65c:	003f8f06 	br	800b49c <__alt_data_end+0xfc00b49c>
 800b660:	91e4983a 	sll	r18,r18,r7
 800b664:	80eed83a 	srl	r23,r16,r3
 800b668:	81cc983a 	sll	r6,r16,r7
 800b66c:	9028d43a 	srli	r20,r18,16
 800b670:	98c6d83a 	srl	r3,r19,r3
 800b674:	b809883a 	mov	r4,r23
 800b678:	a00b883a 	mov	r5,r20
 800b67c:	30ecb03a 	or	r22,r6,r3
 800b680:	99e2983a 	sll	r17,r19,r7
 800b684:	800bf480 	call	800bf48 <__umodsi3>
 800b688:	b809883a 	mov	r4,r23
 800b68c:	a00b883a 	mov	r5,r20
 800b690:	1021883a 	mov	r16,r2
 800b694:	957fffcc 	andi	r21,r18,65535
 800b698:	800bf400 	call	800bf40 <__udivsi3>
 800b69c:	a80b883a 	mov	r5,r21
 800b6a0:	1009883a 	mov	r4,r2
 800b6a4:	102f883a 	mov	r23,r2
 800b6a8:	800bf500 	call	800bf50 <__mulsi3>
 800b6ac:	8020943a 	slli	r16,r16,16
 800b6b0:	b00ad43a 	srli	r5,r22,16
 800b6b4:	814cb03a 	or	r6,r16,r5
 800b6b8:	3080062e 	bgeu	r6,r2,800b6d4 <__udivdi3+0x50c>
 800b6bc:	348d883a 	add	r6,r6,r18
 800b6c0:	b8ffffc4 	addi	r3,r23,-1
 800b6c4:	34804836 	bltu	r6,r18,800b7e8 <__udivdi3+0x620>
 800b6c8:	3080472e 	bgeu	r6,r2,800b7e8 <__udivdi3+0x620>
 800b6cc:	bdffff84 	addi	r23,r23,-2
 800b6d0:	348d883a 	add	r6,r6,r18
 800b6d4:	30a7c83a 	sub	r19,r6,r2
 800b6d8:	9809883a 	mov	r4,r19
 800b6dc:	a00b883a 	mov	r5,r20
 800b6e0:	800bf480 	call	800bf48 <__umodsi3>
 800b6e4:	9809883a 	mov	r4,r19
 800b6e8:	a00b883a 	mov	r5,r20
 800b6ec:	1039883a 	mov	fp,r2
 800b6f0:	800bf400 	call	800bf40 <__udivsi3>
 800b6f4:	1009883a 	mov	r4,r2
 800b6f8:	a80b883a 	mov	r5,r21
 800b6fc:	e038943a 	slli	fp,fp,16
 800b700:	1027883a 	mov	r19,r2
 800b704:	800bf500 	call	800bf50 <__mulsi3>
 800b708:	b1bfffcc 	andi	r6,r22,65535
 800b70c:	e18cb03a 	or	r6,fp,r6
 800b710:	3080062e 	bgeu	r6,r2,800b72c <__udivdi3+0x564>
 800b714:	348d883a 	add	r6,r6,r18
 800b718:	98ffffc4 	addi	r3,r19,-1
 800b71c:	34803036 	bltu	r6,r18,800b7e0 <__udivdi3+0x618>
 800b720:	30802f2e 	bgeu	r6,r2,800b7e0 <__udivdi3+0x618>
 800b724:	9cffff84 	addi	r19,r19,-2
 800b728:	348d883a 	add	r6,r6,r18
 800b72c:	b82e943a 	slli	r23,r23,16
 800b730:	30a1c83a 	sub	r16,r6,r2
 800b734:	9dc6b03a 	or	r3,r19,r23
 800b738:	003f2606 	br	800b3d4 <__alt_data_end+0xfc00b3d4>
 800b73c:	2027883a 	mov	r19,r4
 800b740:	003f5106 	br	800b488 <__alt_data_end+0xfc00b488>
 800b744:	1827883a 	mov	r19,r3
 800b748:	003ef006 	br	800b30c <__alt_data_end+0xfc00b30c>
 800b74c:	1808943a 	slli	r4,r3,16
 800b750:	9dc6983a 	sll	r3,r19,r23
 800b754:	e73fffcc 	andi	fp,fp,65535
 800b758:	2709883a 	add	r4,r4,fp
 800b75c:	193fbd2e 	bgeu	r3,r4,800b654 <__alt_data_end+0xfc00b654>
 800b760:	a0bfffc4 	addi	r2,r20,-1
 800b764:	0007883a 	mov	r3,zero
 800b768:	003f4c06 	br	800b49c <__alt_data_end+0xfc00b49c>
 800b76c:	01400404 	movi	r5,16
 800b770:	2811883a 	mov	r8,r5
 800b774:	003ef106 	br	800b33c <__alt_data_end+0xfc00b33c>
 800b778:	000b883a 	mov	r5,zero
 800b77c:	0011883a 	mov	r8,zero
 800b780:	003eee06 	br	800b33c <__alt_data_end+0xfc00b33c>
 800b784:	00800404 	movi	r2,16
 800b788:	1007883a 	mov	r3,r2
 800b78c:	003ea606 	br	800b228 <__alt_data_end+0xfc00b228>
 800b790:	00800404 	movi	r2,16
 800b794:	1007883a 	mov	r3,r2
 800b798:	003f0106 	br	800b3a0 <__alt_data_end+0xfc00b3a0>
 800b79c:	0005883a 	mov	r2,zero
 800b7a0:	0007883a 	mov	r3,zero
 800b7a4:	003efe06 	br	800b3a0 <__alt_data_end+0xfc00b3a0>
 800b7a8:	0005883a 	mov	r2,zero
 800b7ac:	0007883a 	mov	r3,zero
 800b7b0:	003e9d06 	br	800b228 <__alt_data_end+0xfc00b228>
 800b7b4:	0007883a 	mov	r3,zero
 800b7b8:	00800044 	movi	r2,1
 800b7bc:	003f3706 	br	800b49c <__alt_data_end+0xfc00b49c>
 800b7c0:	80bf832e 	bgeu	r16,r2,800b5d0 <__alt_data_end+0xfc00b5d0>
 800b7c4:	8c7fff84 	addi	r17,r17,-2
 800b7c8:	8721883a 	add	r16,r16,fp
 800b7cc:	003f8106 	br	800b5d4 <__alt_data_end+0xfc00b5d4>
 800b7d0:	48bf6a2e 	bgeu	r9,r2,800b57c <__alt_data_end+0xfc00b57c>
 800b7d4:	a53fff84 	addi	r20,r20,-2
 800b7d8:	4f13883a 	add	r9,r9,fp
 800b7dc:	003f6806 	br	800b580 <__alt_data_end+0xfc00b580>
 800b7e0:	1827883a 	mov	r19,r3
 800b7e4:	003fd106 	br	800b72c <__alt_data_end+0xfc00b72c>
 800b7e8:	182f883a 	mov	r23,r3
 800b7ec:	003fb906 	br	800b6d4 <__alt_data_end+0xfc00b6d4>
 800b7f0:	843fff84 	addi	r16,r16,-2
 800b7f4:	348d883a 	add	r6,r6,r18
 800b7f8:	003f0c06 	br	800b42c <__alt_data_end+0xfc00b42c>
 800b7fc:	843fff84 	addi	r16,r16,-2
 800b800:	1c87883a 	add	r3,r3,r18
 800b804:	003eac06 	br	800b2b8 <__alt_data_end+0xfc00b2b8>

0800b808 <__umoddi3>:
 800b808:	defff404 	addi	sp,sp,-48
 800b80c:	dd800815 	stw	r22,32(sp)
 800b810:	dc400315 	stw	r17,12(sp)
 800b814:	dc000215 	stw	r16,8(sp)
 800b818:	dfc00b15 	stw	ra,44(sp)
 800b81c:	df000a15 	stw	fp,40(sp)
 800b820:	ddc00915 	stw	r23,36(sp)
 800b824:	dd400715 	stw	r21,28(sp)
 800b828:	dd000615 	stw	r20,24(sp)
 800b82c:	dcc00515 	stw	r19,20(sp)
 800b830:	dc800415 	stw	r18,16(sp)
 800b834:	2021883a 	mov	r16,r4
 800b838:	2823883a 	mov	r17,r5
 800b83c:	282d883a 	mov	r22,r5
 800b840:	38003c1e 	bne	r7,zero,800b934 <__umoddi3+0x12c>
 800b844:	3027883a 	mov	r19,r6
 800b848:	2029883a 	mov	r20,r4
 800b84c:	2980522e 	bgeu	r5,r6,800b998 <__umoddi3+0x190>
 800b850:	00bfffd4 	movui	r2,65535
 800b854:	1180a436 	bltu	r2,r6,800bae8 <__umoddi3+0x2e0>
 800b858:	00803fc4 	movi	r2,255
 800b85c:	11815e2e 	bgeu	r2,r6,800bdd8 <__umoddi3+0x5d0>
 800b860:	01400204 	movi	r5,8
 800b864:	2805883a 	mov	r2,r5
 800b868:	314ad83a 	srl	r5,r6,r5
 800b86c:	00c20074 	movhi	r3,2049
 800b870:	18c80504 	addi	r3,r3,8212
 800b874:	194b883a 	add	r5,r3,r5
 800b878:	29000003 	ldbu	r4,0(r5)
 800b87c:	2089883a 	add	r4,r4,r2
 800b880:	00800804 	movi	r2,32
 800b884:	1105c83a 	sub	r2,r2,r4
 800b888:	10010c26 	beq	r2,zero,800bcbc <__umoddi3+0x4b4>
 800b88c:	88a2983a 	sll	r17,r17,r2
 800b890:	8108d83a 	srl	r4,r16,r4
 800b894:	30a6983a 	sll	r19,r6,r2
 800b898:	80a8983a 	sll	r20,r16,r2
 800b89c:	1025883a 	mov	r18,r2
 800b8a0:	892cb03a 	or	r22,r17,r4
 800b8a4:	9822d43a 	srli	r17,r19,16
 800b8a8:	b009883a 	mov	r4,r22
 800b8ac:	9d7fffcc 	andi	r21,r19,65535
 800b8b0:	880b883a 	mov	r5,r17
 800b8b4:	800bf480 	call	800bf48 <__umodsi3>
 800b8b8:	b009883a 	mov	r4,r22
 800b8bc:	880b883a 	mov	r5,r17
 800b8c0:	102f883a 	mov	r23,r2
 800b8c4:	800bf400 	call	800bf40 <__udivsi3>
 800b8c8:	1009883a 	mov	r4,r2
 800b8cc:	a80b883a 	mov	r5,r21
 800b8d0:	800bf500 	call	800bf50 <__mulsi3>
 800b8d4:	b82e943a 	slli	r23,r23,16
 800b8d8:	a008d43a 	srli	r4,r20,16
 800b8dc:	b906b03a 	or	r3,r23,r4
 800b8e0:	1880042e 	bgeu	r3,r2,800b8f4 <__umoddi3+0xec>
 800b8e4:	1cc7883a 	add	r3,r3,r19
 800b8e8:	1cc00236 	bltu	r3,r19,800b8f4 <__umoddi3+0xec>
 800b8ec:	1880012e 	bgeu	r3,r2,800b8f4 <__umoddi3+0xec>
 800b8f0:	1cc7883a 	add	r3,r3,r19
 800b8f4:	18a1c83a 	sub	r16,r3,r2
 800b8f8:	8009883a 	mov	r4,r16
 800b8fc:	880b883a 	mov	r5,r17
 800b900:	800bf480 	call	800bf48 <__umodsi3>
 800b904:	8009883a 	mov	r4,r16
 800b908:	880b883a 	mov	r5,r17
 800b90c:	102d883a 	mov	r22,r2
 800b910:	800bf400 	call	800bf40 <__udivsi3>
 800b914:	1009883a 	mov	r4,r2
 800b918:	a80b883a 	mov	r5,r21
 800b91c:	b02c943a 	slli	r22,r22,16
 800b920:	800bf500 	call	800bf50 <__mulsi3>
 800b924:	a13fffcc 	andi	r4,r20,65535
 800b928:	b106b03a 	or	r3,r22,r4
 800b92c:	1880572e 	bgeu	r3,r2,800ba8c <__umoddi3+0x284>
 800b930:	00005206 	br	800ba7c <__umoddi3+0x274>
 800b934:	29c05936 	bltu	r5,r7,800ba9c <__umoddi3+0x294>
 800b938:	00bfffd4 	movui	r2,65535
 800b93c:	11c0652e 	bgeu	r2,r7,800bad4 <__umoddi3+0x2cc>
 800b940:	00804034 	movhi	r2,256
 800b944:	10bfffc4 	addi	r2,r2,-1
 800b948:	11c1172e 	bgeu	r2,r7,800bda8 <__umoddi3+0x5a0>
 800b94c:	01400604 	movi	r5,24
 800b950:	282b883a 	mov	r21,r5
 800b954:	394ad83a 	srl	r5,r7,r5
 800b958:	00c20074 	movhi	r3,2049
 800b95c:	18c80504 	addi	r3,r3,8212
 800b960:	194b883a 	add	r5,r3,r5
 800b964:	28800003 	ldbu	r2,0(r5)
 800b968:	00c00804 	movi	r3,32
 800b96c:	156b883a 	add	r21,r2,r21
 800b970:	1d69c83a 	sub	r20,r3,r21
 800b974:	a000671e 	bne	r20,zero,800bb14 <__umoddi3+0x30c>
 800b978:	3c400136 	bltu	r7,r17,800b980 <__umoddi3+0x178>
 800b97c:	81812336 	bltu	r16,r6,800be0c <__umoddi3+0x604>
 800b980:	8185c83a 	sub	r2,r16,r6
 800b984:	89e3c83a 	sub	r17,r17,r7
 800b988:	8087803a 	cmpltu	r3,r16,r2
 800b98c:	88edc83a 	sub	r22,r17,r3
 800b990:	b007883a 	mov	r3,r22
 800b994:	00004306 	br	800baa4 <__umoddi3+0x29c>
 800b998:	3000041e 	bne	r6,zero,800b9ac <__umoddi3+0x1a4>
 800b99c:	01000044 	movi	r4,1
 800b9a0:	000b883a 	mov	r5,zero
 800b9a4:	800bf400 	call	800bf40 <__udivsi3>
 800b9a8:	1027883a 	mov	r19,r2
 800b9ac:	00bfffd4 	movui	r2,65535
 800b9b0:	14c0532e 	bgeu	r2,r19,800bb00 <__umoddi3+0x2f8>
 800b9b4:	00804034 	movhi	r2,256
 800b9b8:	10bfffc4 	addi	r2,r2,-1
 800b9bc:	14c1032e 	bgeu	r2,r19,800bdcc <__umoddi3+0x5c4>
 800b9c0:	00800604 	movi	r2,24
 800b9c4:	1007883a 	mov	r3,r2
 800b9c8:	9884d83a 	srl	r2,r19,r2
 800b9cc:	01020074 	movhi	r4,2049
 800b9d0:	21080504 	addi	r4,r4,8212
 800b9d4:	2085883a 	add	r2,r4,r2
 800b9d8:	11000003 	ldbu	r4,0(r2)
 800b9dc:	00800804 	movi	r2,32
 800b9e0:	20c7883a 	add	r3,r4,r3
 800b9e4:	10c5c83a 	sub	r2,r2,r3
 800b9e8:	1000b61e 	bne	r2,zero,800bcc4 <__umoddi3+0x4bc>
 800b9ec:	982ad43a 	srli	r21,r19,16
 800b9f0:	8ce3c83a 	sub	r17,r17,r19
 800b9f4:	9dbfffcc 	andi	r22,r19,65535
 800b9f8:	0025883a 	mov	r18,zero
 800b9fc:	8809883a 	mov	r4,r17
 800ba00:	a80b883a 	mov	r5,r21
 800ba04:	800bf480 	call	800bf48 <__umodsi3>
 800ba08:	8809883a 	mov	r4,r17
 800ba0c:	a80b883a 	mov	r5,r21
 800ba10:	102f883a 	mov	r23,r2
 800ba14:	800bf400 	call	800bf40 <__udivsi3>
 800ba18:	1009883a 	mov	r4,r2
 800ba1c:	b00b883a 	mov	r5,r22
 800ba20:	800bf500 	call	800bf50 <__mulsi3>
 800ba24:	b82e943a 	slli	r23,r23,16
 800ba28:	a008d43a 	srli	r4,r20,16
 800ba2c:	b906b03a 	or	r3,r23,r4
 800ba30:	1880032e 	bgeu	r3,r2,800ba40 <__umoddi3+0x238>
 800ba34:	1cc7883a 	add	r3,r3,r19
 800ba38:	1cc00136 	bltu	r3,r19,800ba40 <__umoddi3+0x238>
 800ba3c:	1880f136 	bltu	r3,r2,800be04 <__umoddi3+0x5fc>
 800ba40:	18a1c83a 	sub	r16,r3,r2
 800ba44:	8009883a 	mov	r4,r16
 800ba48:	a80b883a 	mov	r5,r21
 800ba4c:	800bf480 	call	800bf48 <__umodsi3>
 800ba50:	8009883a 	mov	r4,r16
 800ba54:	a80b883a 	mov	r5,r21
 800ba58:	1023883a 	mov	r17,r2
 800ba5c:	800bf400 	call	800bf40 <__udivsi3>
 800ba60:	1009883a 	mov	r4,r2
 800ba64:	b00b883a 	mov	r5,r22
 800ba68:	8822943a 	slli	r17,r17,16
 800ba6c:	800bf500 	call	800bf50 <__mulsi3>
 800ba70:	a13fffcc 	andi	r4,r20,65535
 800ba74:	8906b03a 	or	r3,r17,r4
 800ba78:	1880042e 	bgeu	r3,r2,800ba8c <__umoddi3+0x284>
 800ba7c:	1cc7883a 	add	r3,r3,r19
 800ba80:	1cc00236 	bltu	r3,r19,800ba8c <__umoddi3+0x284>
 800ba84:	1880012e 	bgeu	r3,r2,800ba8c <__umoddi3+0x284>
 800ba88:	1cc7883a 	add	r3,r3,r19
 800ba8c:	1887c83a 	sub	r3,r3,r2
 800ba90:	1c84d83a 	srl	r2,r3,r18
 800ba94:	0007883a 	mov	r3,zero
 800ba98:	00000206 	br	800baa4 <__umoddi3+0x29c>
 800ba9c:	2005883a 	mov	r2,r4
 800baa0:	2807883a 	mov	r3,r5
 800baa4:	dfc00b17 	ldw	ra,44(sp)
 800baa8:	df000a17 	ldw	fp,40(sp)
 800baac:	ddc00917 	ldw	r23,36(sp)
 800bab0:	dd800817 	ldw	r22,32(sp)
 800bab4:	dd400717 	ldw	r21,28(sp)
 800bab8:	dd000617 	ldw	r20,24(sp)
 800babc:	dcc00517 	ldw	r19,20(sp)
 800bac0:	dc800417 	ldw	r18,16(sp)
 800bac4:	dc400317 	ldw	r17,12(sp)
 800bac8:	dc000217 	ldw	r16,8(sp)
 800bacc:	dec00c04 	addi	sp,sp,48
 800bad0:	f800283a 	ret
 800bad4:	00803fc4 	movi	r2,255
 800bad8:	11c0b02e 	bgeu	r2,r7,800bd9c <__umoddi3+0x594>
 800badc:	01400204 	movi	r5,8
 800bae0:	282b883a 	mov	r21,r5
 800bae4:	003f9b06 	br	800b954 <__alt_data_end+0xfc00b954>
 800bae8:	00804034 	movhi	r2,256
 800baec:	10bfffc4 	addi	r2,r2,-1
 800baf0:	1180b02e 	bgeu	r2,r6,800bdb4 <__umoddi3+0x5ac>
 800baf4:	01400604 	movi	r5,24
 800baf8:	2805883a 	mov	r2,r5
 800bafc:	003f5a06 	br	800b868 <__alt_data_end+0xfc00b868>
 800bb00:	00803fc4 	movi	r2,255
 800bb04:	14c0ae2e 	bgeu	r2,r19,800bdc0 <__umoddi3+0x5b8>
 800bb08:	00800204 	movi	r2,8
 800bb0c:	1007883a 	mov	r3,r2
 800bb10:	003fad06 	br	800b9c8 <__alt_data_end+0xfc00b9c8>
 800bb14:	3d0a983a 	sll	r5,r7,r20
 800bb18:	356cd83a 	srl	r22,r6,r21
 800bb1c:	8d78d83a 	srl	fp,r17,r21
 800bb20:	8d10983a 	sll	r8,r17,r20
 800bb24:	2dacb03a 	or	r22,r5,r22
 800bb28:	b02ed43a 	srli	r23,r22,16
 800bb2c:	8564d83a 	srl	r18,r16,r21
 800bb30:	e009883a 	mov	r4,fp
 800bb34:	b80b883a 	mov	r5,r23
 800bb38:	44a4b03a 	or	r18,r8,r18
 800bb3c:	3526983a 	sll	r19,r6,r20
 800bb40:	800bf480 	call	800bf48 <__umodsi3>
 800bb44:	e009883a 	mov	r4,fp
 800bb48:	b80b883a 	mov	r5,r23
 800bb4c:	b47fffcc 	andi	r17,r22,65535
 800bb50:	d8800015 	stw	r2,0(sp)
 800bb54:	800bf400 	call	800bf40 <__udivsi3>
 800bb58:	1009883a 	mov	r4,r2
 800bb5c:	880b883a 	mov	r5,r17
 800bb60:	1039883a 	mov	fp,r2
 800bb64:	800bf500 	call	800bf50 <__mulsi3>
 800bb68:	d9800017 	ldw	r6,0(sp)
 800bb6c:	9008d43a 	srli	r4,r18,16
 800bb70:	8520983a 	sll	r16,r16,r20
 800bb74:	300c943a 	slli	r6,r6,16
 800bb78:	3106b03a 	or	r3,r6,r4
 800bb7c:	1880042e 	bgeu	r3,r2,800bb90 <__umoddi3+0x388>
 800bb80:	1d87883a 	add	r3,r3,r22
 800bb84:	e13fffc4 	addi	r4,fp,-1
 800bb88:	1d809a2e 	bgeu	r3,r22,800bdf4 <__umoddi3+0x5ec>
 800bb8c:	2039883a 	mov	fp,r4
 800bb90:	1887c83a 	sub	r3,r3,r2
 800bb94:	1809883a 	mov	r4,r3
 800bb98:	b80b883a 	mov	r5,r23
 800bb9c:	d8c00115 	stw	r3,4(sp)
 800bba0:	800bf480 	call	800bf48 <__umodsi3>
 800bba4:	d8c00117 	ldw	r3,4(sp)
 800bba8:	b80b883a 	mov	r5,r23
 800bbac:	d8800015 	stw	r2,0(sp)
 800bbb0:	1809883a 	mov	r4,r3
 800bbb4:	800bf400 	call	800bf40 <__udivsi3>
 800bbb8:	880b883a 	mov	r5,r17
 800bbbc:	1009883a 	mov	r4,r2
 800bbc0:	102f883a 	mov	r23,r2
 800bbc4:	800bf500 	call	800bf50 <__mulsi3>
 800bbc8:	d9800017 	ldw	r6,0(sp)
 800bbcc:	947fffcc 	andi	r17,r18,65535
 800bbd0:	300c943a 	slli	r6,r6,16
 800bbd4:	3464b03a 	or	r18,r6,r17
 800bbd8:	9080042e 	bgeu	r18,r2,800bbec <__umoddi3+0x3e4>
 800bbdc:	95a5883a 	add	r18,r18,r22
 800bbe0:	b8ffffc4 	addi	r3,r23,-1
 800bbe4:	95807f2e 	bgeu	r18,r22,800bde4 <__umoddi3+0x5dc>
 800bbe8:	182f883a 	mov	r23,r3
 800bbec:	e038943a 	slli	fp,fp,16
 800bbf0:	980cd43a 	srli	r6,r19,16
 800bbf4:	98ffffcc 	andi	r3,r19,65535
 800bbf8:	bf38b03a 	or	fp,r23,fp
 800bbfc:	e02ed43a 	srli	r23,fp,16
 800bc00:	e73fffcc 	andi	fp,fp,65535
 800bc04:	180b883a 	mov	r5,r3
 800bc08:	e009883a 	mov	r4,fp
 800bc0c:	d9800015 	stw	r6,0(sp)
 800bc10:	d8c00115 	stw	r3,4(sp)
 800bc14:	90a5c83a 	sub	r18,r18,r2
 800bc18:	800bf500 	call	800bf50 <__mulsi3>
 800bc1c:	d8c00117 	ldw	r3,4(sp)
 800bc20:	b809883a 	mov	r4,r23
 800bc24:	1023883a 	mov	r17,r2
 800bc28:	180b883a 	mov	r5,r3
 800bc2c:	800bf500 	call	800bf50 <__mulsi3>
 800bc30:	d9800017 	ldw	r6,0(sp)
 800bc34:	b809883a 	mov	r4,r23
 800bc38:	d8800115 	stw	r2,4(sp)
 800bc3c:	300b883a 	mov	r5,r6
 800bc40:	302f883a 	mov	r23,r6
 800bc44:	800bf500 	call	800bf50 <__mulsi3>
 800bc48:	e009883a 	mov	r4,fp
 800bc4c:	b80b883a 	mov	r5,r23
 800bc50:	d8800015 	stw	r2,0(sp)
 800bc54:	800bf500 	call	800bf50 <__mulsi3>
 800bc58:	d8c00117 	ldw	r3,4(sp)
 800bc5c:	880cd43a 	srli	r6,r17,16
 800bc60:	d9c00017 	ldw	r7,0(sp)
 800bc64:	1885883a 	add	r2,r3,r2
 800bc68:	118d883a 	add	r6,r2,r6
 800bc6c:	30c0022e 	bgeu	r6,r3,800bc78 <__umoddi3+0x470>
 800bc70:	00800074 	movhi	r2,1
 800bc74:	388f883a 	add	r7,r7,r2
 800bc78:	3006d43a 	srli	r3,r6,16
 800bc7c:	300c943a 	slli	r6,r6,16
 800bc80:	8c7fffcc 	andi	r17,r17,65535
 800bc84:	38c7883a 	add	r3,r7,r3
 800bc88:	3463883a 	add	r17,r6,r17
 800bc8c:	90c03d36 	bltu	r18,r3,800bd84 <__umoddi3+0x57c>
 800bc90:	90c06026 	beq	r18,r3,800be14 <__umoddi3+0x60c>
 800bc94:	90c9c83a 	sub	r4,r18,r3
 800bc98:	880f883a 	mov	r7,r17
 800bc9c:	81cfc83a 	sub	r7,r16,r7
 800bca0:	81c7803a 	cmpltu	r3,r16,r7
 800bca4:	20c7c83a 	sub	r3,r4,r3
 800bca8:	1d44983a 	sll	r2,r3,r21
 800bcac:	3d0ed83a 	srl	r7,r7,r20
 800bcb0:	1d06d83a 	srl	r3,r3,r20
 800bcb4:	11c4b03a 	or	r2,r2,r7
 800bcb8:	003f7a06 	br	800baa4 <__alt_data_end+0xfc00baa4>
 800bcbc:	0025883a 	mov	r18,zero
 800bcc0:	003ef806 	br	800b8a4 <__alt_data_end+0xfc00b8a4>
 800bcc4:	98a6983a 	sll	r19,r19,r2
 800bcc8:	88e8d83a 	srl	r20,r17,r3
 800bccc:	80c6d83a 	srl	r3,r16,r3
 800bcd0:	982ad43a 	srli	r21,r19,16
 800bcd4:	88a2983a 	sll	r17,r17,r2
 800bcd8:	a009883a 	mov	r4,r20
 800bcdc:	a80b883a 	mov	r5,r21
 800bce0:	88eeb03a 	or	r23,r17,r3
 800bce4:	1025883a 	mov	r18,r2
 800bce8:	800bf480 	call	800bf48 <__umodsi3>
 800bcec:	a009883a 	mov	r4,r20
 800bcf0:	a80b883a 	mov	r5,r21
 800bcf4:	1023883a 	mov	r17,r2
 800bcf8:	9dbfffcc 	andi	r22,r19,65535
 800bcfc:	800bf400 	call	800bf40 <__udivsi3>
 800bd00:	1009883a 	mov	r4,r2
 800bd04:	b00b883a 	mov	r5,r22
 800bd08:	800bf500 	call	800bf50 <__mulsi3>
 800bd0c:	8822943a 	slli	r17,r17,16
 800bd10:	b808d43a 	srli	r4,r23,16
 800bd14:	84a8983a 	sll	r20,r16,r18
 800bd18:	8906b03a 	or	r3,r17,r4
 800bd1c:	1880042e 	bgeu	r3,r2,800bd30 <__umoddi3+0x528>
 800bd20:	1cc7883a 	add	r3,r3,r19
 800bd24:	1cc00236 	bltu	r3,r19,800bd30 <__umoddi3+0x528>
 800bd28:	1880012e 	bgeu	r3,r2,800bd30 <__umoddi3+0x528>
 800bd2c:	1cc7883a 	add	r3,r3,r19
 800bd30:	18a1c83a 	sub	r16,r3,r2
 800bd34:	8009883a 	mov	r4,r16
 800bd38:	a80b883a 	mov	r5,r21
 800bd3c:	800bf480 	call	800bf48 <__umodsi3>
 800bd40:	8009883a 	mov	r4,r16
 800bd44:	a80b883a 	mov	r5,r21
 800bd48:	1039883a 	mov	fp,r2
 800bd4c:	800bf400 	call	800bf40 <__udivsi3>
 800bd50:	1009883a 	mov	r4,r2
 800bd54:	b00b883a 	mov	r5,r22
 800bd58:	800bf500 	call	800bf50 <__mulsi3>
 800bd5c:	e006943a 	slli	r3,fp,16
 800bd60:	b93fffcc 	andi	r4,r23,65535
 800bd64:	1906b03a 	or	r3,r3,r4
 800bd68:	1880042e 	bgeu	r3,r2,800bd7c <__umoddi3+0x574>
 800bd6c:	1cc7883a 	add	r3,r3,r19
 800bd70:	1cc00236 	bltu	r3,r19,800bd7c <__umoddi3+0x574>
 800bd74:	1880012e 	bgeu	r3,r2,800bd7c <__umoddi3+0x574>
 800bd78:	1cc7883a 	add	r3,r3,r19
 800bd7c:	18a3c83a 	sub	r17,r3,r2
 800bd80:	003f1e06 	br	800b9fc <__alt_data_end+0xfc00b9fc>
 800bd84:	8ccfc83a 	sub	r7,r17,r19
 800bd88:	1d89c83a 	sub	r4,r3,r22
 800bd8c:	89e3803a 	cmpltu	r17,r17,r7
 800bd90:	2463c83a 	sub	r17,r4,r17
 800bd94:	9449c83a 	sub	r4,r18,r17
 800bd98:	003fc006 	br	800bc9c <__alt_data_end+0xfc00bc9c>
 800bd9c:	000b883a 	mov	r5,zero
 800bda0:	002b883a 	mov	r21,zero
 800bda4:	003eeb06 	br	800b954 <__alt_data_end+0xfc00b954>
 800bda8:	01400404 	movi	r5,16
 800bdac:	282b883a 	mov	r21,r5
 800bdb0:	003ee806 	br	800b954 <__alt_data_end+0xfc00b954>
 800bdb4:	01400404 	movi	r5,16
 800bdb8:	2805883a 	mov	r2,r5
 800bdbc:	003eaa06 	br	800b868 <__alt_data_end+0xfc00b868>
 800bdc0:	0005883a 	mov	r2,zero
 800bdc4:	0007883a 	mov	r3,zero
 800bdc8:	003eff06 	br	800b9c8 <__alt_data_end+0xfc00b9c8>
 800bdcc:	00800404 	movi	r2,16
 800bdd0:	1007883a 	mov	r3,r2
 800bdd4:	003efc06 	br	800b9c8 <__alt_data_end+0xfc00b9c8>
 800bdd8:	000b883a 	mov	r5,zero
 800bddc:	0005883a 	mov	r2,zero
 800bde0:	003ea106 	br	800b868 <__alt_data_end+0xfc00b868>
 800bde4:	90bf802e 	bgeu	r18,r2,800bbe8 <__alt_data_end+0xfc00bbe8>
 800bde8:	bdffff84 	addi	r23,r23,-2
 800bdec:	95a5883a 	add	r18,r18,r22
 800bdf0:	003f7e06 	br	800bbec <__alt_data_end+0xfc00bbec>
 800bdf4:	18bf652e 	bgeu	r3,r2,800bb8c <__alt_data_end+0xfc00bb8c>
 800bdf8:	e73fff84 	addi	fp,fp,-2
 800bdfc:	1d87883a 	add	r3,r3,r22
 800be00:	003f6306 	br	800bb90 <__alt_data_end+0xfc00bb90>
 800be04:	1cc7883a 	add	r3,r3,r19
 800be08:	003f0d06 	br	800ba40 <__alt_data_end+0xfc00ba40>
 800be0c:	8005883a 	mov	r2,r16
 800be10:	003edf06 	br	800b990 <__alt_data_end+0xfc00b990>
 800be14:	847fdb36 	bltu	r16,r17,800bd84 <__alt_data_end+0xfc00bd84>
 800be18:	880f883a 	mov	r7,r17
 800be1c:	0009883a 	mov	r4,zero
 800be20:	003f9e06 	br	800bc9c <__alt_data_end+0xfc00bc9c>

0800be24 <udivmodsi4>:
 800be24:	2900182e 	bgeu	r5,r4,800be88 <udivmodsi4+0x64>
 800be28:	28001716 	blt	r5,zero,800be88 <udivmodsi4+0x64>
 800be2c:	00800804 	movi	r2,32
 800be30:	00c00044 	movi	r3,1
 800be34:	00000206 	br	800be40 <udivmodsi4+0x1c>
 800be38:	10001126 	beq	r2,zero,800be80 <udivmodsi4+0x5c>
 800be3c:	28000516 	blt	r5,zero,800be54 <udivmodsi4+0x30>
 800be40:	294b883a 	add	r5,r5,r5
 800be44:	10bfffc4 	addi	r2,r2,-1
 800be48:	18c7883a 	add	r3,r3,r3
 800be4c:	293ffa36 	bltu	r5,r4,800be38 <__alt_data_end+0xfc00be38>
 800be50:	18000b26 	beq	r3,zero,800be80 <udivmodsi4+0x5c>
 800be54:	0005883a 	mov	r2,zero
 800be58:	21400236 	bltu	r4,r5,800be64 <udivmodsi4+0x40>
 800be5c:	2149c83a 	sub	r4,r4,r5
 800be60:	10c4b03a 	or	r2,r2,r3
 800be64:	1806d07a 	srli	r3,r3,1
 800be68:	280ad07a 	srli	r5,r5,1
 800be6c:	183ffa1e 	bne	r3,zero,800be58 <__alt_data_end+0xfc00be58>
 800be70:	3000011e 	bne	r6,zero,800be78 <udivmodsi4+0x54>
 800be74:	f800283a 	ret
 800be78:	2005883a 	mov	r2,r4
 800be7c:	f800283a 	ret
 800be80:	0005883a 	mov	r2,zero
 800be84:	003ffa06 	br	800be70 <__alt_data_end+0xfc00be70>
 800be88:	00c00044 	movi	r3,1
 800be8c:	003ff106 	br	800be54 <__alt_data_end+0xfc00be54>

0800be90 <__divsi3>:
 800be90:	defffe04 	addi	sp,sp,-8
 800be94:	dfc00115 	stw	ra,4(sp)
 800be98:	dc000015 	stw	r16,0(sp)
 800be9c:	20000b16 	blt	r4,zero,800becc <__divsi3+0x3c>
 800bea0:	0021883a 	mov	r16,zero
 800bea4:	28000c16 	blt	r5,zero,800bed8 <__divsi3+0x48>
 800bea8:	000d883a 	mov	r6,zero
 800beac:	800be240 	call	800be24 <udivmodsi4>
 800beb0:	0407c83a 	sub	r3,zero,r16
 800beb4:	1884f03a 	xor	r2,r3,r2
 800beb8:	1405883a 	add	r2,r2,r16
 800bebc:	dfc00117 	ldw	ra,4(sp)
 800bec0:	dc000017 	ldw	r16,0(sp)
 800bec4:	dec00204 	addi	sp,sp,8
 800bec8:	f800283a 	ret
 800becc:	0109c83a 	sub	r4,zero,r4
 800bed0:	04000044 	movi	r16,1
 800bed4:	283ff40e 	bge	r5,zero,800bea8 <__alt_data_end+0xfc00bea8>
 800bed8:	014bc83a 	sub	r5,zero,r5
 800bedc:	8400005c 	xori	r16,r16,1
 800bee0:	003ff106 	br	800bea8 <__alt_data_end+0xfc00bea8>

0800bee4 <__modsi3>:
 800bee4:	defffd04 	addi	sp,sp,-12
 800bee8:	dfc00215 	stw	ra,8(sp)
 800beec:	dc400115 	stw	r17,4(sp)
 800bef0:	dc000015 	stw	r16,0(sp)
 800bef4:	20000c16 	blt	r4,zero,800bf28 <__modsi3+0x44>
 800bef8:	0023883a 	mov	r17,zero
 800befc:	0021883a 	mov	r16,zero
 800bf00:	28000d16 	blt	r5,zero,800bf38 <__modsi3+0x54>
 800bf04:	01800044 	movi	r6,1
 800bf08:	800be240 	call	800be24 <udivmodsi4>
 800bf0c:	1404f03a 	xor	r2,r2,r16
 800bf10:	8885883a 	add	r2,r17,r2
 800bf14:	dfc00217 	ldw	ra,8(sp)
 800bf18:	dc400117 	ldw	r17,4(sp)
 800bf1c:	dc000017 	ldw	r16,0(sp)
 800bf20:	dec00304 	addi	sp,sp,12
 800bf24:	f800283a 	ret
 800bf28:	0109c83a 	sub	r4,zero,r4
 800bf2c:	04400044 	movi	r17,1
 800bf30:	043fffc4 	movi	r16,-1
 800bf34:	283ff30e 	bge	r5,zero,800bf04 <__alt_data_end+0xfc00bf04>
 800bf38:	014bc83a 	sub	r5,zero,r5
 800bf3c:	003ff106 	br	800bf04 <__alt_data_end+0xfc00bf04>

0800bf40 <__udivsi3>:
 800bf40:	000d883a 	mov	r6,zero
 800bf44:	800be241 	jmpi	800be24 <udivmodsi4>

0800bf48 <__umodsi3>:
 800bf48:	01800044 	movi	r6,1
 800bf4c:	800be241 	jmpi	800be24 <udivmodsi4>

0800bf50 <__mulsi3>:
 800bf50:	0005883a 	mov	r2,zero
 800bf54:	20000726 	beq	r4,zero,800bf74 <__mulsi3+0x24>
 800bf58:	20c0004c 	andi	r3,r4,1
 800bf5c:	2008d07a 	srli	r4,r4,1
 800bf60:	18000126 	beq	r3,zero,800bf68 <__mulsi3+0x18>
 800bf64:	1145883a 	add	r2,r2,r5
 800bf68:	294b883a 	add	r5,r5,r5
 800bf6c:	203ffa1e 	bne	r4,zero,800bf58 <__alt_data_end+0xfc00bf58>
 800bf70:	f800283a 	ret
 800bf74:	f800283a 	ret

0800bf78 <__adddf3>:
 800bf78:	02000434 	movhi	r8,16
 800bf7c:	423fffc4 	addi	r8,r8,-1
 800bf80:	defffb04 	addi	sp,sp,-20
 800bf84:	2a12703a 	and	r9,r5,r8
 800bf88:	2806d7fa 	srli	r3,r5,31
 800bf8c:	3a10703a 	and	r8,r7,r8
 800bf90:	3804d53a 	srli	r2,r7,20
 800bf94:	3014d77a 	srli	r10,r6,29
 800bf98:	dc000015 	stw	r16,0(sp)
 800bf9c:	481290fa 	slli	r9,r9,3
 800bfa0:	2820d53a 	srli	r16,r5,20
 800bfa4:	401090fa 	slli	r8,r8,3
 800bfa8:	200ad77a 	srli	r5,r4,29
 800bfac:	380ed7fa 	srli	r7,r7,31
 800bfb0:	dc800215 	stw	r18,8(sp)
 800bfb4:	dc400115 	stw	r17,4(sp)
 800bfb8:	dfc00415 	stw	ra,16(sp)
 800bfbc:	dcc00315 	stw	r19,12(sp)
 800bfc0:	1c803fcc 	andi	r18,r3,255
 800bfc4:	8401ffcc 	andi	r16,r16,2047
 800bfc8:	494ab03a 	or	r5,r9,r5
 800bfcc:	202290fa 	slli	r17,r4,3
 800bfd0:	1081ffcc 	andi	r2,r2,2047
 800bfd4:	4290b03a 	or	r8,r8,r10
 800bfd8:	300c90fa 	slli	r6,r6,3
 800bfdc:	91c07026 	beq	r18,r7,800c1a0 <__adddf3+0x228>
 800bfe0:	8087c83a 	sub	r3,r16,r2
 800bfe4:	00c0b30e 	bge	zero,r3,800c2b4 <__adddf3+0x33c>
 800bfe8:	10002a1e 	bne	r2,zero,800c094 <__adddf3+0x11c>
 800bfec:	4184b03a 	or	r2,r8,r6
 800bff0:	1000991e 	bne	r2,zero,800c258 <__adddf3+0x2e0>
 800bff4:	888001cc 	andi	r2,r17,7
 800bff8:	10005b26 	beq	r2,zero,800c168 <__adddf3+0x1f0>
 800bffc:	88c003cc 	andi	r3,r17,15
 800c000:	00800104 	movi	r2,4
 800c004:	18805826 	beq	r3,r2,800c168 <__adddf3+0x1f0>
 800c008:	89800104 	addi	r6,r17,4
 800c00c:	3463803a 	cmpltu	r17,r6,r17
 800c010:	2c4b883a 	add	r5,r5,r17
 800c014:	2880202c 	andhi	r2,r5,128
 800c018:	9007883a 	mov	r3,r18
 800c01c:	3023883a 	mov	r17,r6
 800c020:	10005426 	beq	r2,zero,800c174 <__adddf3+0x1fc>
 800c024:	84000044 	addi	r16,r16,1
 800c028:	0081ffc4 	movi	r2,2047
 800c02c:	8080c126 	beq	r16,r2,800c334 <__adddf3+0x3bc>
 800c030:	013fe034 	movhi	r4,65408
 800c034:	213fffc4 	addi	r4,r4,-1
 800c038:	290a703a 	and	r5,r5,r4
 800c03c:	2804977a 	slli	r2,r5,29
 800c040:	280a927a 	slli	r5,r5,9
 800c044:	8822d0fa 	srli	r17,r17,3
 800c048:	8401ffcc 	andi	r16,r16,2047
 800c04c:	2808d33a 	srli	r4,r5,12
 800c050:	1444b03a 	or	r2,r2,r17
 800c054:	8401ffcc 	andi	r16,r16,2047
 800c058:	800a953a 	slli	r5,r16,20
 800c05c:	18c03fcc 	andi	r3,r3,255
 800c060:	04000434 	movhi	r16,16
 800c064:	180697fa 	slli	r3,r3,31
 800c068:	843fffc4 	addi	r16,r16,-1
 800c06c:	2420703a 	and	r16,r4,r16
 800c070:	8160b03a 	or	r16,r16,r5
 800c074:	80c6b03a 	or	r3,r16,r3
 800c078:	dfc00417 	ldw	ra,16(sp)
 800c07c:	dcc00317 	ldw	r19,12(sp)
 800c080:	dc800217 	ldw	r18,8(sp)
 800c084:	dc400117 	ldw	r17,4(sp)
 800c088:	dc000017 	ldw	r16,0(sp)
 800c08c:	dec00504 	addi	sp,sp,20
 800c090:	f800283a 	ret
 800c094:	0081ffc4 	movi	r2,2047
 800c098:	80bfd626 	beq	r16,r2,800bff4 <__alt_data_end+0xfc00bff4>
 800c09c:	42002034 	orhi	r8,r8,128
 800c0a0:	00800e04 	movi	r2,56
 800c0a4:	10c0a616 	blt	r2,r3,800c340 <__adddf3+0x3c8>
 800c0a8:	008007c4 	movi	r2,31
 800c0ac:	10c0c916 	blt	r2,r3,800c3d4 <__adddf3+0x45c>
 800c0b0:	00800804 	movi	r2,32
 800c0b4:	10c5c83a 	sub	r2,r2,r3
 800c0b8:	408e983a 	sll	r7,r8,r2
 800c0bc:	30c8d83a 	srl	r4,r6,r3
 800c0c0:	3084983a 	sll	r2,r6,r2
 800c0c4:	40c6d83a 	srl	r3,r8,r3
 800c0c8:	390cb03a 	or	r6,r7,r4
 800c0cc:	1004c03a 	cmpne	r2,r2,zero
 800c0d0:	308cb03a 	or	r6,r6,r2
 800c0d4:	898dc83a 	sub	r6,r17,r6
 800c0d8:	89a3803a 	cmpltu	r17,r17,r6
 800c0dc:	28cbc83a 	sub	r5,r5,r3
 800c0e0:	2c4bc83a 	sub	r5,r5,r17
 800c0e4:	3023883a 	mov	r17,r6
 800c0e8:	2880202c 	andhi	r2,r5,128
 800c0ec:	10006d26 	beq	r2,zero,800c2a4 <__adddf3+0x32c>
 800c0f0:	04c02034 	movhi	r19,128
 800c0f4:	9cffffc4 	addi	r19,r19,-1
 800c0f8:	2ce6703a 	and	r19,r5,r19
 800c0fc:	98007e26 	beq	r19,zero,800c2f8 <__adddf3+0x380>
 800c100:	9809883a 	mov	r4,r19
 800c104:	800e7100 	call	800e710 <__clzsi2>
 800c108:	10fffe04 	addi	r3,r2,-8
 800c10c:	010007c4 	movi	r4,31
 800c110:	20c07f16 	blt	r4,r3,800c310 <__adddf3+0x398>
 800c114:	01400a04 	movi	r5,40
 800c118:	2885c83a 	sub	r2,r5,r2
 800c11c:	888ad83a 	srl	r5,r17,r2
 800c120:	98e6983a 	sll	r19,r19,r3
 800c124:	88e2983a 	sll	r17,r17,r3
 800c128:	2ce6b03a 	or	r19,r5,r19
 800c12c:	1c007c16 	blt	r3,r16,800c320 <__adddf3+0x3a8>
 800c130:	1c21c83a 	sub	r16,r3,r16
 800c134:	81400044 	addi	r5,r16,1
 800c138:	00c007c4 	movi	r3,31
 800c13c:	19409816 	blt	r3,r5,800c3a0 <__adddf3+0x428>
 800c140:	1c21c83a 	sub	r16,r3,r16
 800c144:	8c08983a 	sll	r4,r17,r16
 800c148:	8946d83a 	srl	r3,r17,r5
 800c14c:	9c20983a 	sll	r16,r19,r16
 800c150:	2008c03a 	cmpne	r4,r4,zero
 800c154:	994ad83a 	srl	r5,r19,r5
 800c158:	1c06b03a 	or	r3,r3,r16
 800c15c:	1922b03a 	or	r17,r3,r4
 800c160:	0021883a 	mov	r16,zero
 800c164:	003fa306 	br	800bff4 <__alt_data_end+0xfc00bff4>
 800c168:	2880202c 	andhi	r2,r5,128
 800c16c:	9007883a 	mov	r3,r18
 800c170:	103fac1e 	bne	r2,zero,800c024 <__alt_data_end+0xfc00c024>
 800c174:	2804977a 	slli	r2,r5,29
 800c178:	8822d0fa 	srli	r17,r17,3
 800c17c:	0101ffc4 	movi	r4,2047
 800c180:	280ad0fa 	srli	r5,r5,3
 800c184:	1444b03a 	or	r2,r2,r17
 800c188:	81002c26 	beq	r16,r4,800c23c <__adddf3+0x2c4>
 800c18c:	8120703a 	and	r16,r16,r4
 800c190:	01000434 	movhi	r4,16
 800c194:	213fffc4 	addi	r4,r4,-1
 800c198:	2908703a 	and	r4,r5,r4
 800c19c:	003fad06 	br	800c054 <__alt_data_end+0xfc00c054>
 800c1a0:	8089c83a 	sub	r4,r16,r2
 800c1a4:	01006a0e 	bge	zero,r4,800c350 <__adddf3+0x3d8>
 800c1a8:	10003326 	beq	r2,zero,800c278 <__adddf3+0x300>
 800c1ac:	0081ffc4 	movi	r2,2047
 800c1b0:	80bf9026 	beq	r16,r2,800bff4 <__alt_data_end+0xfc00bff4>
 800c1b4:	42002034 	orhi	r8,r8,128
 800c1b8:	00800e04 	movi	r2,56
 800c1bc:	1100b116 	blt	r2,r4,800c484 <__adddf3+0x50c>
 800c1c0:	008007c4 	movi	r2,31
 800c1c4:	1100e216 	blt	r2,r4,800c550 <__adddf3+0x5d8>
 800c1c8:	00800804 	movi	r2,32
 800c1cc:	1105c83a 	sub	r2,r2,r4
 800c1d0:	4092983a 	sll	r9,r8,r2
 800c1d4:	310ed83a 	srl	r7,r6,r4
 800c1d8:	3084983a 	sll	r2,r6,r2
 800c1dc:	4110d83a 	srl	r8,r8,r4
 800c1e0:	49ccb03a 	or	r6,r9,r7
 800c1e4:	1004c03a 	cmpne	r2,r2,zero
 800c1e8:	308cb03a 	or	r6,r6,r2
 800c1ec:	344d883a 	add	r6,r6,r17
 800c1f0:	3463803a 	cmpltu	r17,r6,r17
 800c1f4:	414b883a 	add	r5,r8,r5
 800c1f8:	2c4b883a 	add	r5,r5,r17
 800c1fc:	3023883a 	mov	r17,r6
 800c200:	2880202c 	andhi	r2,r5,128
 800c204:	10002726 	beq	r2,zero,800c2a4 <__adddf3+0x32c>
 800c208:	84000044 	addi	r16,r16,1
 800c20c:	0081ffc4 	movi	r2,2047
 800c210:	8080ae26 	beq	r16,r2,800c4cc <__adddf3+0x554>
 800c214:	00bfe034 	movhi	r2,65408
 800c218:	10bfffc4 	addi	r2,r2,-1
 800c21c:	288a703a 	and	r5,r5,r2
 800c220:	880cd07a 	srli	r6,r17,1
 800c224:	280897fa 	slli	r4,r5,31
 800c228:	88c0004c 	andi	r3,r17,1
 800c22c:	30e2b03a 	or	r17,r6,r3
 800c230:	280ad07a 	srli	r5,r5,1
 800c234:	8922b03a 	or	r17,r17,r4
 800c238:	003f6e06 	br	800bff4 <__alt_data_end+0xfc00bff4>
 800c23c:	1148b03a 	or	r4,r2,r5
 800c240:	20003c26 	beq	r4,zero,800c334 <__adddf3+0x3bc>
 800c244:	29000234 	orhi	r4,r5,8
 800c248:	01400434 	movhi	r5,16
 800c24c:	297fffc4 	addi	r5,r5,-1
 800c250:	2148703a 	and	r4,r4,r5
 800c254:	003f7f06 	br	800c054 <__alt_data_end+0xfc00c054>
 800c258:	18ffffc4 	addi	r3,r3,-1
 800c25c:	18004d1e 	bne	r3,zero,800c394 <__adddf3+0x41c>
 800c260:	898dc83a 	sub	r6,r17,r6
 800c264:	89a3803a 	cmpltu	r17,r17,r6
 800c268:	2a0bc83a 	sub	r5,r5,r8
 800c26c:	2c4bc83a 	sub	r5,r5,r17
 800c270:	3023883a 	mov	r17,r6
 800c274:	003f9c06 	br	800c0e8 <__alt_data_end+0xfc00c0e8>
 800c278:	4184b03a 	or	r2,r8,r6
 800c27c:	103f5d26 	beq	r2,zero,800bff4 <__alt_data_end+0xfc00bff4>
 800c280:	213fffc4 	addi	r4,r4,-1
 800c284:	203fd926 	beq	r4,zero,800c1ec <__alt_data_end+0xfc00c1ec>
 800c288:	0081ffc4 	movi	r2,2047
 800c28c:	80bfca1e 	bne	r16,r2,800c1b8 <__alt_data_end+0xfc00c1b8>
 800c290:	003f5806 	br	800bff4 <__alt_data_end+0xfc00bff4>
 800c294:	10c8b03a 	or	r4,r2,r3
 800c298:	20008b26 	beq	r4,zero,800c4c8 <__adddf3+0x550>
 800c29c:	100b883a 	mov	r5,r2
 800c2a0:	1823883a 	mov	r17,r3
 800c2a4:	888001cc 	andi	r2,r17,7
 800c2a8:	103f541e 	bne	r2,zero,800bffc <__alt_data_end+0xfc00bffc>
 800c2ac:	9007883a 	mov	r3,r18
 800c2b0:	003fb006 	br	800c174 <__alt_data_end+0xfc00c174>
 800c2b4:	1800531e 	bne	r3,zero,800c404 <__adddf3+0x48c>
 800c2b8:	80800044 	addi	r2,r16,1
 800c2bc:	1081ffcc 	andi	r2,r2,2047
 800c2c0:	00c00044 	movi	r3,1
 800c2c4:	1880990e 	bge	r3,r2,800c52c <__adddf3+0x5b4>
 800c2c8:	8985c83a 	sub	r2,r17,r6
 800c2cc:	8887803a 	cmpltu	r3,r17,r2
 800c2d0:	2a27c83a 	sub	r19,r5,r8
 800c2d4:	98e7c83a 	sub	r19,r19,r3
 800c2d8:	98c0202c 	andhi	r3,r19,128
 800c2dc:	18006226 	beq	r3,zero,800c468 <__adddf3+0x4f0>
 800c2e0:	3463c83a 	sub	r17,r6,r17
 800c2e4:	4151c83a 	sub	r8,r8,r5
 800c2e8:	344d803a 	cmpltu	r6,r6,r17
 800c2ec:	41a7c83a 	sub	r19,r8,r6
 800c2f0:	3825883a 	mov	r18,r7
 800c2f4:	983f821e 	bne	r19,zero,800c100 <__alt_data_end+0xfc00c100>
 800c2f8:	8809883a 	mov	r4,r17
 800c2fc:	800e7100 	call	800e710 <__clzsi2>
 800c300:	10800804 	addi	r2,r2,32
 800c304:	10fffe04 	addi	r3,r2,-8
 800c308:	010007c4 	movi	r4,31
 800c30c:	20ff810e 	bge	r4,r3,800c114 <__alt_data_end+0xfc00c114>
 800c310:	14fff604 	addi	r19,r2,-40
 800c314:	8ce6983a 	sll	r19,r17,r19
 800c318:	0023883a 	mov	r17,zero
 800c31c:	1c3f840e 	bge	r3,r16,800c130 <__alt_data_end+0xfc00c130>
 800c320:	017fe034 	movhi	r5,65408
 800c324:	297fffc4 	addi	r5,r5,-1
 800c328:	80e1c83a 	sub	r16,r16,r3
 800c32c:	994a703a 	and	r5,r19,r5
 800c330:	003f3006 	br	800bff4 <__alt_data_end+0xfc00bff4>
 800c334:	0009883a 	mov	r4,zero
 800c338:	0005883a 	mov	r2,zero
 800c33c:	003f4506 	br	800c054 <__alt_data_end+0xfc00c054>
 800c340:	418cb03a 	or	r6,r8,r6
 800c344:	300cc03a 	cmpne	r6,r6,zero
 800c348:	0007883a 	mov	r3,zero
 800c34c:	003f6106 	br	800c0d4 <__alt_data_end+0xfc00c0d4>
 800c350:	2000921e 	bne	r4,zero,800c59c <__adddf3+0x624>
 800c354:	80800044 	addi	r2,r16,1
 800c358:	11c1ffcc 	andi	r7,r2,2047
 800c35c:	01000044 	movi	r4,1
 800c360:	21c0610e 	bge	r4,r7,800c4e8 <__adddf3+0x570>
 800c364:	0101ffc4 	movi	r4,2047
 800c368:	1100a326 	beq	r2,r4,800c5f8 <__adddf3+0x680>
 800c36c:	344d883a 	add	r6,r6,r17
 800c370:	3463803a 	cmpltu	r17,r6,r17
 800c374:	414b883a 	add	r5,r8,r5
 800c378:	2c4b883a 	add	r5,r5,r17
 800c37c:	282297fa 	slli	r17,r5,31
 800c380:	300cd07a 	srli	r6,r6,1
 800c384:	280ad07a 	srli	r5,r5,1
 800c388:	1021883a 	mov	r16,r2
 800c38c:	89a2b03a 	or	r17,r17,r6
 800c390:	003f1806 	br	800bff4 <__alt_data_end+0xfc00bff4>
 800c394:	0081ffc4 	movi	r2,2047
 800c398:	80bf411e 	bne	r16,r2,800c0a0 <__alt_data_end+0xfc00c0a0>
 800c39c:	003f1506 	br	800bff4 <__alt_data_end+0xfc00bff4>
 800c3a0:	80bff844 	addi	r2,r16,-31
 800c3a4:	00c00804 	movi	r3,32
 800c3a8:	9884d83a 	srl	r2,r19,r2
 800c3ac:	28c04a26 	beq	r5,r3,800c4d8 <__adddf3+0x560>
 800c3b0:	00c00fc4 	movi	r3,63
 800c3b4:	1c21c83a 	sub	r16,r3,r16
 800c3b8:	9c26983a 	sll	r19,r19,r16
 800c3bc:	9c62b03a 	or	r17,r19,r17
 800c3c0:	8822c03a 	cmpne	r17,r17,zero
 800c3c4:	88a2b03a 	or	r17,r17,r2
 800c3c8:	000b883a 	mov	r5,zero
 800c3cc:	0021883a 	mov	r16,zero
 800c3d0:	003fb406 	br	800c2a4 <__alt_data_end+0xfc00c2a4>
 800c3d4:	18bff804 	addi	r2,r3,-32
 800c3d8:	01000804 	movi	r4,32
 800c3dc:	4084d83a 	srl	r2,r8,r2
 800c3e0:	19003f26 	beq	r3,r4,800c4e0 <__adddf3+0x568>
 800c3e4:	01001004 	movi	r4,64
 800c3e8:	20c7c83a 	sub	r3,r4,r3
 800c3ec:	40d0983a 	sll	r8,r8,r3
 800c3f0:	418cb03a 	or	r6,r8,r6
 800c3f4:	300cc03a 	cmpne	r6,r6,zero
 800c3f8:	308cb03a 	or	r6,r6,r2
 800c3fc:	0007883a 	mov	r3,zero
 800c400:	003f3406 	br	800c0d4 <__alt_data_end+0xfc00c0d4>
 800c404:	80002326 	beq	r16,zero,800c494 <__adddf3+0x51c>
 800c408:	0101ffc4 	movi	r4,2047
 800c40c:	11005e26 	beq	r2,r4,800c588 <__adddf3+0x610>
 800c410:	00c7c83a 	sub	r3,zero,r3
 800c414:	29402034 	orhi	r5,r5,128
 800c418:	01000e04 	movi	r4,56
 800c41c:	20c07216 	blt	r4,r3,800c5e8 <__adddf3+0x670>
 800c420:	010007c4 	movi	r4,31
 800c424:	20c0ce16 	blt	r4,r3,800c760 <__adddf3+0x7e8>
 800c428:	01000804 	movi	r4,32
 800c42c:	20c9c83a 	sub	r4,r4,r3
 800c430:	2914983a 	sll	r10,r5,r4
 800c434:	88d2d83a 	srl	r9,r17,r3
 800c438:	8908983a 	sll	r4,r17,r4
 800c43c:	28c6d83a 	srl	r3,r5,r3
 800c440:	5262b03a 	or	r17,r10,r9
 800c444:	2008c03a 	cmpne	r4,r4,zero
 800c448:	8922b03a 	or	r17,r17,r4
 800c44c:	3463c83a 	sub	r17,r6,r17
 800c450:	40c7c83a 	sub	r3,r8,r3
 800c454:	344d803a 	cmpltu	r6,r6,r17
 800c458:	198bc83a 	sub	r5,r3,r6
 800c45c:	1021883a 	mov	r16,r2
 800c460:	3825883a 	mov	r18,r7
 800c464:	003f2006 	br	800c0e8 <__alt_data_end+0xfc00c0e8>
 800c468:	9886b03a 	or	r3,r19,r2
 800c46c:	1800141e 	bne	r3,zero,800c4c0 <__adddf3+0x548>
 800c470:	0007883a 	mov	r3,zero
 800c474:	000b883a 	mov	r5,zero
 800c478:	0023883a 	mov	r17,zero
 800c47c:	0021883a 	mov	r16,zero
 800c480:	003f3c06 	br	800c174 <__alt_data_end+0xfc00c174>
 800c484:	418cb03a 	or	r6,r8,r6
 800c488:	300cc03a 	cmpne	r6,r6,zero
 800c48c:	0011883a 	mov	r8,zero
 800c490:	003f5606 	br	800c1ec <__alt_data_end+0xfc00c1ec>
 800c494:	2c48b03a 	or	r4,r5,r17
 800c498:	20003b26 	beq	r4,zero,800c588 <__adddf3+0x610>
 800c49c:	00c6303a 	nor	r3,zero,r3
 800c4a0:	1800371e 	bne	r3,zero,800c580 <__adddf3+0x608>
 800c4a4:	3463c83a 	sub	r17,r6,r17
 800c4a8:	414bc83a 	sub	r5,r8,r5
 800c4ac:	344d803a 	cmpltu	r6,r6,r17
 800c4b0:	298bc83a 	sub	r5,r5,r6
 800c4b4:	1021883a 	mov	r16,r2
 800c4b8:	3825883a 	mov	r18,r7
 800c4bc:	003f0a06 	br	800c0e8 <__alt_data_end+0xfc00c0e8>
 800c4c0:	1023883a 	mov	r17,r2
 800c4c4:	003f0d06 	br	800c0fc <__alt_data_end+0xfc00c0fc>
 800c4c8:	0007883a 	mov	r3,zero
 800c4cc:	000b883a 	mov	r5,zero
 800c4d0:	0023883a 	mov	r17,zero
 800c4d4:	003f2706 	br	800c174 <__alt_data_end+0xfc00c174>
 800c4d8:	0027883a 	mov	r19,zero
 800c4dc:	003fb706 	br	800c3bc <__alt_data_end+0xfc00c3bc>
 800c4e0:	0011883a 	mov	r8,zero
 800c4e4:	003fc206 	br	800c3f0 <__alt_data_end+0xfc00c3f0>
 800c4e8:	2c44b03a 	or	r2,r5,r17
 800c4ec:	8000871e 	bne	r16,zero,800c70c <__adddf3+0x794>
 800c4f0:	1000b126 	beq	r2,zero,800c7b8 <__adddf3+0x840>
 800c4f4:	4184b03a 	or	r2,r8,r6
 800c4f8:	103ebe26 	beq	r2,zero,800bff4 <__alt_data_end+0xfc00bff4>
 800c4fc:	3445883a 	add	r2,r6,r17
 800c500:	1463803a 	cmpltu	r17,r2,r17
 800c504:	414b883a 	add	r5,r8,r5
 800c508:	2c4b883a 	add	r5,r5,r17
 800c50c:	28c0202c 	andhi	r3,r5,128
 800c510:	1023883a 	mov	r17,r2
 800c514:	183f6326 	beq	r3,zero,800c2a4 <__alt_data_end+0xfc00c2a4>
 800c518:	00bfe034 	movhi	r2,65408
 800c51c:	10bfffc4 	addi	r2,r2,-1
 800c520:	2021883a 	mov	r16,r4
 800c524:	288a703a 	and	r5,r5,r2
 800c528:	003eb206 	br	800bff4 <__alt_data_end+0xfc00bff4>
 800c52c:	2c44b03a 	or	r2,r5,r17
 800c530:	8000251e 	bne	r16,zero,800c5c8 <__adddf3+0x650>
 800c534:	10004b1e 	bne	r2,zero,800c664 <__adddf3+0x6ec>
 800c538:	4184b03a 	or	r2,r8,r6
 800c53c:	103fe226 	beq	r2,zero,800c4c8 <__alt_data_end+0xfc00c4c8>
 800c540:	400b883a 	mov	r5,r8
 800c544:	3023883a 	mov	r17,r6
 800c548:	3825883a 	mov	r18,r7
 800c54c:	003ea906 	br	800bff4 <__alt_data_end+0xfc00bff4>
 800c550:	20bff804 	addi	r2,r4,-32
 800c554:	01c00804 	movi	r7,32
 800c558:	4084d83a 	srl	r2,r8,r2
 800c55c:	21c07e26 	beq	r4,r7,800c758 <__adddf3+0x7e0>
 800c560:	01c01004 	movi	r7,64
 800c564:	3909c83a 	sub	r4,r7,r4
 800c568:	4110983a 	sll	r8,r8,r4
 800c56c:	418cb03a 	or	r6,r8,r6
 800c570:	300cc03a 	cmpne	r6,r6,zero
 800c574:	308cb03a 	or	r6,r6,r2
 800c578:	0011883a 	mov	r8,zero
 800c57c:	003f1b06 	br	800c1ec <__alt_data_end+0xfc00c1ec>
 800c580:	0101ffc4 	movi	r4,2047
 800c584:	113fa41e 	bne	r2,r4,800c418 <__alt_data_end+0xfc00c418>
 800c588:	400b883a 	mov	r5,r8
 800c58c:	3023883a 	mov	r17,r6
 800c590:	1021883a 	mov	r16,r2
 800c594:	3825883a 	mov	r18,r7
 800c598:	003e9606 	br	800bff4 <__alt_data_end+0xfc00bff4>
 800c59c:	80001a1e 	bne	r16,zero,800c608 <__adddf3+0x690>
 800c5a0:	2c4eb03a 	or	r7,r5,r17
 800c5a4:	38005526 	beq	r7,zero,800c6fc <__adddf3+0x784>
 800c5a8:	0108303a 	nor	r4,zero,r4
 800c5ac:	2000511e 	bne	r4,zero,800c6f4 <__adddf3+0x77c>
 800c5b0:	89a3883a 	add	r17,r17,r6
 800c5b4:	414b883a 	add	r5,r8,r5
 800c5b8:	898d803a 	cmpltu	r6,r17,r6
 800c5bc:	298b883a 	add	r5,r5,r6
 800c5c0:	1021883a 	mov	r16,r2
 800c5c4:	003f0e06 	br	800c200 <__alt_data_end+0xfc00c200>
 800c5c8:	1000341e 	bne	r2,zero,800c69c <__adddf3+0x724>
 800c5cc:	4184b03a 	or	r2,r8,r6
 800c5d0:	10006f26 	beq	r2,zero,800c790 <__adddf3+0x818>
 800c5d4:	400b883a 	mov	r5,r8
 800c5d8:	3023883a 	mov	r17,r6
 800c5dc:	3825883a 	mov	r18,r7
 800c5e0:	0401ffc4 	movi	r16,2047
 800c5e4:	003e8306 	br	800bff4 <__alt_data_end+0xfc00bff4>
 800c5e8:	2c62b03a 	or	r17,r5,r17
 800c5ec:	8822c03a 	cmpne	r17,r17,zero
 800c5f0:	0007883a 	mov	r3,zero
 800c5f4:	003f9506 	br	800c44c <__alt_data_end+0xfc00c44c>
 800c5f8:	1021883a 	mov	r16,r2
 800c5fc:	000b883a 	mov	r5,zero
 800c600:	0023883a 	mov	r17,zero
 800c604:	003edb06 	br	800c174 <__alt_data_end+0xfc00c174>
 800c608:	01c1ffc4 	movi	r7,2047
 800c60c:	11c03b26 	beq	r2,r7,800c6fc <__adddf3+0x784>
 800c610:	0109c83a 	sub	r4,zero,r4
 800c614:	29402034 	orhi	r5,r5,128
 800c618:	01c00e04 	movi	r7,56
 800c61c:	39006216 	blt	r7,r4,800c7a8 <__adddf3+0x830>
 800c620:	01c007c4 	movi	r7,31
 800c624:	39006b16 	blt	r7,r4,800c7d4 <__adddf3+0x85c>
 800c628:	01c00804 	movi	r7,32
 800c62c:	390fc83a 	sub	r7,r7,r4
 800c630:	29d4983a 	sll	r10,r5,r7
 800c634:	8912d83a 	srl	r9,r17,r4
 800c638:	89ce983a 	sll	r7,r17,r7
 800c63c:	2908d83a 	srl	r4,r5,r4
 800c640:	5262b03a 	or	r17,r10,r9
 800c644:	380ac03a 	cmpne	r5,r7,zero
 800c648:	8962b03a 	or	r17,r17,r5
 800c64c:	89a3883a 	add	r17,r17,r6
 800c650:	2211883a 	add	r8,r4,r8
 800c654:	898d803a 	cmpltu	r6,r17,r6
 800c658:	418b883a 	add	r5,r8,r6
 800c65c:	1021883a 	mov	r16,r2
 800c660:	003ee706 	br	800c200 <__alt_data_end+0xfc00c200>
 800c664:	4184b03a 	or	r2,r8,r6
 800c668:	103e6226 	beq	r2,zero,800bff4 <__alt_data_end+0xfc00bff4>
 800c66c:	8987c83a 	sub	r3,r17,r6
 800c670:	88c9803a 	cmpltu	r4,r17,r3
 800c674:	2a05c83a 	sub	r2,r5,r8
 800c678:	1105c83a 	sub	r2,r2,r4
 800c67c:	1100202c 	andhi	r4,r2,128
 800c680:	203f0426 	beq	r4,zero,800c294 <__alt_data_end+0xfc00c294>
 800c684:	3463c83a 	sub	r17,r6,r17
 800c688:	414bc83a 	sub	r5,r8,r5
 800c68c:	344d803a 	cmpltu	r6,r6,r17
 800c690:	298bc83a 	sub	r5,r5,r6
 800c694:	3825883a 	mov	r18,r7
 800c698:	003e5606 	br	800bff4 <__alt_data_end+0xfc00bff4>
 800c69c:	4184b03a 	or	r2,r8,r6
 800c6a0:	10002b26 	beq	r2,zero,800c750 <__adddf3+0x7d8>
 800c6a4:	2804d0fa 	srli	r2,r5,3
 800c6a8:	8822d0fa 	srli	r17,r17,3
 800c6ac:	280a977a 	slli	r5,r5,29
 800c6b0:	10c0022c 	andhi	r3,r2,8
 800c6b4:	2c62b03a 	or	r17,r5,r17
 800c6b8:	18000826 	beq	r3,zero,800c6dc <__adddf3+0x764>
 800c6bc:	4008d0fa 	srli	r4,r8,3
 800c6c0:	20c0022c 	andhi	r3,r4,8
 800c6c4:	1800051e 	bne	r3,zero,800c6dc <__adddf3+0x764>
 800c6c8:	300cd0fa 	srli	r6,r6,3
 800c6cc:	4010977a 	slli	r8,r8,29
 800c6d0:	2005883a 	mov	r2,r4
 800c6d4:	3825883a 	mov	r18,r7
 800c6d8:	41a2b03a 	or	r17,r8,r6
 800c6dc:	880ad77a 	srli	r5,r17,29
 800c6e0:	100490fa 	slli	r2,r2,3
 800c6e4:	882290fa 	slli	r17,r17,3
 800c6e8:	0401ffc4 	movi	r16,2047
 800c6ec:	288ab03a 	or	r5,r5,r2
 800c6f0:	003e4006 	br	800bff4 <__alt_data_end+0xfc00bff4>
 800c6f4:	01c1ffc4 	movi	r7,2047
 800c6f8:	11ffc71e 	bne	r2,r7,800c618 <__alt_data_end+0xfc00c618>
 800c6fc:	400b883a 	mov	r5,r8
 800c700:	3023883a 	mov	r17,r6
 800c704:	1021883a 	mov	r16,r2
 800c708:	003e3a06 	br	800bff4 <__alt_data_end+0xfc00bff4>
 800c70c:	10002d26 	beq	r2,zero,800c7c4 <__adddf3+0x84c>
 800c710:	4184b03a 	or	r2,r8,r6
 800c714:	10000e26 	beq	r2,zero,800c750 <__adddf3+0x7d8>
 800c718:	2804d0fa 	srli	r2,r5,3
 800c71c:	8822d0fa 	srli	r17,r17,3
 800c720:	280a977a 	slli	r5,r5,29
 800c724:	10c0022c 	andhi	r3,r2,8
 800c728:	2c62b03a 	or	r17,r5,r17
 800c72c:	183feb26 	beq	r3,zero,800c6dc <__alt_data_end+0xfc00c6dc>
 800c730:	4008d0fa 	srli	r4,r8,3
 800c734:	20c0022c 	andhi	r3,r4,8
 800c738:	183fe81e 	bne	r3,zero,800c6dc <__alt_data_end+0xfc00c6dc>
 800c73c:	300cd0fa 	srli	r6,r6,3
 800c740:	4010977a 	slli	r8,r8,29
 800c744:	2005883a 	mov	r2,r4
 800c748:	41a2b03a 	or	r17,r8,r6
 800c74c:	003fe306 	br	800c6dc <__alt_data_end+0xfc00c6dc>
 800c750:	0401ffc4 	movi	r16,2047
 800c754:	003e2706 	br	800bff4 <__alt_data_end+0xfc00bff4>
 800c758:	0011883a 	mov	r8,zero
 800c75c:	003f8306 	br	800c56c <__alt_data_end+0xfc00c56c>
 800c760:	193ff804 	addi	r4,r3,-32
 800c764:	02400804 	movi	r9,32
 800c768:	2908d83a 	srl	r4,r5,r4
 800c76c:	1a402526 	beq	r3,r9,800c804 <__adddf3+0x88c>
 800c770:	02401004 	movi	r9,64
 800c774:	48c7c83a 	sub	r3,r9,r3
 800c778:	28ca983a 	sll	r5,r5,r3
 800c77c:	2c62b03a 	or	r17,r5,r17
 800c780:	8822c03a 	cmpne	r17,r17,zero
 800c784:	8922b03a 	or	r17,r17,r4
 800c788:	0007883a 	mov	r3,zero
 800c78c:	003f2f06 	br	800c44c <__alt_data_end+0xfc00c44c>
 800c790:	01402034 	movhi	r5,128
 800c794:	0007883a 	mov	r3,zero
 800c798:	297fffc4 	addi	r5,r5,-1
 800c79c:	047ffe04 	movi	r17,-8
 800c7a0:	0401ffc4 	movi	r16,2047
 800c7a4:	003e7306 	br	800c174 <__alt_data_end+0xfc00c174>
 800c7a8:	2c62b03a 	or	r17,r5,r17
 800c7ac:	8822c03a 	cmpne	r17,r17,zero
 800c7b0:	0009883a 	mov	r4,zero
 800c7b4:	003fa506 	br	800c64c <__alt_data_end+0xfc00c64c>
 800c7b8:	400b883a 	mov	r5,r8
 800c7bc:	3023883a 	mov	r17,r6
 800c7c0:	003e0c06 	br	800bff4 <__alt_data_end+0xfc00bff4>
 800c7c4:	400b883a 	mov	r5,r8
 800c7c8:	3023883a 	mov	r17,r6
 800c7cc:	0401ffc4 	movi	r16,2047
 800c7d0:	003e0806 	br	800bff4 <__alt_data_end+0xfc00bff4>
 800c7d4:	21fff804 	addi	r7,r4,-32
 800c7d8:	02400804 	movi	r9,32
 800c7dc:	29ced83a 	srl	r7,r5,r7
 800c7e0:	22400a26 	beq	r4,r9,800c80c <__adddf3+0x894>
 800c7e4:	02401004 	movi	r9,64
 800c7e8:	4909c83a 	sub	r4,r9,r4
 800c7ec:	290a983a 	sll	r5,r5,r4
 800c7f0:	2c62b03a 	or	r17,r5,r17
 800c7f4:	8822c03a 	cmpne	r17,r17,zero
 800c7f8:	89e2b03a 	or	r17,r17,r7
 800c7fc:	0009883a 	mov	r4,zero
 800c800:	003f9206 	br	800c64c <__alt_data_end+0xfc00c64c>
 800c804:	000b883a 	mov	r5,zero
 800c808:	003fdc06 	br	800c77c <__alt_data_end+0xfc00c77c>
 800c80c:	000b883a 	mov	r5,zero
 800c810:	003ff706 	br	800c7f0 <__alt_data_end+0xfc00c7f0>

0800c814 <__divdf3>:
 800c814:	defff004 	addi	sp,sp,-64
 800c818:	dc800815 	stw	r18,32(sp)
 800c81c:	2824d53a 	srli	r18,r5,20
 800c820:	dd800c15 	stw	r22,48(sp)
 800c824:	282cd7fa 	srli	r22,r5,31
 800c828:	dc000615 	stw	r16,24(sp)
 800c82c:	04000434 	movhi	r16,16
 800c830:	df000e15 	stw	fp,56(sp)
 800c834:	dd000a15 	stw	r20,40(sp)
 800c838:	dcc00915 	stw	r19,36(sp)
 800c83c:	dc400715 	stw	r17,28(sp)
 800c840:	843fffc4 	addi	r16,r16,-1
 800c844:	dfc00f15 	stw	ra,60(sp)
 800c848:	ddc00d15 	stw	r23,52(sp)
 800c84c:	dd400b15 	stw	r21,44(sp)
 800c850:	9481ffcc 	andi	r18,r18,2047
 800c854:	2029883a 	mov	r20,r4
 800c858:	2027883a 	mov	r19,r4
 800c85c:	2c22703a 	and	r17,r5,r16
 800c860:	b7003fcc 	andi	fp,r22,255
 800c864:	90005e26 	beq	r18,zero,800c9e0 <__divdf3+0x1cc>
 800c868:	0081ffc4 	movi	r2,2047
 800c86c:	90803526 	beq	r18,r2,800c944 <__divdf3+0x130>
 800c870:	8c000434 	orhi	r16,r17,16
 800c874:	2004d77a 	srli	r2,r4,29
 800c878:	802090fa 	slli	r16,r16,3
 800c87c:	202690fa 	slli	r19,r4,3
 800c880:	94bf0044 	addi	r18,r18,-1023
 800c884:	80a2b03a 	or	r17,r16,r2
 800c888:	0029883a 	mov	r20,zero
 800c88c:	0011883a 	mov	r8,zero
 800c890:	380ad53a 	srli	r5,r7,20
 800c894:	382ed7fa 	srli	r23,r7,31
 800c898:	04000434 	movhi	r16,16
 800c89c:	843fffc4 	addi	r16,r16,-1
 800c8a0:	2941ffcc 	andi	r5,r5,2047
 800c8a4:	302b883a 	mov	r21,r6
 800c8a8:	3c20703a 	and	r16,r7,r16
 800c8ac:	ba403fcc 	andi	r9,r23,255
 800c8b0:	28006726 	beq	r5,zero,800ca50 <__divdf3+0x23c>
 800c8b4:	0081ffc4 	movi	r2,2047
 800c8b8:	28805f26 	beq	r5,r2,800ca38 <__divdf3+0x224>
 800c8bc:	84000434 	orhi	r16,r16,16
 800c8c0:	3004d77a 	srli	r2,r6,29
 800c8c4:	802090fa 	slli	r16,r16,3
 800c8c8:	302a90fa 	slli	r21,r6,3
 800c8cc:	297f0044 	addi	r5,r5,-1023
 800c8d0:	80a0b03a 	or	r16,r16,r2
 800c8d4:	000f883a 	mov	r7,zero
 800c8d8:	3d06b03a 	or	r3,r7,r20
 800c8dc:	180690ba 	slli	r3,r3,2
 800c8e0:	00820074 	movhi	r2,2049
 800c8e4:	10b24104 	addi	r2,r2,-14076
 800c8e8:	1885883a 	add	r2,r3,r2
 800c8ec:	10800017 	ldw	r2,0(r2)
 800c8f0:	b5c8f03a 	xor	r4,r22,r23
 800c8f4:	200d883a 	mov	r6,r4
 800c8f8:	25003fcc 	andi	r20,r4,255
 800c8fc:	9165c83a 	sub	r18,r18,r5
 800c900:	1000683a 	jmp	r2
 800c904:	0800cb4c 	andi	zero,at,813
 800c908:	0800c97c 	xorhi	zero,at,805
 800c90c:	0800cb10 	cmplti	zero,at,812
 800c910:	0800c960 	cmpeqi	zero,at,805
 800c914:	0800cb10 	cmplti	zero,at,812
 800c918:	0800cae4 	muli	zero,at,811
 800c91c:	0800cb10 	cmplti	zero,at,812
 800c920:	0800c960 	cmpeqi	zero,at,805
 800c924:	0800c97c 	xorhi	zero,at,805
 800c928:	0800c97c 	xorhi	zero,at,805
 800c92c:	0800cae4 	muli	zero,at,811
 800c930:	0800c960 	cmpeqi	zero,at,805
 800c934:	0800c970 	cmpltui	zero,at,805
 800c938:	0800c970 	cmpltui	zero,at,805
 800c93c:	0800c970 	cmpltui	zero,at,805
 800c940:	0800cb20 	cmpeqi	zero,at,812
 800c944:	8904b03a 	or	r2,r17,r4
 800c948:	1000631e 	bne	r2,zero,800cad8 <__divdf3+0x2c4>
 800c94c:	05000204 	movi	r20,8
 800c950:	0023883a 	mov	r17,zero
 800c954:	0027883a 	mov	r19,zero
 800c958:	02000084 	movi	r8,2
 800c95c:	003fcc06 	br	800c890 <__alt_data_end+0xfc00c890>
 800c960:	8023883a 	mov	r17,r16
 800c964:	a827883a 	mov	r19,r21
 800c968:	4839883a 	mov	fp,r9
 800c96c:	3811883a 	mov	r8,r7
 800c970:	00800084 	movi	r2,2
 800c974:	4081531e 	bne	r8,r2,800cec4 <__divdf3+0x6b0>
 800c978:	e029883a 	mov	r20,fp
 800c97c:	a180004c 	andi	r6,r20,1
 800c980:	0201ffc4 	movi	r8,2047
 800c984:	000b883a 	mov	r5,zero
 800c988:	0027883a 	mov	r19,zero
 800c98c:	4010953a 	slli	r8,r8,20
 800c990:	30c03fcc 	andi	r3,r6,255
 800c994:	04000434 	movhi	r16,16
 800c998:	180697fa 	slli	r3,r3,31
 800c99c:	843fffc4 	addi	r16,r16,-1
 800c9a0:	2c20703a 	and	r16,r5,r16
 800c9a4:	8220b03a 	or	r16,r16,r8
 800c9a8:	80c6b03a 	or	r3,r16,r3
 800c9ac:	9805883a 	mov	r2,r19
 800c9b0:	dfc00f17 	ldw	ra,60(sp)
 800c9b4:	df000e17 	ldw	fp,56(sp)
 800c9b8:	ddc00d17 	ldw	r23,52(sp)
 800c9bc:	dd800c17 	ldw	r22,48(sp)
 800c9c0:	dd400b17 	ldw	r21,44(sp)
 800c9c4:	dd000a17 	ldw	r20,40(sp)
 800c9c8:	dcc00917 	ldw	r19,36(sp)
 800c9cc:	dc800817 	ldw	r18,32(sp)
 800c9d0:	dc400717 	ldw	r17,28(sp)
 800c9d4:	dc000617 	ldw	r16,24(sp)
 800c9d8:	dec01004 	addi	sp,sp,64
 800c9dc:	f800283a 	ret
 800c9e0:	8904b03a 	or	r2,r17,r4
 800c9e4:	10003726 	beq	r2,zero,800cac4 <__divdf3+0x2b0>
 800c9e8:	88014d26 	beq	r17,zero,800cf20 <__divdf3+0x70c>
 800c9ec:	8809883a 	mov	r4,r17
 800c9f0:	d9800215 	stw	r6,8(sp)
 800c9f4:	d9c00515 	stw	r7,20(sp)
 800c9f8:	800e7100 	call	800e710 <__clzsi2>
 800c9fc:	d9800217 	ldw	r6,8(sp)
 800ca00:	d9c00517 	ldw	r7,20(sp)
 800ca04:	1007883a 	mov	r3,r2
 800ca08:	01000a04 	movi	r4,40
 800ca0c:	1cfffe04 	addi	r19,r3,-8
 800ca10:	20c9c83a 	sub	r4,r4,r3
 800ca14:	8cca983a 	sll	r5,r17,r19
 800ca18:	a108d83a 	srl	r4,r20,r4
 800ca1c:	a4e6983a 	sll	r19,r20,r19
 800ca20:	2162b03a 	or	r17,r4,r5
 800ca24:	04bf0344 	movi	r18,-1011
 800ca28:	90e5c83a 	sub	r18,r18,r3
 800ca2c:	0029883a 	mov	r20,zero
 800ca30:	0011883a 	mov	r8,zero
 800ca34:	003f9606 	br	800c890 <__alt_data_end+0xfc00c890>
 800ca38:	8184b03a 	or	r2,r16,r6
 800ca3c:	10001f1e 	bne	r2,zero,800cabc <__divdf3+0x2a8>
 800ca40:	0021883a 	mov	r16,zero
 800ca44:	002b883a 	mov	r21,zero
 800ca48:	01c00084 	movi	r7,2
 800ca4c:	003fa206 	br	800c8d8 <__alt_data_end+0xfc00c8d8>
 800ca50:	8184b03a 	or	r2,r16,r6
 800ca54:	10001526 	beq	r2,zero,800caac <__divdf3+0x298>
 800ca58:	80013d26 	beq	r16,zero,800cf50 <__divdf3+0x73c>
 800ca5c:	8009883a 	mov	r4,r16
 800ca60:	d9800215 	stw	r6,8(sp)
 800ca64:	da000315 	stw	r8,12(sp)
 800ca68:	da400415 	stw	r9,16(sp)
 800ca6c:	800e7100 	call	800e710 <__clzsi2>
 800ca70:	d9800217 	ldw	r6,8(sp)
 800ca74:	da000317 	ldw	r8,12(sp)
 800ca78:	da400417 	ldw	r9,16(sp)
 800ca7c:	1007883a 	mov	r3,r2
 800ca80:	01000a04 	movi	r4,40
 800ca84:	1d7ffe04 	addi	r21,r3,-8
 800ca88:	20c9c83a 	sub	r4,r4,r3
 800ca8c:	8560983a 	sll	r16,r16,r21
 800ca90:	3108d83a 	srl	r4,r6,r4
 800ca94:	356a983a 	sll	r21,r6,r21
 800ca98:	2420b03a 	or	r16,r4,r16
 800ca9c:	017f0344 	movi	r5,-1011
 800caa0:	28cbc83a 	sub	r5,r5,r3
 800caa4:	000f883a 	mov	r7,zero
 800caa8:	003f8b06 	br	800c8d8 <__alt_data_end+0xfc00c8d8>
 800caac:	0021883a 	mov	r16,zero
 800cab0:	002b883a 	mov	r21,zero
 800cab4:	01c00044 	movi	r7,1
 800cab8:	003f8706 	br	800c8d8 <__alt_data_end+0xfc00c8d8>
 800cabc:	01c000c4 	movi	r7,3
 800cac0:	003f8506 	br	800c8d8 <__alt_data_end+0xfc00c8d8>
 800cac4:	05000104 	movi	r20,4
 800cac8:	0023883a 	mov	r17,zero
 800cacc:	0027883a 	mov	r19,zero
 800cad0:	02000044 	movi	r8,1
 800cad4:	003f6e06 	br	800c890 <__alt_data_end+0xfc00c890>
 800cad8:	05000304 	movi	r20,12
 800cadc:	020000c4 	movi	r8,3
 800cae0:	003f6b06 	br	800c890 <__alt_data_end+0xfc00c890>
 800cae4:	01400434 	movhi	r5,16
 800cae8:	000d883a 	mov	r6,zero
 800caec:	297fffc4 	addi	r5,r5,-1
 800caf0:	04ffffc4 	movi	r19,-1
 800caf4:	0201ffc4 	movi	r8,2047
 800caf8:	003fa406 	br	800c98c <__alt_data_end+0xfc00c98c>
 800cafc:	043f0084 	movi	r16,-1022
 800cb00:	84a1c83a 	sub	r16,r16,r18
 800cb04:	00800e04 	movi	r2,56
 800cb08:	14014d0e 	bge	r2,r16,800d040 <__divdf3+0x82c>
 800cb0c:	a180004c 	andi	r6,r20,1
 800cb10:	0011883a 	mov	r8,zero
 800cb14:	000b883a 	mov	r5,zero
 800cb18:	0027883a 	mov	r19,zero
 800cb1c:	003f9b06 	br	800c98c <__alt_data_end+0xfc00c98c>
 800cb20:	8880022c 	andhi	r2,r17,8
 800cb24:	1000f026 	beq	r2,zero,800cee8 <__divdf3+0x6d4>
 800cb28:	8080022c 	andhi	r2,r16,8
 800cb2c:	1000ee1e 	bne	r2,zero,800cee8 <__divdf3+0x6d4>
 800cb30:	00800434 	movhi	r2,16
 800cb34:	81400234 	orhi	r5,r16,8
 800cb38:	10bfffc4 	addi	r2,r2,-1
 800cb3c:	b80d883a 	mov	r6,r23
 800cb40:	288a703a 	and	r5,r5,r2
 800cb44:	a827883a 	mov	r19,r21
 800cb48:	003fea06 	br	800caf4 <__alt_data_end+0xfc00caf4>
 800cb4c:	84411c36 	bltu	r16,r17,800cfc0 <__divdf3+0x7ac>
 800cb50:	8c011a26 	beq	r17,r16,800cfbc <__divdf3+0x7a8>
 800cb54:	94bfffc4 	addi	r18,r18,-1
 800cb58:	dcc00015 	stw	r19,0(sp)
 800cb5c:	8811883a 	mov	r8,r17
 800cb60:	002d883a 	mov	r22,zero
 800cb64:	a80cd63a 	srli	r6,r21,24
 800cb68:	8020923a 	slli	r16,r16,8
 800cb6c:	a82a923a 	slli	r21,r21,8
 800cb70:	4009883a 	mov	r4,r8
 800cb74:	342eb03a 	or	r23,r6,r16
 800cb78:	dd400115 	stw	r21,4(sp)
 800cb7c:	b82ad43a 	srli	r21,r23,16
 800cb80:	da000315 	stw	r8,12(sp)
 800cb84:	bcffffcc 	andi	r19,r23,65535
 800cb88:	a80b883a 	mov	r5,r21
 800cb8c:	800bf400 	call	800bf40 <__udivsi3>
 800cb90:	1009883a 	mov	r4,r2
 800cb94:	980b883a 	mov	r5,r19
 800cb98:	1023883a 	mov	r17,r2
 800cb9c:	800bf500 	call	800bf50 <__mulsi3>
 800cba0:	da000317 	ldw	r8,12(sp)
 800cba4:	a80b883a 	mov	r5,r21
 800cba8:	1039883a 	mov	fp,r2
 800cbac:	4009883a 	mov	r4,r8
 800cbb0:	800bf480 	call	800bf48 <__umodsi3>
 800cbb4:	d8c00017 	ldw	r3,0(sp)
 800cbb8:	1004943a 	slli	r2,r2,16
 800cbbc:	1810d43a 	srli	r8,r3,16
 800cbc0:	120eb03a 	or	r7,r2,r8
 800cbc4:	3f00062e 	bgeu	r7,fp,800cbe0 <__divdf3+0x3cc>
 800cbc8:	3dcf883a 	add	r7,r7,r23
 800cbcc:	88bfffc4 	addi	r2,r17,-1
 800cbd0:	3dc10a36 	bltu	r7,r23,800cffc <__divdf3+0x7e8>
 800cbd4:	3f01092e 	bgeu	r7,fp,800cffc <__divdf3+0x7e8>
 800cbd8:	8c7fff84 	addi	r17,r17,-2
 800cbdc:	3dcf883a 	add	r7,r7,r23
 800cbe0:	3f39c83a 	sub	fp,r7,fp
 800cbe4:	e009883a 	mov	r4,fp
 800cbe8:	a80b883a 	mov	r5,r21
 800cbec:	800bf400 	call	800bf40 <__udivsi3>
 800cbf0:	1009883a 	mov	r4,r2
 800cbf4:	980b883a 	mov	r5,r19
 800cbf8:	1021883a 	mov	r16,r2
 800cbfc:	800bf500 	call	800bf50 <__mulsi3>
 800cc00:	e009883a 	mov	r4,fp
 800cc04:	a80b883a 	mov	r5,r21
 800cc08:	d8800315 	stw	r2,12(sp)
 800cc0c:	800bf480 	call	800bf48 <__umodsi3>
 800cc10:	d9000017 	ldw	r4,0(sp)
 800cc14:	1004943a 	slli	r2,r2,16
 800cc18:	da000317 	ldw	r8,12(sp)
 800cc1c:	20ffffcc 	andi	r3,r4,65535
 800cc20:	10ceb03a 	or	r7,r2,r3
 800cc24:	3a00062e 	bgeu	r7,r8,800cc40 <__divdf3+0x42c>
 800cc28:	3dcf883a 	add	r7,r7,r23
 800cc2c:	80bfffc4 	addi	r2,r16,-1
 800cc30:	3dc0f036 	bltu	r7,r23,800cff4 <__divdf3+0x7e0>
 800cc34:	3a00ef2e 	bgeu	r7,r8,800cff4 <__divdf3+0x7e0>
 800cc38:	843fff84 	addi	r16,r16,-2
 800cc3c:	3dcf883a 	add	r7,r7,r23
 800cc40:	d8c00117 	ldw	r3,4(sp)
 800cc44:	8822943a 	slli	r17,r17,16
 800cc48:	3a0fc83a 	sub	r7,r7,r8
 800cc4c:	1806d43a 	srli	r3,r3,16
 800cc50:	8462b03a 	or	r17,r16,r17
 800cc54:	8affffcc 	andi	r11,r17,65535
 800cc58:	d8c00015 	stw	r3,0(sp)
 800cc5c:	d8c00117 	ldw	r3,4(sp)
 800cc60:	8820d43a 	srli	r16,r17,16
 800cc64:	5809883a 	mov	r4,r11
 800cc68:	1f3fffcc 	andi	fp,r3,65535
 800cc6c:	e00b883a 	mov	r5,fp
 800cc70:	d9c00515 	stw	r7,20(sp)
 800cc74:	dac00215 	stw	r11,8(sp)
 800cc78:	800bf500 	call	800bf50 <__mulsi3>
 800cc7c:	8009883a 	mov	r4,r16
 800cc80:	e00b883a 	mov	r5,fp
 800cc84:	d8800415 	stw	r2,16(sp)
 800cc88:	800bf500 	call	800bf50 <__mulsi3>
 800cc8c:	d9400017 	ldw	r5,0(sp)
 800cc90:	8009883a 	mov	r4,r16
 800cc94:	d8800315 	stw	r2,12(sp)
 800cc98:	800bf500 	call	800bf50 <__mulsi3>
 800cc9c:	dac00217 	ldw	r11,8(sp)
 800cca0:	d9400017 	ldw	r5,0(sp)
 800cca4:	d8800215 	stw	r2,8(sp)
 800cca8:	5809883a 	mov	r4,r11
 800ccac:	800bf500 	call	800bf50 <__mulsi3>
 800ccb0:	da400417 	ldw	r9,16(sp)
 800ccb4:	da800317 	ldw	r10,12(sp)
 800ccb8:	d9c00517 	ldw	r7,20(sp)
 800ccbc:	480ad43a 	srli	r5,r9,16
 800ccc0:	5085883a 	add	r2,r10,r2
 800ccc4:	db000217 	ldw	r12,8(sp)
 800ccc8:	1151883a 	add	r8,r2,r5
 800cccc:	4280022e 	bgeu	r8,r10,800ccd8 <__divdf3+0x4c4>
 800ccd0:	00800074 	movhi	r2,1
 800ccd4:	6099883a 	add	r12,r12,r2
 800ccd8:	400ad43a 	srli	r5,r8,16
 800ccdc:	4010943a 	slli	r8,r8,16
 800cce0:	4c3fffcc 	andi	r16,r9,65535
 800cce4:	6149883a 	add	r4,r12,r5
 800cce8:	4411883a 	add	r8,r8,r16
 800ccec:	3900a736 	bltu	r7,r4,800cf8c <__divdf3+0x778>
 800ccf0:	3900c426 	beq	r7,r4,800d004 <__divdf3+0x7f0>
 800ccf4:	3909c83a 	sub	r4,r7,r4
 800ccf8:	b221c83a 	sub	r16,r22,r8
 800ccfc:	b42d803a 	cmpltu	r22,r22,r16
 800cd00:	25adc83a 	sub	r22,r4,r22
 800cd04:	b5c0c626 	beq	r22,r23,800d020 <__divdf3+0x80c>
 800cd08:	b009883a 	mov	r4,r22
 800cd0c:	a80b883a 	mov	r5,r21
 800cd10:	800bf400 	call	800bf40 <__udivsi3>
 800cd14:	1009883a 	mov	r4,r2
 800cd18:	980b883a 	mov	r5,r19
 800cd1c:	d8800315 	stw	r2,12(sp)
 800cd20:	800bf500 	call	800bf50 <__mulsi3>
 800cd24:	a80b883a 	mov	r5,r21
 800cd28:	b009883a 	mov	r4,r22
 800cd2c:	d8800415 	stw	r2,16(sp)
 800cd30:	800bf480 	call	800bf48 <__umodsi3>
 800cd34:	1004943a 	slli	r2,r2,16
 800cd38:	800ed43a 	srli	r7,r16,16
 800cd3c:	da400417 	ldw	r9,16(sp)
 800cd40:	da000317 	ldw	r8,12(sp)
 800cd44:	11cab03a 	or	r5,r2,r7
 800cd48:	2a40062e 	bgeu	r5,r9,800cd64 <__divdf3+0x550>
 800cd4c:	2dcb883a 	add	r5,r5,r23
 800cd50:	40bfffc4 	addi	r2,r8,-1
 800cd54:	2dc0b436 	bltu	r5,r23,800d028 <__divdf3+0x814>
 800cd58:	2a40b32e 	bgeu	r5,r9,800d028 <__divdf3+0x814>
 800cd5c:	423fff84 	addi	r8,r8,-2
 800cd60:	2dcb883a 	add	r5,r5,r23
 800cd64:	2a6dc83a 	sub	r22,r5,r9
 800cd68:	b009883a 	mov	r4,r22
 800cd6c:	a80b883a 	mov	r5,r21
 800cd70:	da000315 	stw	r8,12(sp)
 800cd74:	800bf400 	call	800bf40 <__udivsi3>
 800cd78:	980b883a 	mov	r5,r19
 800cd7c:	1009883a 	mov	r4,r2
 800cd80:	d8800415 	stw	r2,16(sp)
 800cd84:	800bf500 	call	800bf50 <__mulsi3>
 800cd88:	b009883a 	mov	r4,r22
 800cd8c:	a80b883a 	mov	r5,r21
 800cd90:	1027883a 	mov	r19,r2
 800cd94:	800bf480 	call	800bf48 <__umodsi3>
 800cd98:	1004943a 	slli	r2,r2,16
 800cd9c:	843fffcc 	andi	r16,r16,65535
 800cda0:	da000317 	ldw	r8,12(sp)
 800cda4:	140eb03a 	or	r7,r2,r16
 800cda8:	da400417 	ldw	r9,16(sp)
 800cdac:	3cc0062e 	bgeu	r7,r19,800cdc8 <__divdf3+0x5b4>
 800cdb0:	3dcf883a 	add	r7,r7,r23
 800cdb4:	48bfffc4 	addi	r2,r9,-1
 800cdb8:	3dc09d36 	bltu	r7,r23,800d030 <__divdf3+0x81c>
 800cdbc:	3cc09c2e 	bgeu	r7,r19,800d030 <__divdf3+0x81c>
 800cdc0:	4a7fff84 	addi	r9,r9,-2
 800cdc4:	3dcf883a 	add	r7,r7,r23
 800cdc8:	4010943a 	slli	r8,r8,16
 800cdcc:	3cebc83a 	sub	r21,r7,r19
 800cdd0:	e00b883a 	mov	r5,fp
 800cdd4:	4a26b03a 	or	r19,r9,r8
 800cdd8:	99ffffcc 	andi	r7,r19,65535
 800cddc:	9820d43a 	srli	r16,r19,16
 800cde0:	3809883a 	mov	r4,r7
 800cde4:	d9c00515 	stw	r7,20(sp)
 800cde8:	800bf500 	call	800bf50 <__mulsi3>
 800cdec:	8009883a 	mov	r4,r16
 800cdf0:	e00b883a 	mov	r5,fp
 800cdf4:	102d883a 	mov	r22,r2
 800cdf8:	800bf500 	call	800bf50 <__mulsi3>
 800cdfc:	d9400017 	ldw	r5,0(sp)
 800ce00:	8009883a 	mov	r4,r16
 800ce04:	1039883a 	mov	fp,r2
 800ce08:	800bf500 	call	800bf50 <__mulsi3>
 800ce0c:	d9c00517 	ldw	r7,20(sp)
 800ce10:	d9400017 	ldw	r5,0(sp)
 800ce14:	1021883a 	mov	r16,r2
 800ce18:	3809883a 	mov	r4,r7
 800ce1c:	800bf500 	call	800bf50 <__mulsi3>
 800ce20:	b008d43a 	srli	r4,r22,16
 800ce24:	e085883a 	add	r2,fp,r2
 800ce28:	1109883a 	add	r4,r2,r4
 800ce2c:	2700022e 	bgeu	r4,fp,800ce38 <__divdf3+0x624>
 800ce30:	00800074 	movhi	r2,1
 800ce34:	80a1883a 	add	r16,r16,r2
 800ce38:	200ad43a 	srli	r5,r4,16
 800ce3c:	2008943a 	slli	r4,r4,16
 800ce40:	b5bfffcc 	andi	r22,r22,65535
 800ce44:	8145883a 	add	r2,r16,r5
 800ce48:	2589883a 	add	r4,r4,r22
 800ce4c:	a8802c36 	bltu	r21,r2,800cf00 <__divdf3+0x6ec>
 800ce50:	a880a426 	beq	r21,r2,800d0e4 <__divdf3+0x8d0>
 800ce54:	9cc00054 	ori	r19,r19,1
 800ce58:	9200ffc4 	addi	r8,r18,1023
 800ce5c:	023f270e 	bge	zero,r8,800cafc <__alt_data_end+0xfc00cafc>
 800ce60:	988001cc 	andi	r2,r19,7
 800ce64:	10000726 	beq	r2,zero,800ce84 <__divdf3+0x670>
 800ce68:	990003cc 	andi	r4,r19,15
 800ce6c:	00800104 	movi	r2,4
 800ce70:	20800426 	beq	r4,r2,800ce84 <__divdf3+0x670>
 800ce74:	9885883a 	add	r2,r19,r2
 800ce78:	14e7803a 	cmpltu	r19,r2,r19
 800ce7c:	8ce3883a 	add	r17,r17,r19
 800ce80:	1027883a 	mov	r19,r2
 800ce84:	8880402c 	andhi	r2,r17,256
 800ce88:	10000426 	beq	r2,zero,800ce9c <__divdf3+0x688>
 800ce8c:	00bfc034 	movhi	r2,65280
 800ce90:	10bfffc4 	addi	r2,r2,-1
 800ce94:	92010004 	addi	r8,r18,1024
 800ce98:	88a2703a 	and	r17,r17,r2
 800ce9c:	0081ff84 	movi	r2,2046
 800cea0:	123eb616 	blt	r2,r8,800c97c <__alt_data_end+0xfc00c97c>
 800cea4:	9826d0fa 	srli	r19,r19,3
 800cea8:	8804977a 	slli	r2,r17,29
 800ceac:	8820927a 	slli	r16,r17,9
 800ceb0:	4201ffcc 	andi	r8,r8,2047
 800ceb4:	14e6b03a 	or	r19,r2,r19
 800ceb8:	800ad33a 	srli	r5,r16,12
 800cebc:	a180004c 	andi	r6,r20,1
 800cec0:	003eb206 	br	800c98c <__alt_data_end+0xfc00c98c>
 800cec4:	008000c4 	movi	r2,3
 800cec8:	4080ac26 	beq	r8,r2,800d17c <__divdf3+0x968>
 800cecc:	00800044 	movi	r2,1
 800ced0:	4080591e 	bne	r8,r2,800d038 <__divdf3+0x824>
 800ced4:	e00d883a 	mov	r6,fp
 800ced8:	0011883a 	mov	r8,zero
 800cedc:	000b883a 	mov	r5,zero
 800cee0:	0027883a 	mov	r19,zero
 800cee4:	003ea906 	br	800c98c <__alt_data_end+0xfc00c98c>
 800cee8:	00800434 	movhi	r2,16
 800ceec:	89400234 	orhi	r5,r17,8
 800cef0:	10bfffc4 	addi	r2,r2,-1
 800cef4:	b00d883a 	mov	r6,r22
 800cef8:	288a703a 	and	r5,r5,r2
 800cefc:	003efd06 	br	800caf4 <__alt_data_end+0xfc00caf4>
 800cf00:	adcf883a 	add	r7,r21,r23
 800cf04:	997fffc4 	addi	r5,r19,-1
 800cf08:	3dc0412e 	bgeu	r7,r23,800d010 <__divdf3+0x7fc>
 800cf0c:	2827883a 	mov	r19,r5
 800cf10:	38bfd01e 	bne	r7,r2,800ce54 <__alt_data_end+0xfc00ce54>
 800cf14:	d8c00117 	ldw	r3,4(sp)
 800cf18:	193fce1e 	bne	r3,r4,800ce54 <__alt_data_end+0xfc00ce54>
 800cf1c:	003fce06 	br	800ce58 <__alt_data_end+0xfc00ce58>
 800cf20:	d9800215 	stw	r6,8(sp)
 800cf24:	d9c00515 	stw	r7,20(sp)
 800cf28:	800e7100 	call	800e710 <__clzsi2>
 800cf2c:	10c00804 	addi	r3,r2,32
 800cf30:	010009c4 	movi	r4,39
 800cf34:	d9800217 	ldw	r6,8(sp)
 800cf38:	d9c00517 	ldw	r7,20(sp)
 800cf3c:	20feb20e 	bge	r4,r3,800ca08 <__alt_data_end+0xfc00ca08>
 800cf40:	117ffe04 	addi	r5,r2,-8
 800cf44:	a162983a 	sll	r17,r20,r5
 800cf48:	0027883a 	mov	r19,zero
 800cf4c:	003eb506 	br	800ca24 <__alt_data_end+0xfc00ca24>
 800cf50:	3009883a 	mov	r4,r6
 800cf54:	d9800215 	stw	r6,8(sp)
 800cf58:	da000315 	stw	r8,12(sp)
 800cf5c:	da400415 	stw	r9,16(sp)
 800cf60:	800e7100 	call	800e710 <__clzsi2>
 800cf64:	10c00804 	addi	r3,r2,32
 800cf68:	010009c4 	movi	r4,39
 800cf6c:	d9800217 	ldw	r6,8(sp)
 800cf70:	da000317 	ldw	r8,12(sp)
 800cf74:	da400417 	ldw	r9,16(sp)
 800cf78:	20fec10e 	bge	r4,r3,800ca80 <__alt_data_end+0xfc00ca80>
 800cf7c:	10bffe04 	addi	r2,r2,-8
 800cf80:	a8a0983a 	sll	r16,r21,r2
 800cf84:	002b883a 	mov	r21,zero
 800cf88:	003ec406 	br	800ca9c <__alt_data_end+0xfc00ca9c>
 800cf8c:	d8c00117 	ldw	r3,4(sp)
 800cf90:	b0ed883a 	add	r22,r22,r3
 800cf94:	b0c5803a 	cmpltu	r2,r22,r3
 800cf98:	15c5883a 	add	r2,r2,r23
 800cf9c:	11cf883a 	add	r7,r2,r7
 800cfa0:	88bfffc4 	addi	r2,r17,-1
 800cfa4:	b9c00d2e 	bgeu	r23,r7,800cfdc <__divdf3+0x7c8>
 800cfa8:	39003f36 	bltu	r7,r4,800d0a8 <__divdf3+0x894>
 800cfac:	21c06a26 	beq	r4,r7,800d158 <__divdf3+0x944>
 800cfb0:	3909c83a 	sub	r4,r7,r4
 800cfb4:	1023883a 	mov	r17,r2
 800cfb8:	003f4f06 	br	800ccf8 <__alt_data_end+0xfc00ccf8>
 800cfbc:	9d7ee536 	bltu	r19,r21,800cb54 <__alt_data_end+0xfc00cb54>
 800cfc0:	982ed07a 	srli	r23,r19,1
 800cfc4:	880497fa 	slli	r2,r17,31
 800cfc8:	8810d07a 	srli	r8,r17,1
 800cfcc:	982c97fa 	slli	r22,r19,31
 800cfd0:	b884b03a 	or	r2,r23,r2
 800cfd4:	d8800015 	stw	r2,0(sp)
 800cfd8:	003ee206 	br	800cb64 <__alt_data_end+0xfc00cb64>
 800cfdc:	3dfff41e 	bne	r7,r23,800cfb0 <__alt_data_end+0xfc00cfb0>
 800cfe0:	d8c00117 	ldw	r3,4(sp)
 800cfe4:	b0fff02e 	bgeu	r22,r3,800cfa8 <__alt_data_end+0xfc00cfa8>
 800cfe8:	b909c83a 	sub	r4,r23,r4
 800cfec:	1023883a 	mov	r17,r2
 800cff0:	003f4106 	br	800ccf8 <__alt_data_end+0xfc00ccf8>
 800cff4:	1021883a 	mov	r16,r2
 800cff8:	003f1106 	br	800cc40 <__alt_data_end+0xfc00cc40>
 800cffc:	1023883a 	mov	r17,r2
 800d000:	003ef706 	br	800cbe0 <__alt_data_end+0xfc00cbe0>
 800d004:	b23fe136 	bltu	r22,r8,800cf8c <__alt_data_end+0xfc00cf8c>
 800d008:	0009883a 	mov	r4,zero
 800d00c:	003f3a06 	br	800ccf8 <__alt_data_end+0xfc00ccf8>
 800d010:	38802c36 	bltu	r7,r2,800d0c4 <__divdf3+0x8b0>
 800d014:	11c05326 	beq	r2,r7,800d164 <__divdf3+0x950>
 800d018:	2827883a 	mov	r19,r5
 800d01c:	003f8d06 	br	800ce54 <__alt_data_end+0xfc00ce54>
 800d020:	04ffffc4 	movi	r19,-1
 800d024:	003f8c06 	br	800ce58 <__alt_data_end+0xfc00ce58>
 800d028:	1011883a 	mov	r8,r2
 800d02c:	003f4d06 	br	800cd64 <__alt_data_end+0xfc00cd64>
 800d030:	1013883a 	mov	r9,r2
 800d034:	003f6406 	br	800cdc8 <__alt_data_end+0xfc00cdc8>
 800d038:	e029883a 	mov	r20,fp
 800d03c:	003f8606 	br	800ce58 <__alt_data_end+0xfc00ce58>
 800d040:	008007c4 	movi	r2,31
 800d044:	14002a16 	blt	r2,r16,800d0f0 <__divdf3+0x8dc>
 800d048:	91410784 	addi	r5,r18,1054
 800d04c:	9c0cd83a 	srl	r6,r19,r16
 800d050:	8948983a 	sll	r4,r17,r5
 800d054:	9944983a 	sll	r2,r19,r5
 800d058:	8c20d83a 	srl	r16,r17,r16
 800d05c:	3108b03a 	or	r4,r6,r4
 800d060:	1004c03a 	cmpne	r2,r2,zero
 800d064:	2084b03a 	or	r2,r4,r2
 800d068:	110001cc 	andi	r4,r2,7
 800d06c:	20000726 	beq	r4,zero,800d08c <__divdf3+0x878>
 800d070:	114003cc 	andi	r5,r2,15
 800d074:	01000104 	movi	r4,4
 800d078:	29000426 	beq	r5,r4,800d08c <__divdf3+0x878>
 800d07c:	11000104 	addi	r4,r2,4
 800d080:	2085803a 	cmpltu	r2,r4,r2
 800d084:	80a1883a 	add	r16,r16,r2
 800d088:	2005883a 	mov	r2,r4
 800d08c:	8100202c 	andhi	r4,r16,128
 800d090:	20002d26 	beq	r4,zero,800d148 <__divdf3+0x934>
 800d094:	a180004c 	andi	r6,r20,1
 800d098:	02000044 	movi	r8,1
 800d09c:	000b883a 	mov	r5,zero
 800d0a0:	0027883a 	mov	r19,zero
 800d0a4:	003e3906 	br	800c98c <__alt_data_end+0xfc00c98c>
 800d0a8:	d8c00117 	ldw	r3,4(sp)
 800d0ac:	8c7fff84 	addi	r17,r17,-2
 800d0b0:	b0ed883a 	add	r22,r22,r3
 800d0b4:	b0c5803a 	cmpltu	r2,r22,r3
 800d0b8:	15c5883a 	add	r2,r2,r23
 800d0bc:	11cf883a 	add	r7,r2,r7
 800d0c0:	003f0c06 	br	800ccf4 <__alt_data_end+0xfc00ccf4>
 800d0c4:	d8c00117 	ldw	r3,4(sp)
 800d0c8:	997fff84 	addi	r5,r19,-2
 800d0cc:	18d1883a 	add	r8,r3,r3
 800d0d0:	40c7803a 	cmpltu	r3,r8,r3
 800d0d4:	1dcd883a 	add	r6,r3,r23
 800d0d8:	398f883a 	add	r7,r7,r6
 800d0dc:	da000115 	stw	r8,4(sp)
 800d0e0:	003f8a06 	br	800cf0c <__alt_data_end+0xfc00cf0c>
 800d0e4:	203f861e 	bne	r4,zero,800cf00 <__alt_data_end+0xfc00cf00>
 800d0e8:	d8000115 	stw	zero,4(sp)
 800d0ec:	003f8906 	br	800cf14 <__alt_data_end+0xfc00cf14>
 800d0f0:	00bef884 	movi	r2,-1054
 800d0f4:	1485c83a 	sub	r2,r2,r18
 800d0f8:	01000804 	movi	r4,32
 800d0fc:	8884d83a 	srl	r2,r17,r2
 800d100:	81001c26 	beq	r16,r4,800d174 <__divdf3+0x960>
 800d104:	91010f84 	addi	r4,r18,1086
 800d108:	8908983a 	sll	r4,r17,r4
 800d10c:	24c8b03a 	or	r4,r4,r19
 800d110:	2008c03a 	cmpne	r4,r4,zero
 800d114:	2084b03a 	or	r2,r4,r2
 800d118:	140001cc 	andi	r16,r2,7
 800d11c:	8000061e 	bne	r16,zero,800d138 <__divdf3+0x924>
 800d120:	000b883a 	mov	r5,zero
 800d124:	1004d0fa 	srli	r2,r2,3
 800d128:	a180004c 	andi	r6,r20,1
 800d12c:	0011883a 	mov	r8,zero
 800d130:	1426b03a 	or	r19,r2,r16
 800d134:	003e1506 	br	800c98c <__alt_data_end+0xfc00c98c>
 800d138:	114003cc 	andi	r5,r2,15
 800d13c:	01000104 	movi	r4,4
 800d140:	0021883a 	mov	r16,zero
 800d144:	293fcd1e 	bne	r5,r4,800d07c <__alt_data_end+0xfc00d07c>
 800d148:	800a927a 	slli	r5,r16,9
 800d14c:	8020977a 	slli	r16,r16,29
 800d150:	280ad33a 	srli	r5,r5,12
 800d154:	003ff306 	br	800d124 <__alt_data_end+0xfc00d124>
 800d158:	b23fd336 	bltu	r22,r8,800d0a8 <__alt_data_end+0xfc00d0a8>
 800d15c:	1023883a 	mov	r17,r2
 800d160:	003fa906 	br	800d008 <__alt_data_end+0xfc00d008>
 800d164:	d8c00117 	ldw	r3,4(sp)
 800d168:	193fd636 	bltu	r3,r4,800d0c4 <__alt_data_end+0xfc00d0c4>
 800d16c:	2827883a 	mov	r19,r5
 800d170:	003f6806 	br	800cf14 <__alt_data_end+0xfc00cf14>
 800d174:	0009883a 	mov	r4,zero
 800d178:	003fe406 	br	800d10c <__alt_data_end+0xfc00d10c>
 800d17c:	00800434 	movhi	r2,16
 800d180:	89400234 	orhi	r5,r17,8
 800d184:	10bfffc4 	addi	r2,r2,-1
 800d188:	e00d883a 	mov	r6,fp
 800d18c:	288a703a 	and	r5,r5,r2
 800d190:	003e5806 	br	800caf4 <__alt_data_end+0xfc00caf4>

0800d194 <__eqdf2>:
 800d194:	2804d53a 	srli	r2,r5,20
 800d198:	3806d53a 	srli	r3,r7,20
 800d19c:	02000434 	movhi	r8,16
 800d1a0:	423fffc4 	addi	r8,r8,-1
 800d1a4:	1081ffcc 	andi	r2,r2,2047
 800d1a8:	0241ffc4 	movi	r9,2047
 800d1ac:	2a14703a 	and	r10,r5,r8
 800d1b0:	18c1ffcc 	andi	r3,r3,2047
 800d1b4:	3a10703a 	and	r8,r7,r8
 800d1b8:	280ad7fa 	srli	r5,r5,31
 800d1bc:	380ed7fa 	srli	r7,r7,31
 800d1c0:	12400f26 	beq	r2,r9,800d200 <__eqdf2+0x6c>
 800d1c4:	0241ffc4 	movi	r9,2047
 800d1c8:	1a400326 	beq	r3,r9,800d1d8 <__eqdf2+0x44>
 800d1cc:	10c00526 	beq	r2,r3,800d1e4 <__eqdf2+0x50>
 800d1d0:	00800044 	movi	r2,1
 800d1d4:	f800283a 	ret
 800d1d8:	4192b03a 	or	r9,r8,r6
 800d1dc:	483ffc1e 	bne	r9,zero,800d1d0 <__alt_data_end+0xfc00d1d0>
 800d1e0:	10fffb1e 	bne	r2,r3,800d1d0 <__alt_data_end+0xfc00d1d0>
 800d1e4:	523ffa1e 	bne	r10,r8,800d1d0 <__alt_data_end+0xfc00d1d0>
 800d1e8:	21bff91e 	bne	r4,r6,800d1d0 <__alt_data_end+0xfc00d1d0>
 800d1ec:	29c00826 	beq	r5,r7,800d210 <__eqdf2+0x7c>
 800d1f0:	103ff71e 	bne	r2,zero,800d1d0 <__alt_data_end+0xfc00d1d0>
 800d1f4:	5104b03a 	or	r2,r10,r4
 800d1f8:	1004c03a 	cmpne	r2,r2,zero
 800d1fc:	f800283a 	ret
 800d200:	5112b03a 	or	r9,r10,r4
 800d204:	483fef26 	beq	r9,zero,800d1c4 <__alt_data_end+0xfc00d1c4>
 800d208:	00800044 	movi	r2,1
 800d20c:	f800283a 	ret
 800d210:	0005883a 	mov	r2,zero
 800d214:	f800283a 	ret

0800d218 <__gedf2>:
 800d218:	2804d53a 	srli	r2,r5,20
 800d21c:	3806d53a 	srli	r3,r7,20
 800d220:	02000434 	movhi	r8,16
 800d224:	423fffc4 	addi	r8,r8,-1
 800d228:	0241ffc4 	movi	r9,2047
 800d22c:	1081ffcc 	andi	r2,r2,2047
 800d230:	2a14703a 	and	r10,r5,r8
 800d234:	1a46703a 	and	r3,r3,r9
 800d238:	3a10703a 	and	r8,r7,r8
 800d23c:	280ad7fa 	srli	r5,r5,31
 800d240:	380ed7fa 	srli	r7,r7,31
 800d244:	12400b26 	beq	r2,r9,800d274 <__gedf2+0x5c>
 800d248:	1a401626 	beq	r3,r9,800d2a4 <__gedf2+0x8c>
 800d24c:	10000c1e 	bne	r2,zero,800d280 <__gedf2+0x68>
 800d250:	5112b03a 	or	r9,r10,r4
 800d254:	4813003a 	cmpeq	r9,r9,zero
 800d258:	4817883a 	mov	r11,r9
 800d25c:	18000c1e 	bne	r3,zero,800d290 <__gedf2+0x78>
 800d260:	4198b03a 	or	r12,r8,r6
 800d264:	60000a1e 	bne	r12,zero,800d290 <__gedf2+0x78>
 800d268:	48001326 	beq	r9,zero,800d2b8 <__gedf2+0xa0>
 800d26c:	0005883a 	mov	r2,zero
 800d270:	f800283a 	ret
 800d274:	5112b03a 	or	r9,r10,r4
 800d278:	4800191e 	bne	r9,zero,800d2e0 <__gedf2+0xc8>
 800d27c:	18800926 	beq	r3,r2,800d2a4 <__gedf2+0x8c>
 800d280:	18000b1e 	bne	r3,zero,800d2b0 <__gedf2+0x98>
 800d284:	4192b03a 	or	r9,r8,r6
 800d288:	0017883a 	mov	r11,zero
 800d28c:	48000a26 	beq	r9,zero,800d2b8 <__gedf2+0xa0>
 800d290:	39c03fcc 	andi	r7,r7,255
 800d294:	58000726 	beq	r11,zero,800d2b4 <__gedf2+0x9c>
 800d298:	3800081e 	bne	r7,zero,800d2bc <__gedf2+0xa4>
 800d29c:	00bfffc4 	movi	r2,-1
 800d2a0:	f800283a 	ret
 800d2a4:	4192b03a 	or	r9,r8,r6
 800d2a8:	48000d1e 	bne	r9,zero,800d2e0 <__gedf2+0xc8>
 800d2ac:	103fe826 	beq	r2,zero,800d250 <__alt_data_end+0xfc00d250>
 800d2b0:	39c03fcc 	andi	r7,r7,255
 800d2b4:	29c00326 	beq	r5,r7,800d2c4 <__gedf2+0xac>
 800d2b8:	283ff81e 	bne	r5,zero,800d29c <__alt_data_end+0xfc00d29c>
 800d2bc:	00800044 	movi	r2,1
 800d2c0:	f800283a 	ret
 800d2c4:	18bffc16 	blt	r3,r2,800d2b8 <__alt_data_end+0xfc00d2b8>
 800d2c8:	10c00316 	blt	r2,r3,800d2d8 <__gedf2+0xc0>
 800d2cc:	42bffa36 	bltu	r8,r10,800d2b8 <__alt_data_end+0xfc00d2b8>
 800d2d0:	52000526 	beq	r10,r8,800d2e8 <__gedf2+0xd0>
 800d2d4:	523fe52e 	bgeu	r10,r8,800d26c <__alt_data_end+0xfc00d26c>
 800d2d8:	283ff026 	beq	r5,zero,800d29c <__alt_data_end+0xfc00d29c>
 800d2dc:	003ff706 	br	800d2bc <__alt_data_end+0xfc00d2bc>
 800d2e0:	00bfff84 	movi	r2,-2
 800d2e4:	f800283a 	ret
 800d2e8:	313ff336 	bltu	r6,r4,800d2b8 <__alt_data_end+0xfc00d2b8>
 800d2ec:	21bfdf2e 	bgeu	r4,r6,800d26c <__alt_data_end+0xfc00d26c>
 800d2f0:	283fea26 	beq	r5,zero,800d29c <__alt_data_end+0xfc00d29c>
 800d2f4:	003ff106 	br	800d2bc <__alt_data_end+0xfc00d2bc>

0800d2f8 <__ledf2>:
 800d2f8:	2804d53a 	srli	r2,r5,20
 800d2fc:	3810d53a 	srli	r8,r7,20
 800d300:	00c00434 	movhi	r3,16
 800d304:	18ffffc4 	addi	r3,r3,-1
 800d308:	0241ffc4 	movi	r9,2047
 800d30c:	1081ffcc 	andi	r2,r2,2047
 800d310:	28d4703a 	and	r10,r5,r3
 800d314:	4250703a 	and	r8,r8,r9
 800d318:	38c6703a 	and	r3,r7,r3
 800d31c:	280ad7fa 	srli	r5,r5,31
 800d320:	380ed7fa 	srli	r7,r7,31
 800d324:	12400b26 	beq	r2,r9,800d354 <__ledf2+0x5c>
 800d328:	42401926 	beq	r8,r9,800d390 <__ledf2+0x98>
 800d32c:	10000c1e 	bne	r2,zero,800d360 <__ledf2+0x68>
 800d330:	5112b03a 	or	r9,r10,r4
 800d334:	4813003a 	cmpeq	r9,r9,zero
 800d338:	4817883a 	mov	r11,r9
 800d33c:	40000f26 	beq	r8,zero,800d37c <__ledf2+0x84>
 800d340:	39c03fcc 	andi	r7,r7,255
 800d344:	58001826 	beq	r11,zero,800d3a8 <__ledf2+0xb0>
 800d348:	38000a1e 	bne	r7,zero,800d374 <__ledf2+0x7c>
 800d34c:	00bfffc4 	movi	r2,-1
 800d350:	f800283a 	ret
 800d354:	5112b03a 	or	r9,r10,r4
 800d358:	48000f1e 	bne	r9,zero,800d398 <__ledf2+0xa0>
 800d35c:	40800c26 	beq	r8,r2,800d390 <__ledf2+0x98>
 800d360:	4000101e 	bne	r8,zero,800d3a4 <__ledf2+0xac>
 800d364:	1992b03a 	or	r9,r3,r6
 800d368:	0017883a 	mov	r11,zero
 800d36c:	483ff41e 	bne	r9,zero,800d340 <__alt_data_end+0xfc00d340>
 800d370:	283ff61e 	bne	r5,zero,800d34c <__alt_data_end+0xfc00d34c>
 800d374:	00800044 	movi	r2,1
 800d378:	f800283a 	ret
 800d37c:	1998b03a 	or	r12,r3,r6
 800d380:	603fef1e 	bne	r12,zero,800d340 <__alt_data_end+0xfc00d340>
 800d384:	483ffa26 	beq	r9,zero,800d370 <__alt_data_end+0xfc00d370>
 800d388:	0005883a 	mov	r2,zero
 800d38c:	f800283a 	ret
 800d390:	1992b03a 	or	r9,r3,r6
 800d394:	48000226 	beq	r9,zero,800d3a0 <__ledf2+0xa8>
 800d398:	00800084 	movi	r2,2
 800d39c:	f800283a 	ret
 800d3a0:	103fe326 	beq	r2,zero,800d330 <__alt_data_end+0xfc00d330>
 800d3a4:	39c03fcc 	andi	r7,r7,255
 800d3a8:	29fff11e 	bne	r5,r7,800d370 <__alt_data_end+0xfc00d370>
 800d3ac:	40bff016 	blt	r8,r2,800d370 <__alt_data_end+0xfc00d370>
 800d3b0:	12000316 	blt	r2,r8,800d3c0 <__ledf2+0xc8>
 800d3b4:	1abfee36 	bltu	r3,r10,800d370 <__alt_data_end+0xfc00d370>
 800d3b8:	50c00326 	beq	r10,r3,800d3c8 <__ledf2+0xd0>
 800d3bc:	50fff22e 	bgeu	r10,r3,800d388 <__alt_data_end+0xfc00d388>
 800d3c0:	283fe226 	beq	r5,zero,800d34c <__alt_data_end+0xfc00d34c>
 800d3c4:	003feb06 	br	800d374 <__alt_data_end+0xfc00d374>
 800d3c8:	313fe936 	bltu	r6,r4,800d370 <__alt_data_end+0xfc00d370>
 800d3cc:	21bfee2e 	bgeu	r4,r6,800d388 <__alt_data_end+0xfc00d388>
 800d3d0:	283fde26 	beq	r5,zero,800d34c <__alt_data_end+0xfc00d34c>
 800d3d4:	003fe706 	br	800d374 <__alt_data_end+0xfc00d374>

0800d3d8 <__muldf3>:
 800d3d8:	deffee04 	addi	sp,sp,-72
 800d3dc:	dd000c15 	stw	r20,48(sp)
 800d3e0:	2828d53a 	srli	r20,r5,20
 800d3e4:	dd400d15 	stw	r21,52(sp)
 800d3e8:	282ad7fa 	srli	r21,r5,31
 800d3ec:	dc000815 	stw	r16,32(sp)
 800d3f0:	04000434 	movhi	r16,16
 800d3f4:	ddc00f15 	stw	r23,60(sp)
 800d3f8:	dcc00b15 	stw	r19,44(sp)
 800d3fc:	dc800a15 	stw	r18,40(sp)
 800d400:	843fffc4 	addi	r16,r16,-1
 800d404:	dfc01115 	stw	ra,68(sp)
 800d408:	df001015 	stw	fp,64(sp)
 800d40c:	dd800e15 	stw	r22,56(sp)
 800d410:	dc400915 	stw	r17,36(sp)
 800d414:	a501ffcc 	andi	r20,r20,2047
 800d418:	2025883a 	mov	r18,r4
 800d41c:	202f883a 	mov	r23,r4
 800d420:	2c20703a 	and	r16,r5,r16
 800d424:	a827883a 	mov	r19,r21
 800d428:	aa403fcc 	andi	r9,r21,255
 800d42c:	a0005926 	beq	r20,zero,800d594 <__muldf3+0x1bc>
 800d430:	0081ffc4 	movi	r2,2047
 800d434:	a0803426 	beq	r20,r2,800d508 <__muldf3+0x130>
 800d438:	84000434 	orhi	r16,r16,16
 800d43c:	2004d77a 	srli	r2,r4,29
 800d440:	802090fa 	slli	r16,r16,3
 800d444:	202e90fa 	slli	r23,r4,3
 800d448:	a53f0044 	addi	r20,r20,-1023
 800d44c:	80a0b03a 	or	r16,r16,r2
 800d450:	000b883a 	mov	r5,zero
 800d454:	0039883a 	mov	fp,zero
 800d458:	3806d53a 	srli	r3,r7,20
 800d45c:	382cd7fa 	srli	r22,r7,31
 800d460:	00800434 	movhi	r2,16
 800d464:	10bfffc4 	addi	r2,r2,-1
 800d468:	18c1ffcc 	andi	r3,r3,2047
 800d46c:	3025883a 	mov	r18,r6
 800d470:	38a2703a 	and	r17,r7,r2
 800d474:	b2803fcc 	andi	r10,r22,255
 800d478:	18006426 	beq	r3,zero,800d60c <__muldf3+0x234>
 800d47c:	0081ffc4 	movi	r2,2047
 800d480:	18805c26 	beq	r3,r2,800d5f4 <__muldf3+0x21c>
 800d484:	8c400434 	orhi	r17,r17,16
 800d488:	3004d77a 	srli	r2,r6,29
 800d48c:	882290fa 	slli	r17,r17,3
 800d490:	302490fa 	slli	r18,r6,3
 800d494:	18ff0044 	addi	r3,r3,-1023
 800d498:	88a2b03a 	or	r17,r17,r2
 800d49c:	000f883a 	mov	r7,zero
 800d4a0:	394ab03a 	or	r5,r7,r5
 800d4a4:	280a90ba 	slli	r5,r5,2
 800d4a8:	00820074 	movhi	r2,2049
 800d4ac:	10b53204 	addi	r2,r2,-11064
 800d4b0:	288b883a 	add	r5,r5,r2
 800d4b4:	28800017 	ldw	r2,0(r5)
 800d4b8:	a0c7883a 	add	r3,r20,r3
 800d4bc:	b54cf03a 	xor	r6,r22,r21
 800d4c0:	1a000044 	addi	r8,r3,1
 800d4c4:	1000683a 	jmp	r2
 800d4c8:	0800d70c 	andi	zero,at,860
 800d4cc:	0800d6f8 	rdprs	zero,at,859
 800d4d0:	0800d6f8 	rdprs	zero,at,859
 800d4d4:	0800d6e4 	muli	zero,at,859
 800d4d8:	0800d524 	muli	zero,at,852
 800d4dc:	0800d524 	muli	zero,at,852
 800d4e0:	0800d6cc 	andi	zero,at,859
 800d4e4:	0800d6e4 	muli	zero,at,859
 800d4e8:	0800d524 	muli	zero,at,852
 800d4ec:	0800d6cc 	andi	zero,at,859
 800d4f0:	0800d524 	muli	zero,at,852
 800d4f4:	0800d6e4 	muli	zero,at,859
 800d4f8:	0800d528 	cmpgeui	zero,at,852
 800d4fc:	0800d528 	cmpgeui	zero,at,852
 800d500:	0800d528 	cmpgeui	zero,at,852
 800d504:	0800da48 	cmpgei	zero,at,873
 800d508:	8104b03a 	or	r2,r16,r4
 800d50c:	10006c1e 	bne	r2,zero,800d6c0 <__muldf3+0x2e8>
 800d510:	01400204 	movi	r5,8
 800d514:	0021883a 	mov	r16,zero
 800d518:	002f883a 	mov	r23,zero
 800d51c:	07000084 	movi	fp,2
 800d520:	003fcd06 	br	800d458 <__alt_data_end+0xfc00d458>
 800d524:	3013883a 	mov	r9,r6
 800d528:	00800084 	movi	r2,2
 800d52c:	e080501e 	bne	fp,r2,800d670 <__muldf3+0x298>
 800d530:	4cc0004c 	andi	r19,r9,1
 800d534:	0101ffc4 	movi	r4,2047
 800d538:	0021883a 	mov	r16,zero
 800d53c:	002f883a 	mov	r23,zero
 800d540:	2008953a 	slli	r4,r4,20
 800d544:	98c03fcc 	andi	r3,r19,255
 800d548:	04400434 	movhi	r17,16
 800d54c:	8c7fffc4 	addi	r17,r17,-1
 800d550:	180697fa 	slli	r3,r3,31
 800d554:	8460703a 	and	r16,r16,r17
 800d558:	8120b03a 	or	r16,r16,r4
 800d55c:	80c6b03a 	or	r3,r16,r3
 800d560:	b805883a 	mov	r2,r23
 800d564:	dfc01117 	ldw	ra,68(sp)
 800d568:	df001017 	ldw	fp,64(sp)
 800d56c:	ddc00f17 	ldw	r23,60(sp)
 800d570:	dd800e17 	ldw	r22,56(sp)
 800d574:	dd400d17 	ldw	r21,52(sp)
 800d578:	dd000c17 	ldw	r20,48(sp)
 800d57c:	dcc00b17 	ldw	r19,44(sp)
 800d580:	dc800a17 	ldw	r18,40(sp)
 800d584:	dc400917 	ldw	r17,36(sp)
 800d588:	dc000817 	ldw	r16,32(sp)
 800d58c:	dec01204 	addi	sp,sp,72
 800d590:	f800283a 	ret
 800d594:	8104b03a 	or	r2,r16,r4
 800d598:	10004426 	beq	r2,zero,800d6ac <__muldf3+0x2d4>
 800d59c:	80014b26 	beq	r16,zero,800dacc <__muldf3+0x6f4>
 800d5a0:	8009883a 	mov	r4,r16
 800d5a4:	d9800715 	stw	r6,28(sp)
 800d5a8:	d9c00215 	stw	r7,8(sp)
 800d5ac:	da400415 	stw	r9,16(sp)
 800d5b0:	800e7100 	call	800e710 <__clzsi2>
 800d5b4:	d9800717 	ldw	r6,28(sp)
 800d5b8:	d9c00217 	ldw	r7,8(sp)
 800d5bc:	da400417 	ldw	r9,16(sp)
 800d5c0:	1007883a 	mov	r3,r2
 800d5c4:	01000a04 	movi	r4,40
 800d5c8:	1dfffe04 	addi	r23,r3,-8
 800d5cc:	20c9c83a 	sub	r4,r4,r3
 800d5d0:	85e0983a 	sll	r16,r16,r23
 800d5d4:	9108d83a 	srl	r4,r18,r4
 800d5d8:	95ee983a 	sll	r23,r18,r23
 800d5dc:	2420b03a 	or	r16,r4,r16
 800d5e0:	053f0344 	movi	r20,-1011
 800d5e4:	a0e9c83a 	sub	r20,r20,r3
 800d5e8:	000b883a 	mov	r5,zero
 800d5ec:	0039883a 	mov	fp,zero
 800d5f0:	003f9906 	br	800d458 <__alt_data_end+0xfc00d458>
 800d5f4:	8984b03a 	or	r2,r17,r6
 800d5f8:	10002a1e 	bne	r2,zero,800d6a4 <__muldf3+0x2cc>
 800d5fc:	0023883a 	mov	r17,zero
 800d600:	0025883a 	mov	r18,zero
 800d604:	01c00084 	movi	r7,2
 800d608:	003fa506 	br	800d4a0 <__alt_data_end+0xfc00d4a0>
 800d60c:	8984b03a 	or	r2,r17,r6
 800d610:	10002026 	beq	r2,zero,800d694 <__muldf3+0x2bc>
 800d614:	88011c26 	beq	r17,zero,800da88 <__muldf3+0x6b0>
 800d618:	8809883a 	mov	r4,r17
 800d61c:	d9400215 	stw	r5,8(sp)
 800d620:	d9800715 	stw	r6,28(sp)
 800d624:	da400415 	stw	r9,16(sp)
 800d628:	da800315 	stw	r10,12(sp)
 800d62c:	800e7100 	call	800e710 <__clzsi2>
 800d630:	d9400217 	ldw	r5,8(sp)
 800d634:	d9800717 	ldw	r6,28(sp)
 800d638:	da400417 	ldw	r9,16(sp)
 800d63c:	da800317 	ldw	r10,12(sp)
 800d640:	1007883a 	mov	r3,r2
 800d644:	01000a04 	movi	r4,40
 800d648:	1cbffe04 	addi	r18,r3,-8
 800d64c:	20c9c83a 	sub	r4,r4,r3
 800d650:	8ca2983a 	sll	r17,r17,r18
 800d654:	3108d83a 	srl	r4,r6,r4
 800d658:	34a4983a 	sll	r18,r6,r18
 800d65c:	2462b03a 	or	r17,r4,r17
 800d660:	00bf0344 	movi	r2,-1011
 800d664:	10c7c83a 	sub	r3,r2,r3
 800d668:	000f883a 	mov	r7,zero
 800d66c:	003f8c06 	br	800d4a0 <__alt_data_end+0xfc00d4a0>
 800d670:	008000c4 	movi	r2,3
 800d674:	e0816d26 	beq	fp,r2,800dc2c <__muldf3+0x854>
 800d678:	00800044 	movi	r2,1
 800d67c:	e081321e 	bne	fp,r2,800db48 <__muldf3+0x770>
 800d680:	48a6703a 	and	r19,r9,r2
 800d684:	0009883a 	mov	r4,zero
 800d688:	0021883a 	mov	r16,zero
 800d68c:	002f883a 	mov	r23,zero
 800d690:	003fab06 	br	800d540 <__alt_data_end+0xfc00d540>
 800d694:	0023883a 	mov	r17,zero
 800d698:	0025883a 	mov	r18,zero
 800d69c:	01c00044 	movi	r7,1
 800d6a0:	003f7f06 	br	800d4a0 <__alt_data_end+0xfc00d4a0>
 800d6a4:	01c000c4 	movi	r7,3
 800d6a8:	003f7d06 	br	800d4a0 <__alt_data_end+0xfc00d4a0>
 800d6ac:	01400104 	movi	r5,4
 800d6b0:	0021883a 	mov	r16,zero
 800d6b4:	002f883a 	mov	r23,zero
 800d6b8:	07000044 	movi	fp,1
 800d6bc:	003f6606 	br	800d458 <__alt_data_end+0xfc00d458>
 800d6c0:	01400304 	movi	r5,12
 800d6c4:	070000c4 	movi	fp,3
 800d6c8:	003f6306 	br	800d458 <__alt_data_end+0xfc00d458>
 800d6cc:	04000434 	movhi	r16,16
 800d6d0:	0027883a 	mov	r19,zero
 800d6d4:	843fffc4 	addi	r16,r16,-1
 800d6d8:	05ffffc4 	movi	r23,-1
 800d6dc:	0101ffc4 	movi	r4,2047
 800d6e0:	003f9706 	br	800d540 <__alt_data_end+0xfc00d540>
 800d6e4:	8821883a 	mov	r16,r17
 800d6e8:	902f883a 	mov	r23,r18
 800d6ec:	5013883a 	mov	r9,r10
 800d6f0:	3839883a 	mov	fp,r7
 800d6f4:	003f8c06 	br	800d528 <__alt_data_end+0xfc00d528>
 800d6f8:	8821883a 	mov	r16,r17
 800d6fc:	902f883a 	mov	r23,r18
 800d700:	3013883a 	mov	r9,r6
 800d704:	3839883a 	mov	fp,r7
 800d708:	003f8706 	br	800d528 <__alt_data_end+0xfc00d528>
 800d70c:	b82ad43a 	srli	r21,r23,16
 800d710:	9038d43a 	srli	fp,r18,16
 800d714:	bdffffcc 	andi	r23,r23,65535
 800d718:	94bfffcc 	andi	r18,r18,65535
 800d71c:	9009883a 	mov	r4,r18
 800d720:	b80b883a 	mov	r5,r23
 800d724:	d8c00515 	stw	r3,20(sp)
 800d728:	d9800715 	stw	r6,28(sp)
 800d72c:	da000615 	stw	r8,24(sp)
 800d730:	800bf500 	call	800bf50 <__mulsi3>
 800d734:	9009883a 	mov	r4,r18
 800d738:	a80b883a 	mov	r5,r21
 800d73c:	1029883a 	mov	r20,r2
 800d740:	800bf500 	call	800bf50 <__mulsi3>
 800d744:	e009883a 	mov	r4,fp
 800d748:	a80b883a 	mov	r5,r21
 800d74c:	102d883a 	mov	r22,r2
 800d750:	800bf500 	call	800bf50 <__mulsi3>
 800d754:	e009883a 	mov	r4,fp
 800d758:	b80b883a 	mov	r5,r23
 800d75c:	1027883a 	mov	r19,r2
 800d760:	800bf500 	call	800bf50 <__mulsi3>
 800d764:	a008d43a 	srli	r4,r20,16
 800d768:	b085883a 	add	r2,r22,r2
 800d76c:	d8c00517 	ldw	r3,20(sp)
 800d770:	110f883a 	add	r7,r2,r4
 800d774:	d9800717 	ldw	r6,28(sp)
 800d778:	da000617 	ldw	r8,24(sp)
 800d77c:	3d80022e 	bgeu	r7,r22,800d788 <__muldf3+0x3b0>
 800d780:	00800074 	movhi	r2,1
 800d784:	98a7883a 	add	r19,r19,r2
 800d788:	3804943a 	slli	r2,r7,16
 800d78c:	380ed43a 	srli	r7,r7,16
 800d790:	882cd43a 	srli	r22,r17,16
 800d794:	a53fffcc 	andi	r20,r20,65535
 800d798:	8c7fffcc 	andi	r17,r17,65535
 800d79c:	1529883a 	add	r20,r2,r20
 800d7a0:	8809883a 	mov	r4,r17
 800d7a4:	b80b883a 	mov	r5,r23
 800d7a8:	d8c00515 	stw	r3,20(sp)
 800d7ac:	d9800715 	stw	r6,28(sp)
 800d7b0:	da000615 	stw	r8,24(sp)
 800d7b4:	d9c00015 	stw	r7,0(sp)
 800d7b8:	dd000115 	stw	r20,4(sp)
 800d7bc:	800bf500 	call	800bf50 <__mulsi3>
 800d7c0:	a80b883a 	mov	r5,r21
 800d7c4:	8809883a 	mov	r4,r17
 800d7c8:	d8800415 	stw	r2,16(sp)
 800d7cc:	800bf500 	call	800bf50 <__mulsi3>
 800d7d0:	a80b883a 	mov	r5,r21
 800d7d4:	b009883a 	mov	r4,r22
 800d7d8:	1029883a 	mov	r20,r2
 800d7dc:	800bf500 	call	800bf50 <__mulsi3>
 800d7e0:	b009883a 	mov	r4,r22
 800d7e4:	b80b883a 	mov	r5,r23
 800d7e8:	102b883a 	mov	r21,r2
 800d7ec:	800bf500 	call	800bf50 <__mulsi3>
 800d7f0:	da400417 	ldw	r9,16(sp)
 800d7f4:	a085883a 	add	r2,r20,r2
 800d7f8:	d8c00517 	ldw	r3,20(sp)
 800d7fc:	4808d43a 	srli	r4,r9,16
 800d800:	d9800717 	ldw	r6,28(sp)
 800d804:	da000617 	ldw	r8,24(sp)
 800d808:	1109883a 	add	r4,r2,r4
 800d80c:	2500022e 	bgeu	r4,r20,800d818 <__muldf3+0x440>
 800d810:	00800074 	movhi	r2,1
 800d814:	a8ab883a 	add	r21,r21,r2
 800d818:	200e943a 	slli	r7,r4,16
 800d81c:	2004d43a 	srli	r2,r4,16
 800d820:	802ed43a 	srli	r23,r16,16
 800d824:	843fffcc 	andi	r16,r16,65535
 800d828:	4d3fffcc 	andi	r20,r9,65535
 800d82c:	9009883a 	mov	r4,r18
 800d830:	800b883a 	mov	r5,r16
 800d834:	3d29883a 	add	r20,r7,r20
 800d838:	d8c00515 	stw	r3,20(sp)
 800d83c:	d9800715 	stw	r6,28(sp)
 800d840:	da000615 	stw	r8,24(sp)
 800d844:	a8ab883a 	add	r21,r21,r2
 800d848:	800bf500 	call	800bf50 <__mulsi3>
 800d84c:	9009883a 	mov	r4,r18
 800d850:	b80b883a 	mov	r5,r23
 800d854:	d8800315 	stw	r2,12(sp)
 800d858:	800bf500 	call	800bf50 <__mulsi3>
 800d85c:	e009883a 	mov	r4,fp
 800d860:	b80b883a 	mov	r5,r23
 800d864:	1025883a 	mov	r18,r2
 800d868:	800bf500 	call	800bf50 <__mulsi3>
 800d86c:	e009883a 	mov	r4,fp
 800d870:	800b883a 	mov	r5,r16
 800d874:	d8800215 	stw	r2,8(sp)
 800d878:	800bf500 	call	800bf50 <__mulsi3>
 800d87c:	da800317 	ldw	r10,12(sp)
 800d880:	d9400017 	ldw	r5,0(sp)
 800d884:	9085883a 	add	r2,r18,r2
 800d888:	5008d43a 	srli	r4,r10,16
 800d88c:	a153883a 	add	r9,r20,r5
 800d890:	d8c00517 	ldw	r3,20(sp)
 800d894:	1109883a 	add	r4,r2,r4
 800d898:	d9800717 	ldw	r6,28(sp)
 800d89c:	da000617 	ldw	r8,24(sp)
 800d8a0:	dac00217 	ldw	r11,8(sp)
 800d8a4:	2480022e 	bgeu	r4,r18,800d8b0 <__muldf3+0x4d8>
 800d8a8:	00800074 	movhi	r2,1
 800d8ac:	5897883a 	add	r11,r11,r2
 800d8b0:	200e943a 	slli	r7,r4,16
 800d8b4:	2038d43a 	srli	fp,r4,16
 800d8b8:	52bfffcc 	andi	r10,r10,65535
 800d8bc:	3a8f883a 	add	r7,r7,r10
 800d8c0:	8809883a 	mov	r4,r17
 800d8c4:	800b883a 	mov	r5,r16
 800d8c8:	d8c00515 	stw	r3,20(sp)
 800d8cc:	d9800715 	stw	r6,28(sp)
 800d8d0:	d9c00215 	stw	r7,8(sp)
 800d8d4:	da000615 	stw	r8,24(sp)
 800d8d8:	da400415 	stw	r9,16(sp)
 800d8dc:	5f39883a 	add	fp,r11,fp
 800d8e0:	800bf500 	call	800bf50 <__mulsi3>
 800d8e4:	8809883a 	mov	r4,r17
 800d8e8:	b80b883a 	mov	r5,r23
 800d8ec:	1025883a 	mov	r18,r2
 800d8f0:	800bf500 	call	800bf50 <__mulsi3>
 800d8f4:	b009883a 	mov	r4,r22
 800d8f8:	b80b883a 	mov	r5,r23
 800d8fc:	d8800315 	stw	r2,12(sp)
 800d900:	800bf500 	call	800bf50 <__mulsi3>
 800d904:	b009883a 	mov	r4,r22
 800d908:	800b883a 	mov	r5,r16
 800d90c:	1023883a 	mov	r17,r2
 800d910:	800bf500 	call	800bf50 <__mulsi3>
 800d914:	da800317 	ldw	r10,12(sp)
 800d918:	9008d43a 	srli	r4,r18,16
 800d91c:	d8c00517 	ldw	r3,20(sp)
 800d920:	5085883a 	add	r2,r10,r2
 800d924:	1109883a 	add	r4,r2,r4
 800d928:	d9800717 	ldw	r6,28(sp)
 800d92c:	d9c00217 	ldw	r7,8(sp)
 800d930:	da000617 	ldw	r8,24(sp)
 800d934:	da400417 	ldw	r9,16(sp)
 800d938:	2280022e 	bgeu	r4,r10,800d944 <__muldf3+0x56c>
 800d93c:	00800074 	movhi	r2,1
 800d940:	88a3883a 	add	r17,r17,r2
 800d944:	2004943a 	slli	r2,r4,16
 800d948:	94bfffcc 	andi	r18,r18,65535
 800d94c:	4ce7883a 	add	r19,r9,r19
 800d950:	14a5883a 	add	r18,r2,r18
 800d954:	9d29803a 	cmpltu	r20,r19,r20
 800d958:	9565883a 	add	r18,r18,r21
 800d95c:	9505883a 	add	r2,r18,r20
 800d960:	99e7883a 	add	r19,r19,r7
 800d964:	99cf803a 	cmpltu	r7,r19,r7
 800d968:	e08b883a 	add	r5,fp,r2
 800d96c:	2008d43a 	srli	r4,r4,16
 800d970:	29ef883a 	add	r23,r5,r7
 800d974:	1529803a 	cmpltu	r20,r2,r20
 800d978:	956b803a 	cmpltu	r21,r18,r21
 800d97c:	b9cf803a 	cmpltu	r7,r23,r7
 800d980:	a564b03a 	or	r18,r20,r21
 800d984:	2f39803a 	cmpltu	fp,r5,fp
 800d988:	9125883a 	add	r18,r18,r4
 800d98c:	3f38b03a 	or	fp,r7,fp
 800d990:	9725883a 	add	r18,r18,fp
 800d994:	9804927a 	slli	r2,r19,9
 800d998:	9463883a 	add	r17,r18,r17
 800d99c:	d9000117 	ldw	r4,4(sp)
 800d9a0:	b820d5fa 	srli	r16,r23,23
 800d9a4:	8822927a 	slli	r17,r17,9
 800d9a8:	9826d5fa 	srli	r19,r19,23
 800d9ac:	1104b03a 	or	r2,r2,r4
 800d9b0:	b82e927a 	slli	r23,r23,9
 800d9b4:	1004c03a 	cmpne	r2,r2,zero
 800d9b8:	8c20b03a 	or	r16,r17,r16
 800d9bc:	14e6b03a 	or	r19,r2,r19
 800d9c0:	8080402c 	andhi	r2,r16,256
 800d9c4:	9deeb03a 	or	r23,r19,r23
 800d9c8:	10000726 	beq	r2,zero,800d9e8 <__muldf3+0x610>
 800d9cc:	b804d07a 	srli	r2,r23,1
 800d9d0:	800697fa 	slli	r3,r16,31
 800d9d4:	bdc0004c 	andi	r23,r23,1
 800d9d8:	8020d07a 	srli	r16,r16,1
 800d9dc:	b8aeb03a 	or	r23,r23,r2
 800d9e0:	b8eeb03a 	or	r23,r23,r3
 800d9e4:	4007883a 	mov	r3,r8
 800d9e8:	1900ffc4 	addi	r4,r3,1023
 800d9ec:	01004d0e 	bge	zero,r4,800db24 <__muldf3+0x74c>
 800d9f0:	b88001cc 	andi	r2,r23,7
 800d9f4:	10000726 	beq	r2,zero,800da14 <__muldf3+0x63c>
 800d9f8:	b94003cc 	andi	r5,r23,15
 800d9fc:	00800104 	movi	r2,4
 800da00:	28800426 	beq	r5,r2,800da14 <__muldf3+0x63c>
 800da04:	b885883a 	add	r2,r23,r2
 800da08:	15ef803a 	cmpltu	r23,r2,r23
 800da0c:	85e1883a 	add	r16,r16,r23
 800da10:	102f883a 	mov	r23,r2
 800da14:	8080402c 	andhi	r2,r16,256
 800da18:	10000426 	beq	r2,zero,800da2c <__muldf3+0x654>
 800da1c:	00bfc034 	movhi	r2,65280
 800da20:	10bfffc4 	addi	r2,r2,-1
 800da24:	19010004 	addi	r4,r3,1024
 800da28:	80a0703a 	and	r16,r16,r2
 800da2c:	0081ff84 	movi	r2,2046
 800da30:	1100340e 	bge	r2,r4,800db04 <__muldf3+0x72c>
 800da34:	34c0004c 	andi	r19,r6,1
 800da38:	0101ffc4 	movi	r4,2047
 800da3c:	0021883a 	mov	r16,zero
 800da40:	002f883a 	mov	r23,zero
 800da44:	003ebe06 	br	800d540 <__alt_data_end+0xfc00d540>
 800da48:	8080022c 	andhi	r2,r16,8
 800da4c:	10000926 	beq	r2,zero,800da74 <__muldf3+0x69c>
 800da50:	8880022c 	andhi	r2,r17,8
 800da54:	1000071e 	bne	r2,zero,800da74 <__muldf3+0x69c>
 800da58:	00800434 	movhi	r2,16
 800da5c:	8c000234 	orhi	r16,r17,8
 800da60:	10bfffc4 	addi	r2,r2,-1
 800da64:	b027883a 	mov	r19,r22
 800da68:	80a0703a 	and	r16,r16,r2
 800da6c:	902f883a 	mov	r23,r18
 800da70:	003f1a06 	br	800d6dc <__alt_data_end+0xfc00d6dc>
 800da74:	00800434 	movhi	r2,16
 800da78:	84000234 	orhi	r16,r16,8
 800da7c:	10bfffc4 	addi	r2,r2,-1
 800da80:	80a0703a 	and	r16,r16,r2
 800da84:	003f1506 	br	800d6dc <__alt_data_end+0xfc00d6dc>
 800da88:	3009883a 	mov	r4,r6
 800da8c:	d9400215 	stw	r5,8(sp)
 800da90:	d9800715 	stw	r6,28(sp)
 800da94:	da400415 	stw	r9,16(sp)
 800da98:	da800315 	stw	r10,12(sp)
 800da9c:	800e7100 	call	800e710 <__clzsi2>
 800daa0:	10c00804 	addi	r3,r2,32
 800daa4:	010009c4 	movi	r4,39
 800daa8:	d9400217 	ldw	r5,8(sp)
 800daac:	d9800717 	ldw	r6,28(sp)
 800dab0:	da400417 	ldw	r9,16(sp)
 800dab4:	da800317 	ldw	r10,12(sp)
 800dab8:	20fee20e 	bge	r4,r3,800d644 <__alt_data_end+0xfc00d644>
 800dabc:	147ffe04 	addi	r17,r2,-8
 800dac0:	9462983a 	sll	r17,r18,r17
 800dac4:	0025883a 	mov	r18,zero
 800dac8:	003ee506 	br	800d660 <__alt_data_end+0xfc00d660>
 800dacc:	d9800715 	stw	r6,28(sp)
 800dad0:	d9c00215 	stw	r7,8(sp)
 800dad4:	da400415 	stw	r9,16(sp)
 800dad8:	800e7100 	call	800e710 <__clzsi2>
 800dadc:	10c00804 	addi	r3,r2,32
 800dae0:	010009c4 	movi	r4,39
 800dae4:	d9800717 	ldw	r6,28(sp)
 800dae8:	d9c00217 	ldw	r7,8(sp)
 800daec:	da400417 	ldw	r9,16(sp)
 800daf0:	20feb40e 	bge	r4,r3,800d5c4 <__alt_data_end+0xfc00d5c4>
 800daf4:	143ffe04 	addi	r16,r2,-8
 800daf8:	9420983a 	sll	r16,r18,r16
 800dafc:	002f883a 	mov	r23,zero
 800db00:	003eb706 	br	800d5e0 <__alt_data_end+0xfc00d5e0>
 800db04:	8004977a 	slli	r2,r16,29
 800db08:	b82ed0fa 	srli	r23,r23,3
 800db0c:	8020927a 	slli	r16,r16,9
 800db10:	2101ffcc 	andi	r4,r4,2047
 800db14:	15eeb03a 	or	r23,r2,r23
 800db18:	8020d33a 	srli	r16,r16,12
 800db1c:	34c0004c 	andi	r19,r6,1
 800db20:	003e8706 	br	800d540 <__alt_data_end+0xfc00d540>
 800db24:	00bf0084 	movi	r2,-1022
 800db28:	10c5c83a 	sub	r2,r2,r3
 800db2c:	01000e04 	movi	r4,56
 800db30:	2080080e 	bge	r4,r2,800db54 <__muldf3+0x77c>
 800db34:	34c0004c 	andi	r19,r6,1
 800db38:	0009883a 	mov	r4,zero
 800db3c:	0021883a 	mov	r16,zero
 800db40:	002f883a 	mov	r23,zero
 800db44:	003e7e06 	br	800d540 <__alt_data_end+0xfc00d540>
 800db48:	4007883a 	mov	r3,r8
 800db4c:	480d883a 	mov	r6,r9
 800db50:	003fa506 	br	800d9e8 <__alt_data_end+0xfc00d9e8>
 800db54:	010007c4 	movi	r4,31
 800db58:	20801816 	blt	r4,r2,800dbbc <__muldf3+0x7e4>
 800db5c:	18c10784 	addi	r3,r3,1054
 800db60:	80c8983a 	sll	r4,r16,r3
 800db64:	b88ad83a 	srl	r5,r23,r2
 800db68:	b8c6983a 	sll	r3,r23,r3
 800db6c:	80a0d83a 	srl	r16,r16,r2
 800db70:	2908b03a 	or	r4,r5,r4
 800db74:	1804c03a 	cmpne	r2,r3,zero
 800db78:	2088b03a 	or	r4,r4,r2
 800db7c:	208001cc 	andi	r2,r4,7
 800db80:	10000726 	beq	r2,zero,800dba0 <__muldf3+0x7c8>
 800db84:	20c003cc 	andi	r3,r4,15
 800db88:	00800104 	movi	r2,4
 800db8c:	18800426 	beq	r3,r2,800dba0 <__muldf3+0x7c8>
 800db90:	20c00104 	addi	r3,r4,4
 800db94:	1905803a 	cmpltu	r2,r3,r4
 800db98:	80a1883a 	add	r16,r16,r2
 800db9c:	1809883a 	mov	r4,r3
 800dba0:	8080202c 	andhi	r2,r16,128
 800dba4:	10001b26 	beq	r2,zero,800dc14 <__muldf3+0x83c>
 800dba8:	34c0004c 	andi	r19,r6,1
 800dbac:	01000044 	movi	r4,1
 800dbb0:	0021883a 	mov	r16,zero
 800dbb4:	002f883a 	mov	r23,zero
 800dbb8:	003e6106 	br	800d540 <__alt_data_end+0xfc00d540>
 800dbbc:	013ef884 	movi	r4,-1054
 800dbc0:	20c9c83a 	sub	r4,r4,r3
 800dbc4:	01400804 	movi	r5,32
 800dbc8:	8108d83a 	srl	r4,r16,r4
 800dbcc:	11401526 	beq	r2,r5,800dc24 <__muldf3+0x84c>
 800dbd0:	18c10f84 	addi	r3,r3,1086
 800dbd4:	80e0983a 	sll	r16,r16,r3
 800dbd8:	85eeb03a 	or	r23,r16,r23
 800dbdc:	b804c03a 	cmpne	r2,r23,zero
 800dbe0:	1108b03a 	or	r4,r2,r4
 800dbe4:	20c001cc 	andi	r3,r4,7
 800dbe8:	1800061e 	bne	r3,zero,800dc04 <__muldf3+0x82c>
 800dbec:	0021883a 	mov	r16,zero
 800dbf0:	202ed0fa 	srli	r23,r4,3
 800dbf4:	34c0004c 	andi	r19,r6,1
 800dbf8:	0009883a 	mov	r4,zero
 800dbfc:	b8eeb03a 	or	r23,r23,r3
 800dc00:	003e4f06 	br	800d540 <__alt_data_end+0xfc00d540>
 800dc04:	20c003cc 	andi	r3,r4,15
 800dc08:	00800104 	movi	r2,4
 800dc0c:	0021883a 	mov	r16,zero
 800dc10:	18bfdf1e 	bne	r3,r2,800db90 <__alt_data_end+0xfc00db90>
 800dc14:	8004927a 	slli	r2,r16,9
 800dc18:	8006977a 	slli	r3,r16,29
 800dc1c:	1020d33a 	srli	r16,r2,12
 800dc20:	003ff306 	br	800dbf0 <__alt_data_end+0xfc00dbf0>
 800dc24:	0021883a 	mov	r16,zero
 800dc28:	003feb06 	br	800dbd8 <__alt_data_end+0xfc00dbd8>
 800dc2c:	00800434 	movhi	r2,16
 800dc30:	84000234 	orhi	r16,r16,8
 800dc34:	10bfffc4 	addi	r2,r2,-1
 800dc38:	4cc0004c 	andi	r19,r9,1
 800dc3c:	80a0703a 	and	r16,r16,r2
 800dc40:	003ea606 	br	800d6dc <__alt_data_end+0xfc00d6dc>

0800dc44 <__subdf3>:
 800dc44:	00c00434 	movhi	r3,16
 800dc48:	18ffffc4 	addi	r3,r3,-1
 800dc4c:	defffb04 	addi	sp,sp,-20
 800dc50:	28d2703a 	and	r9,r5,r3
 800dc54:	3814d53a 	srli	r10,r7,20
 800dc58:	38c6703a 	and	r3,r7,r3
 800dc5c:	3004d77a 	srli	r2,r6,29
 800dc60:	dc800215 	stw	r18,8(sp)
 800dc64:	dc000015 	stw	r16,0(sp)
 800dc68:	2824d7fa 	srli	r18,r5,31
 800dc6c:	2820d53a 	srli	r16,r5,20
 800dc70:	481290fa 	slli	r9,r9,3
 800dc74:	200ad77a 	srli	r5,r4,29
 800dc78:	180690fa 	slli	r3,r3,3
 800dc7c:	dc400115 	stw	r17,4(sp)
 800dc80:	dfc00415 	stw	ra,16(sp)
 800dc84:	202290fa 	slli	r17,r4,3
 800dc88:	dcc00315 	stw	r19,12(sp)
 800dc8c:	5281ffcc 	andi	r10,r10,2047
 800dc90:	0101ffc4 	movi	r4,2047
 800dc94:	9011883a 	mov	r8,r18
 800dc98:	8401ffcc 	andi	r16,r16,2047
 800dc9c:	94803fcc 	andi	r18,r18,255
 800dca0:	494ab03a 	or	r5,r9,r5
 800dca4:	380ed7fa 	srli	r7,r7,31
 800dca8:	1886b03a 	or	r3,r3,r2
 800dcac:	300c90fa 	slli	r6,r6,3
 800dcb0:	51009026 	beq	r10,r4,800def4 <__subdf3+0x2b0>
 800dcb4:	39c0005c 	xori	r7,r7,1
 800dcb8:	8285c83a 	sub	r2,r16,r10
 800dcbc:	91c06f26 	beq	r18,r7,800de7c <__subdf3+0x238>
 800dcc0:	0080b10e 	bge	zero,r2,800df88 <__subdf3+0x344>
 800dcc4:	50002a1e 	bne	r10,zero,800dd70 <__subdf3+0x12c>
 800dcc8:	1988b03a 	or	r4,r3,r6
 800dccc:	2000941e 	bne	r4,zero,800df20 <__subdf3+0x2dc>
 800dcd0:	888001cc 	andi	r2,r17,7
 800dcd4:	10005b26 	beq	r2,zero,800de44 <__subdf3+0x200>
 800dcd8:	88c003cc 	andi	r3,r17,15
 800dcdc:	00800104 	movi	r2,4
 800dce0:	18805826 	beq	r3,r2,800de44 <__subdf3+0x200>
 800dce4:	88c00104 	addi	r3,r17,4
 800dce8:	1c63803a 	cmpltu	r17,r3,r17
 800dcec:	2c4b883a 	add	r5,r5,r17
 800dcf0:	2880202c 	andhi	r2,r5,128
 800dcf4:	9200004c 	andi	r8,r18,1
 800dcf8:	1823883a 	mov	r17,r3
 800dcfc:	10005426 	beq	r2,zero,800de50 <__subdf3+0x20c>
 800dd00:	84000044 	addi	r16,r16,1
 800dd04:	0081ffc4 	movi	r2,2047
 800dd08:	8080bf26 	beq	r16,r2,800e008 <__subdf3+0x3c4>
 800dd0c:	013fe034 	movhi	r4,65408
 800dd10:	213fffc4 	addi	r4,r4,-1
 800dd14:	290a703a 	and	r5,r5,r4
 800dd18:	2804977a 	slli	r2,r5,29
 800dd1c:	280a927a 	slli	r5,r5,9
 800dd20:	8822d0fa 	srli	r17,r17,3
 800dd24:	8401ffcc 	andi	r16,r16,2047
 800dd28:	2808d33a 	srli	r4,r5,12
 800dd2c:	1444b03a 	or	r2,r2,r17
 800dd30:	8401ffcc 	andi	r16,r16,2047
 800dd34:	800a953a 	slli	r5,r16,20
 800dd38:	40c03fcc 	andi	r3,r8,255
 800dd3c:	04000434 	movhi	r16,16
 800dd40:	180697fa 	slli	r3,r3,31
 800dd44:	843fffc4 	addi	r16,r16,-1
 800dd48:	2420703a 	and	r16,r4,r16
 800dd4c:	8160b03a 	or	r16,r16,r5
 800dd50:	80c6b03a 	or	r3,r16,r3
 800dd54:	dfc00417 	ldw	ra,16(sp)
 800dd58:	dcc00317 	ldw	r19,12(sp)
 800dd5c:	dc800217 	ldw	r18,8(sp)
 800dd60:	dc400117 	ldw	r17,4(sp)
 800dd64:	dc000017 	ldw	r16,0(sp)
 800dd68:	dec00504 	addi	sp,sp,20
 800dd6c:	f800283a 	ret
 800dd70:	0101ffc4 	movi	r4,2047
 800dd74:	813fd626 	beq	r16,r4,800dcd0 <__alt_data_end+0xfc00dcd0>
 800dd78:	18c02034 	orhi	r3,r3,128
 800dd7c:	01000e04 	movi	r4,56
 800dd80:	2080a416 	blt	r4,r2,800e014 <__subdf3+0x3d0>
 800dd84:	010007c4 	movi	r4,31
 800dd88:	2080c716 	blt	r4,r2,800e0a8 <__subdf3+0x464>
 800dd8c:	01000804 	movi	r4,32
 800dd90:	2089c83a 	sub	r4,r4,r2
 800dd94:	1910983a 	sll	r8,r3,r4
 800dd98:	308ed83a 	srl	r7,r6,r2
 800dd9c:	3108983a 	sll	r4,r6,r4
 800dda0:	1884d83a 	srl	r2,r3,r2
 800dda4:	41ccb03a 	or	r6,r8,r7
 800dda8:	2008c03a 	cmpne	r4,r4,zero
 800ddac:	310cb03a 	or	r6,r6,r4
 800ddb0:	898dc83a 	sub	r6,r17,r6
 800ddb4:	89a3803a 	cmpltu	r17,r17,r6
 800ddb8:	288bc83a 	sub	r5,r5,r2
 800ddbc:	2c4bc83a 	sub	r5,r5,r17
 800ddc0:	3023883a 	mov	r17,r6
 800ddc4:	2880202c 	andhi	r2,r5,128
 800ddc8:	10006b26 	beq	r2,zero,800df78 <__subdf3+0x334>
 800ddcc:	04c02034 	movhi	r19,128
 800ddd0:	9cffffc4 	addi	r19,r19,-1
 800ddd4:	2ce6703a 	and	r19,r5,r19
 800ddd8:	98007c26 	beq	r19,zero,800dfcc <__subdf3+0x388>
 800dddc:	9809883a 	mov	r4,r19
 800dde0:	800e7100 	call	800e710 <__clzsi2>
 800dde4:	10fffe04 	addi	r3,r2,-8
 800dde8:	010007c4 	movi	r4,31
 800ddec:	20c07d16 	blt	r4,r3,800dfe4 <__subdf3+0x3a0>
 800ddf0:	01400a04 	movi	r5,40
 800ddf4:	2885c83a 	sub	r2,r5,r2
 800ddf8:	888ad83a 	srl	r5,r17,r2
 800ddfc:	98e6983a 	sll	r19,r19,r3
 800de00:	88e2983a 	sll	r17,r17,r3
 800de04:	2ce6b03a 	or	r19,r5,r19
 800de08:	1c007a16 	blt	r3,r16,800dff4 <__subdf3+0x3b0>
 800de0c:	1c21c83a 	sub	r16,r3,r16
 800de10:	81400044 	addi	r5,r16,1
 800de14:	00c007c4 	movi	r3,31
 800de18:	19409616 	blt	r3,r5,800e074 <__subdf3+0x430>
 800de1c:	1c21c83a 	sub	r16,r3,r16
 800de20:	8c08983a 	sll	r4,r17,r16
 800de24:	8946d83a 	srl	r3,r17,r5
 800de28:	9c20983a 	sll	r16,r19,r16
 800de2c:	2008c03a 	cmpne	r4,r4,zero
 800de30:	994ad83a 	srl	r5,r19,r5
 800de34:	1c06b03a 	or	r3,r3,r16
 800de38:	1922b03a 	or	r17,r3,r4
 800de3c:	0021883a 	mov	r16,zero
 800de40:	003fa306 	br	800dcd0 <__alt_data_end+0xfc00dcd0>
 800de44:	2880202c 	andhi	r2,r5,128
 800de48:	9200004c 	andi	r8,r18,1
 800de4c:	103fac1e 	bne	r2,zero,800dd00 <__alt_data_end+0xfc00dd00>
 800de50:	2804977a 	slli	r2,r5,29
 800de54:	8822d0fa 	srli	r17,r17,3
 800de58:	00c1ffc4 	movi	r3,2047
 800de5c:	280ad0fa 	srli	r5,r5,3
 800de60:	1444b03a 	or	r2,r2,r17
 800de64:	80c02726 	beq	r16,r3,800df04 <__subdf3+0x2c0>
 800de68:	01000434 	movhi	r4,16
 800de6c:	213fffc4 	addi	r4,r4,-1
 800de70:	80e0703a 	and	r16,r16,r3
 800de74:	2908703a 	and	r4,r5,r4
 800de78:	003fad06 	br	800dd30 <__alt_data_end+0xfc00dd30>
 800de7c:	0080690e 	bge	zero,r2,800e024 <__subdf3+0x3e0>
 800de80:	50002f26 	beq	r10,zero,800df40 <__subdf3+0x2fc>
 800de84:	0101ffc4 	movi	r4,2047
 800de88:	813f9126 	beq	r16,r4,800dcd0 <__alt_data_end+0xfc00dcd0>
 800de8c:	18c02034 	orhi	r3,r3,128
 800de90:	01000e04 	movi	r4,56
 800de94:	2080b00e 	bge	r4,r2,800e158 <__subdf3+0x514>
 800de98:	198cb03a 	or	r6,r3,r6
 800de9c:	300ec03a 	cmpne	r7,r6,zero
 800dea0:	0005883a 	mov	r2,zero
 800dea4:	3c4f883a 	add	r7,r7,r17
 800dea8:	3c63803a 	cmpltu	r17,r7,r17
 800deac:	114b883a 	add	r5,r2,r5
 800deb0:	2c4b883a 	add	r5,r5,r17
 800deb4:	3823883a 	mov	r17,r7
 800deb8:	2880202c 	andhi	r2,r5,128
 800debc:	10002e26 	beq	r2,zero,800df78 <__subdf3+0x334>
 800dec0:	84000044 	addi	r16,r16,1
 800dec4:	0081ffc4 	movi	r2,2047
 800dec8:	8080de26 	beq	r16,r2,800e244 <__subdf3+0x600>
 800decc:	00bfe034 	movhi	r2,65408
 800ded0:	10bfffc4 	addi	r2,r2,-1
 800ded4:	288a703a 	and	r5,r5,r2
 800ded8:	880cd07a 	srli	r6,r17,1
 800dedc:	280897fa 	slli	r4,r5,31
 800dee0:	88c0004c 	andi	r3,r17,1
 800dee4:	30e2b03a 	or	r17,r6,r3
 800dee8:	280ad07a 	srli	r5,r5,1
 800deec:	8922b03a 	or	r17,r17,r4
 800def0:	003f7706 	br	800dcd0 <__alt_data_end+0xfc00dcd0>
 800def4:	1984b03a 	or	r2,r3,r6
 800def8:	103f6e26 	beq	r2,zero,800dcb4 <__alt_data_end+0xfc00dcb4>
 800defc:	39c03fcc 	andi	r7,r7,255
 800df00:	003f6d06 	br	800dcb8 <__alt_data_end+0xfc00dcb8>
 800df04:	1146b03a 	or	r3,r2,r5
 800df08:	18003f26 	beq	r3,zero,800e008 <__subdf3+0x3c4>
 800df0c:	00c00434 	movhi	r3,16
 800df10:	29000234 	orhi	r4,r5,8
 800df14:	18ffffc4 	addi	r3,r3,-1
 800df18:	20c8703a 	and	r4,r4,r3
 800df1c:	003f8406 	br	800dd30 <__alt_data_end+0xfc00dd30>
 800df20:	10bfffc4 	addi	r2,r2,-1
 800df24:	1000501e 	bne	r2,zero,800e068 <__subdf3+0x424>
 800df28:	898fc83a 	sub	r7,r17,r6
 800df2c:	89e3803a 	cmpltu	r17,r17,r7
 800df30:	28cbc83a 	sub	r5,r5,r3
 800df34:	2c4bc83a 	sub	r5,r5,r17
 800df38:	3823883a 	mov	r17,r7
 800df3c:	003fa106 	br	800ddc4 <__alt_data_end+0xfc00ddc4>
 800df40:	1988b03a 	or	r4,r3,r6
 800df44:	203f6226 	beq	r4,zero,800dcd0 <__alt_data_end+0xfc00dcd0>
 800df48:	10bfffc4 	addi	r2,r2,-1
 800df4c:	10009b1e 	bne	r2,zero,800e1bc <__subdf3+0x578>
 800df50:	344d883a 	add	r6,r6,r17
 800df54:	3463803a 	cmpltu	r17,r6,r17
 800df58:	194b883a 	add	r5,r3,r5
 800df5c:	2c4b883a 	add	r5,r5,r17
 800df60:	3023883a 	mov	r17,r6
 800df64:	003fd406 	br	800deb8 <__alt_data_end+0xfc00deb8>
 800df68:	1106b03a 	or	r3,r2,r4
 800df6c:	1800b426 	beq	r3,zero,800e240 <__subdf3+0x5fc>
 800df70:	100b883a 	mov	r5,r2
 800df74:	2023883a 	mov	r17,r4
 800df78:	888001cc 	andi	r2,r17,7
 800df7c:	103f561e 	bne	r2,zero,800dcd8 <__alt_data_end+0xfc00dcd8>
 800df80:	9200004c 	andi	r8,r18,1
 800df84:	003fb206 	br	800de50 <__alt_data_end+0xfc00de50>
 800df88:	1000531e 	bne	r2,zero,800e0d8 <__subdf3+0x494>
 800df8c:	80800044 	addi	r2,r16,1
 800df90:	1081ffcc 	andi	r2,r2,2047
 800df94:	01000044 	movi	r4,1
 800df98:	2080a00e 	bge	r4,r2,800e21c <__subdf3+0x5d8>
 800df9c:	8985c83a 	sub	r2,r17,r6
 800dfa0:	8889803a 	cmpltu	r4,r17,r2
 800dfa4:	28e7c83a 	sub	r19,r5,r3
 800dfa8:	9927c83a 	sub	r19,r19,r4
 800dfac:	9900202c 	andhi	r4,r19,128
 800dfb0:	20006226 	beq	r4,zero,800e13c <__subdf3+0x4f8>
 800dfb4:	3463c83a 	sub	r17,r6,r17
 800dfb8:	194bc83a 	sub	r5,r3,r5
 800dfbc:	344d803a 	cmpltu	r6,r6,r17
 800dfc0:	29a7c83a 	sub	r19,r5,r6
 800dfc4:	3825883a 	mov	r18,r7
 800dfc8:	983f841e 	bne	r19,zero,800dddc <__alt_data_end+0xfc00dddc>
 800dfcc:	8809883a 	mov	r4,r17
 800dfd0:	800e7100 	call	800e710 <__clzsi2>
 800dfd4:	10800804 	addi	r2,r2,32
 800dfd8:	10fffe04 	addi	r3,r2,-8
 800dfdc:	010007c4 	movi	r4,31
 800dfe0:	20ff830e 	bge	r4,r3,800ddf0 <__alt_data_end+0xfc00ddf0>
 800dfe4:	14fff604 	addi	r19,r2,-40
 800dfe8:	8ce6983a 	sll	r19,r17,r19
 800dfec:	0023883a 	mov	r17,zero
 800dff0:	1c3f860e 	bge	r3,r16,800de0c <__alt_data_end+0xfc00de0c>
 800dff4:	017fe034 	movhi	r5,65408
 800dff8:	297fffc4 	addi	r5,r5,-1
 800dffc:	80e1c83a 	sub	r16,r16,r3
 800e000:	994a703a 	and	r5,r19,r5
 800e004:	003f3206 	br	800dcd0 <__alt_data_end+0xfc00dcd0>
 800e008:	0009883a 	mov	r4,zero
 800e00c:	0005883a 	mov	r2,zero
 800e010:	003f4706 	br	800dd30 <__alt_data_end+0xfc00dd30>
 800e014:	198cb03a 	or	r6,r3,r6
 800e018:	300cc03a 	cmpne	r6,r6,zero
 800e01c:	0005883a 	mov	r2,zero
 800e020:	003f6306 	br	800ddb0 <__alt_data_end+0xfc00ddb0>
 800e024:	10009d1e 	bne	r2,zero,800e29c <__subdf3+0x658>
 800e028:	81c00044 	addi	r7,r16,1
 800e02c:	3881ffcc 	andi	r2,r7,2047
 800e030:	02400044 	movi	r9,1
 800e034:	4880680e 	bge	r9,r2,800e1d8 <__subdf3+0x594>
 800e038:	0081ffc4 	movi	r2,2047
 800e03c:	3880ae26 	beq	r7,r2,800e2f8 <__subdf3+0x6b4>
 800e040:	344d883a 	add	r6,r6,r17
 800e044:	3463803a 	cmpltu	r17,r6,r17
 800e048:	194b883a 	add	r5,r3,r5
 800e04c:	2c4b883a 	add	r5,r5,r17
 800e050:	282297fa 	slli	r17,r5,31
 800e054:	300cd07a 	srli	r6,r6,1
 800e058:	280ad07a 	srli	r5,r5,1
 800e05c:	3821883a 	mov	r16,r7
 800e060:	89a2b03a 	or	r17,r17,r6
 800e064:	003f1a06 	br	800dcd0 <__alt_data_end+0xfc00dcd0>
 800e068:	0101ffc4 	movi	r4,2047
 800e06c:	813f431e 	bne	r16,r4,800dd7c <__alt_data_end+0xfc00dd7c>
 800e070:	003f1706 	br	800dcd0 <__alt_data_end+0xfc00dcd0>
 800e074:	80bff844 	addi	r2,r16,-31
 800e078:	00c00804 	movi	r3,32
 800e07c:	9884d83a 	srl	r2,r19,r2
 800e080:	28c05126 	beq	r5,r3,800e1c8 <__subdf3+0x584>
 800e084:	00c00fc4 	movi	r3,63
 800e088:	1c21c83a 	sub	r16,r3,r16
 800e08c:	9c26983a 	sll	r19,r19,r16
 800e090:	9c62b03a 	or	r17,r19,r17
 800e094:	8822c03a 	cmpne	r17,r17,zero
 800e098:	88a2b03a 	or	r17,r17,r2
 800e09c:	000b883a 	mov	r5,zero
 800e0a0:	0021883a 	mov	r16,zero
 800e0a4:	003fb406 	br	800df78 <__alt_data_end+0xfc00df78>
 800e0a8:	113ff804 	addi	r4,r2,-32
 800e0ac:	01c00804 	movi	r7,32
 800e0b0:	1908d83a 	srl	r4,r3,r4
 800e0b4:	11c04626 	beq	r2,r7,800e1d0 <__subdf3+0x58c>
 800e0b8:	01c01004 	movi	r7,64
 800e0bc:	3885c83a 	sub	r2,r7,r2
 800e0c0:	1884983a 	sll	r2,r3,r2
 800e0c4:	118cb03a 	or	r6,r2,r6
 800e0c8:	300cc03a 	cmpne	r6,r6,zero
 800e0cc:	310cb03a 	or	r6,r6,r4
 800e0d0:	0005883a 	mov	r2,zero
 800e0d4:	003f3606 	br	800ddb0 <__alt_data_end+0xfc00ddb0>
 800e0d8:	80002b26 	beq	r16,zero,800e188 <__subdf3+0x544>
 800e0dc:	0101ffc4 	movi	r4,2047
 800e0e0:	51006926 	beq	r10,r4,800e288 <__subdf3+0x644>
 800e0e4:	0085c83a 	sub	r2,zero,r2
 800e0e8:	29402034 	orhi	r5,r5,128
 800e0ec:	01000e04 	movi	r4,56
 800e0f0:	20807d16 	blt	r4,r2,800e2e8 <__subdf3+0x6a4>
 800e0f4:	010007c4 	movi	r4,31
 800e0f8:	2080d916 	blt	r4,r2,800e460 <__subdf3+0x81c>
 800e0fc:	01000804 	movi	r4,32
 800e100:	2089c83a 	sub	r4,r4,r2
 800e104:	2912983a 	sll	r9,r5,r4
 800e108:	8890d83a 	srl	r8,r17,r2
 800e10c:	8908983a 	sll	r4,r17,r4
 800e110:	2884d83a 	srl	r2,r5,r2
 800e114:	4a22b03a 	or	r17,r9,r8
 800e118:	2008c03a 	cmpne	r4,r4,zero
 800e11c:	8922b03a 	or	r17,r17,r4
 800e120:	3463c83a 	sub	r17,r6,r17
 800e124:	1885c83a 	sub	r2,r3,r2
 800e128:	344d803a 	cmpltu	r6,r6,r17
 800e12c:	118bc83a 	sub	r5,r2,r6
 800e130:	5021883a 	mov	r16,r10
 800e134:	3825883a 	mov	r18,r7
 800e138:	003f2206 	br	800ddc4 <__alt_data_end+0xfc00ddc4>
 800e13c:	9886b03a 	or	r3,r19,r2
 800e140:	18001c1e 	bne	r3,zero,800e1b4 <__subdf3+0x570>
 800e144:	0011883a 	mov	r8,zero
 800e148:	000b883a 	mov	r5,zero
 800e14c:	0023883a 	mov	r17,zero
 800e150:	0021883a 	mov	r16,zero
 800e154:	003f3e06 	br	800de50 <__alt_data_end+0xfc00de50>
 800e158:	010007c4 	movi	r4,31
 800e15c:	20803c16 	blt	r4,r2,800e250 <__subdf3+0x60c>
 800e160:	01000804 	movi	r4,32
 800e164:	2089c83a 	sub	r4,r4,r2
 800e168:	1912983a 	sll	r9,r3,r4
 800e16c:	308ed83a 	srl	r7,r6,r2
 800e170:	3108983a 	sll	r4,r6,r4
 800e174:	1884d83a 	srl	r2,r3,r2
 800e178:	49ceb03a 	or	r7,r9,r7
 800e17c:	2008c03a 	cmpne	r4,r4,zero
 800e180:	390eb03a 	or	r7,r7,r4
 800e184:	003f4706 	br	800dea4 <__alt_data_end+0xfc00dea4>
 800e188:	2c48b03a 	or	r4,r5,r17
 800e18c:	20003e26 	beq	r4,zero,800e288 <__subdf3+0x644>
 800e190:	0084303a 	nor	r2,zero,r2
 800e194:	10003a1e 	bne	r2,zero,800e280 <__subdf3+0x63c>
 800e198:	3463c83a 	sub	r17,r6,r17
 800e19c:	194bc83a 	sub	r5,r3,r5
 800e1a0:	344d803a 	cmpltu	r6,r6,r17
 800e1a4:	298bc83a 	sub	r5,r5,r6
 800e1a8:	5021883a 	mov	r16,r10
 800e1ac:	3825883a 	mov	r18,r7
 800e1b0:	003f0406 	br	800ddc4 <__alt_data_end+0xfc00ddc4>
 800e1b4:	1023883a 	mov	r17,r2
 800e1b8:	003f0706 	br	800ddd8 <__alt_data_end+0xfc00ddd8>
 800e1bc:	0101ffc4 	movi	r4,2047
 800e1c0:	813f331e 	bne	r16,r4,800de90 <__alt_data_end+0xfc00de90>
 800e1c4:	003ec206 	br	800dcd0 <__alt_data_end+0xfc00dcd0>
 800e1c8:	0027883a 	mov	r19,zero
 800e1cc:	003fb006 	br	800e090 <__alt_data_end+0xfc00e090>
 800e1d0:	0005883a 	mov	r2,zero
 800e1d4:	003fbb06 	br	800e0c4 <__alt_data_end+0xfc00e0c4>
 800e1d8:	2c44b03a 	or	r2,r5,r17
 800e1dc:	80008b1e 	bne	r16,zero,800e40c <__subdf3+0x7c8>
 800e1e0:	1000b526 	beq	r2,zero,800e4b8 <__subdf3+0x874>
 800e1e4:	1984b03a 	or	r2,r3,r6
 800e1e8:	103eb926 	beq	r2,zero,800dcd0 <__alt_data_end+0xfc00dcd0>
 800e1ec:	3449883a 	add	r4,r6,r17
 800e1f0:	2463803a 	cmpltu	r17,r4,r17
 800e1f4:	194b883a 	add	r5,r3,r5
 800e1f8:	2c4b883a 	add	r5,r5,r17
 800e1fc:	2880202c 	andhi	r2,r5,128
 800e200:	2023883a 	mov	r17,r4
 800e204:	103f5c26 	beq	r2,zero,800df78 <__alt_data_end+0xfc00df78>
 800e208:	00bfe034 	movhi	r2,65408
 800e20c:	10bfffc4 	addi	r2,r2,-1
 800e210:	4821883a 	mov	r16,r9
 800e214:	288a703a 	and	r5,r5,r2
 800e218:	003ead06 	br	800dcd0 <__alt_data_end+0xfc00dcd0>
 800e21c:	2c44b03a 	or	r2,r5,r17
 800e220:	8000291e 	bne	r16,zero,800e2c8 <__subdf3+0x684>
 800e224:	10004f1e 	bne	r2,zero,800e364 <__subdf3+0x720>
 800e228:	1984b03a 	or	r2,r3,r6
 800e22c:	10000426 	beq	r2,zero,800e240 <__subdf3+0x5fc>
 800e230:	180b883a 	mov	r5,r3
 800e234:	3023883a 	mov	r17,r6
 800e238:	3825883a 	mov	r18,r7
 800e23c:	003ea406 	br	800dcd0 <__alt_data_end+0xfc00dcd0>
 800e240:	0011883a 	mov	r8,zero
 800e244:	000b883a 	mov	r5,zero
 800e248:	0023883a 	mov	r17,zero
 800e24c:	003f0006 	br	800de50 <__alt_data_end+0xfc00de50>
 800e250:	11fff804 	addi	r7,r2,-32
 800e254:	19c8d83a 	srl	r4,r3,r7
 800e258:	01c00804 	movi	r7,32
 800e25c:	11c07e26 	beq	r2,r7,800e458 <__subdf3+0x814>
 800e260:	01c01004 	movi	r7,64
 800e264:	3885c83a 	sub	r2,r7,r2
 800e268:	1884983a 	sll	r2,r3,r2
 800e26c:	118cb03a 	or	r6,r2,r6
 800e270:	300ec03a 	cmpne	r7,r6,zero
 800e274:	390eb03a 	or	r7,r7,r4
 800e278:	0005883a 	mov	r2,zero
 800e27c:	003f0906 	br	800dea4 <__alt_data_end+0xfc00dea4>
 800e280:	0101ffc4 	movi	r4,2047
 800e284:	513f991e 	bne	r10,r4,800e0ec <__alt_data_end+0xfc00e0ec>
 800e288:	180b883a 	mov	r5,r3
 800e28c:	3023883a 	mov	r17,r6
 800e290:	5021883a 	mov	r16,r10
 800e294:	3825883a 	mov	r18,r7
 800e298:	003e8d06 	br	800dcd0 <__alt_data_end+0xfc00dcd0>
 800e29c:	80001a1e 	bne	r16,zero,800e308 <__subdf3+0x6c4>
 800e2a0:	2c48b03a 	or	r4,r5,r17
 800e2a4:	20005526 	beq	r4,zero,800e3fc <__subdf3+0x7b8>
 800e2a8:	0084303a 	nor	r2,zero,r2
 800e2ac:	1000511e 	bne	r2,zero,800e3f4 <__subdf3+0x7b0>
 800e2b0:	89a3883a 	add	r17,r17,r6
 800e2b4:	194b883a 	add	r5,r3,r5
 800e2b8:	898d803a 	cmpltu	r6,r17,r6
 800e2bc:	298b883a 	add	r5,r5,r6
 800e2c0:	5021883a 	mov	r16,r10
 800e2c4:	003efc06 	br	800deb8 <__alt_data_end+0xfc00deb8>
 800e2c8:	1000341e 	bne	r2,zero,800e39c <__subdf3+0x758>
 800e2cc:	1984b03a 	or	r2,r3,r6
 800e2d0:	10006f26 	beq	r2,zero,800e490 <__subdf3+0x84c>
 800e2d4:	180b883a 	mov	r5,r3
 800e2d8:	3023883a 	mov	r17,r6
 800e2dc:	3825883a 	mov	r18,r7
 800e2e0:	0401ffc4 	movi	r16,2047
 800e2e4:	003e7a06 	br	800dcd0 <__alt_data_end+0xfc00dcd0>
 800e2e8:	2c62b03a 	or	r17,r5,r17
 800e2ec:	8822c03a 	cmpne	r17,r17,zero
 800e2f0:	0005883a 	mov	r2,zero
 800e2f4:	003f8a06 	br	800e120 <__alt_data_end+0xfc00e120>
 800e2f8:	3821883a 	mov	r16,r7
 800e2fc:	000b883a 	mov	r5,zero
 800e300:	0023883a 	mov	r17,zero
 800e304:	003ed206 	br	800de50 <__alt_data_end+0xfc00de50>
 800e308:	0101ffc4 	movi	r4,2047
 800e30c:	51003b26 	beq	r10,r4,800e3fc <__subdf3+0x7b8>
 800e310:	0085c83a 	sub	r2,zero,r2
 800e314:	29402034 	orhi	r5,r5,128
 800e318:	01000e04 	movi	r4,56
 800e31c:	20806216 	blt	r4,r2,800e4a8 <__subdf3+0x864>
 800e320:	010007c4 	movi	r4,31
 800e324:	20806b16 	blt	r4,r2,800e4d4 <__subdf3+0x890>
 800e328:	01000804 	movi	r4,32
 800e32c:	2089c83a 	sub	r4,r4,r2
 800e330:	2912983a 	sll	r9,r5,r4
 800e334:	888ed83a 	srl	r7,r17,r2
 800e338:	8908983a 	sll	r4,r17,r4
 800e33c:	2884d83a 	srl	r2,r5,r2
 800e340:	49e2b03a 	or	r17,r9,r7
 800e344:	2008c03a 	cmpne	r4,r4,zero
 800e348:	8922b03a 	or	r17,r17,r4
 800e34c:	89a3883a 	add	r17,r17,r6
 800e350:	10c5883a 	add	r2,r2,r3
 800e354:	898d803a 	cmpltu	r6,r17,r6
 800e358:	118b883a 	add	r5,r2,r6
 800e35c:	5021883a 	mov	r16,r10
 800e360:	003ed506 	br	800deb8 <__alt_data_end+0xfc00deb8>
 800e364:	1984b03a 	or	r2,r3,r6
 800e368:	103e5926 	beq	r2,zero,800dcd0 <__alt_data_end+0xfc00dcd0>
 800e36c:	8989c83a 	sub	r4,r17,r6
 800e370:	8911803a 	cmpltu	r8,r17,r4
 800e374:	28c5c83a 	sub	r2,r5,r3
 800e378:	1205c83a 	sub	r2,r2,r8
 800e37c:	1200202c 	andhi	r8,r2,128
 800e380:	403ef926 	beq	r8,zero,800df68 <__alt_data_end+0xfc00df68>
 800e384:	3463c83a 	sub	r17,r6,r17
 800e388:	194bc83a 	sub	r5,r3,r5
 800e38c:	344d803a 	cmpltu	r6,r6,r17
 800e390:	298bc83a 	sub	r5,r5,r6
 800e394:	3825883a 	mov	r18,r7
 800e398:	003e4d06 	br	800dcd0 <__alt_data_end+0xfc00dcd0>
 800e39c:	1984b03a 	or	r2,r3,r6
 800e3a0:	10002b26 	beq	r2,zero,800e450 <__subdf3+0x80c>
 800e3a4:	2808d0fa 	srli	r4,r5,3
 800e3a8:	8822d0fa 	srli	r17,r17,3
 800e3ac:	280a977a 	slli	r5,r5,29
 800e3b0:	2080022c 	andhi	r2,r4,8
 800e3b4:	2c62b03a 	or	r17,r5,r17
 800e3b8:	10000826 	beq	r2,zero,800e3dc <__subdf3+0x798>
 800e3bc:	1810d0fa 	srli	r8,r3,3
 800e3c0:	4080022c 	andhi	r2,r8,8
 800e3c4:	1000051e 	bne	r2,zero,800e3dc <__subdf3+0x798>
 800e3c8:	300cd0fa 	srli	r6,r6,3
 800e3cc:	1804977a 	slli	r2,r3,29
 800e3d0:	4009883a 	mov	r4,r8
 800e3d4:	3825883a 	mov	r18,r7
 800e3d8:	11a2b03a 	or	r17,r2,r6
 800e3dc:	880ad77a 	srli	r5,r17,29
 800e3e0:	200890fa 	slli	r4,r4,3
 800e3e4:	882290fa 	slli	r17,r17,3
 800e3e8:	0401ffc4 	movi	r16,2047
 800e3ec:	290ab03a 	or	r5,r5,r4
 800e3f0:	003e3706 	br	800dcd0 <__alt_data_end+0xfc00dcd0>
 800e3f4:	0101ffc4 	movi	r4,2047
 800e3f8:	513fc71e 	bne	r10,r4,800e318 <__alt_data_end+0xfc00e318>
 800e3fc:	180b883a 	mov	r5,r3
 800e400:	3023883a 	mov	r17,r6
 800e404:	5021883a 	mov	r16,r10
 800e408:	003e3106 	br	800dcd0 <__alt_data_end+0xfc00dcd0>
 800e40c:	10002d26 	beq	r2,zero,800e4c4 <__subdf3+0x880>
 800e410:	1984b03a 	or	r2,r3,r6
 800e414:	10000e26 	beq	r2,zero,800e450 <__subdf3+0x80c>
 800e418:	2808d0fa 	srli	r4,r5,3
 800e41c:	8822d0fa 	srli	r17,r17,3
 800e420:	280a977a 	slli	r5,r5,29
 800e424:	2080022c 	andhi	r2,r4,8
 800e428:	2c62b03a 	or	r17,r5,r17
 800e42c:	103feb26 	beq	r2,zero,800e3dc <__alt_data_end+0xfc00e3dc>
 800e430:	180ed0fa 	srli	r7,r3,3
 800e434:	3880022c 	andhi	r2,r7,8
 800e438:	103fe81e 	bne	r2,zero,800e3dc <__alt_data_end+0xfc00e3dc>
 800e43c:	300cd0fa 	srli	r6,r6,3
 800e440:	1804977a 	slli	r2,r3,29
 800e444:	3809883a 	mov	r4,r7
 800e448:	11a2b03a 	or	r17,r2,r6
 800e44c:	003fe306 	br	800e3dc <__alt_data_end+0xfc00e3dc>
 800e450:	0401ffc4 	movi	r16,2047
 800e454:	003e1e06 	br	800dcd0 <__alt_data_end+0xfc00dcd0>
 800e458:	0005883a 	mov	r2,zero
 800e45c:	003f8306 	br	800e26c <__alt_data_end+0xfc00e26c>
 800e460:	113ff804 	addi	r4,r2,-32
 800e464:	02000804 	movi	r8,32
 800e468:	2908d83a 	srl	r4,r5,r4
 800e46c:	12002526 	beq	r2,r8,800e504 <__subdf3+0x8c0>
 800e470:	02001004 	movi	r8,64
 800e474:	4085c83a 	sub	r2,r8,r2
 800e478:	288a983a 	sll	r5,r5,r2
 800e47c:	2c62b03a 	or	r17,r5,r17
 800e480:	8822c03a 	cmpne	r17,r17,zero
 800e484:	8922b03a 	or	r17,r17,r4
 800e488:	0005883a 	mov	r2,zero
 800e48c:	003f2406 	br	800e120 <__alt_data_end+0xfc00e120>
 800e490:	01402034 	movhi	r5,128
 800e494:	0011883a 	mov	r8,zero
 800e498:	297fffc4 	addi	r5,r5,-1
 800e49c:	047ffe04 	movi	r17,-8
 800e4a0:	0401ffc4 	movi	r16,2047
 800e4a4:	003e6a06 	br	800de50 <__alt_data_end+0xfc00de50>
 800e4a8:	2c62b03a 	or	r17,r5,r17
 800e4ac:	8822c03a 	cmpne	r17,r17,zero
 800e4b0:	0005883a 	mov	r2,zero
 800e4b4:	003fa506 	br	800e34c <__alt_data_end+0xfc00e34c>
 800e4b8:	180b883a 	mov	r5,r3
 800e4bc:	3023883a 	mov	r17,r6
 800e4c0:	003e0306 	br	800dcd0 <__alt_data_end+0xfc00dcd0>
 800e4c4:	180b883a 	mov	r5,r3
 800e4c8:	3023883a 	mov	r17,r6
 800e4cc:	0401ffc4 	movi	r16,2047
 800e4d0:	003dff06 	br	800dcd0 <__alt_data_end+0xfc00dcd0>
 800e4d4:	113ff804 	addi	r4,r2,-32
 800e4d8:	01c00804 	movi	r7,32
 800e4dc:	2908d83a 	srl	r4,r5,r4
 800e4e0:	11c00a26 	beq	r2,r7,800e50c <__subdf3+0x8c8>
 800e4e4:	01c01004 	movi	r7,64
 800e4e8:	3885c83a 	sub	r2,r7,r2
 800e4ec:	288a983a 	sll	r5,r5,r2
 800e4f0:	2c62b03a 	or	r17,r5,r17
 800e4f4:	8822c03a 	cmpne	r17,r17,zero
 800e4f8:	8922b03a 	or	r17,r17,r4
 800e4fc:	0005883a 	mov	r2,zero
 800e500:	003f9206 	br	800e34c <__alt_data_end+0xfc00e34c>
 800e504:	000b883a 	mov	r5,zero
 800e508:	003fdc06 	br	800e47c <__alt_data_end+0xfc00e47c>
 800e50c:	000b883a 	mov	r5,zero
 800e510:	003ff706 	br	800e4f0 <__alt_data_end+0xfc00e4f0>

0800e514 <__fixdfsi>:
 800e514:	2806d53a 	srli	r3,r5,20
 800e518:	00800434 	movhi	r2,16
 800e51c:	10bfffc4 	addi	r2,r2,-1
 800e520:	18c1ffcc 	andi	r3,r3,2047
 800e524:	0180ff84 	movi	r6,1022
 800e528:	2884703a 	and	r2,r5,r2
 800e52c:	280ad7fa 	srli	r5,r5,31
 800e530:	30c0130e 	bge	r6,r3,800e580 <__fixdfsi+0x6c>
 800e534:	01810744 	movi	r6,1053
 800e538:	30c00d16 	blt	r6,r3,800e570 <__fixdfsi+0x5c>
 800e53c:	01810cc4 	movi	r6,1075
 800e540:	30cdc83a 	sub	r6,r6,r3
 800e544:	01c007c4 	movi	r7,31
 800e548:	10800434 	orhi	r2,r2,16
 800e54c:	39800e0e 	bge	r7,r6,800e588 <__fixdfsi+0x74>
 800e550:	010104c4 	movi	r4,1043
 800e554:	20c7c83a 	sub	r3,r4,r3
 800e558:	10c6d83a 	srl	r3,r2,r3
 800e55c:	29403fcc 	andi	r5,r5,255
 800e560:	0145c83a 	sub	r2,zero,r5
 800e564:	1884f03a 	xor	r2,r3,r2
 800e568:	1145883a 	add	r2,r2,r5
 800e56c:	f800283a 	ret
 800e570:	00a00034 	movhi	r2,32768
 800e574:	10bfffc4 	addi	r2,r2,-1
 800e578:	2885883a 	add	r2,r5,r2
 800e57c:	f800283a 	ret
 800e580:	0005883a 	mov	r2,zero
 800e584:	f800283a 	ret
 800e588:	18fefb44 	addi	r3,r3,-1043
 800e58c:	2188d83a 	srl	r4,r4,r6
 800e590:	10c6983a 	sll	r3,r2,r3
 800e594:	20c6b03a 	or	r3,r4,r3
 800e598:	003ff006 	br	800e55c <__alt_data_end+0xfc00e55c>

0800e59c <__floatsidf>:
 800e59c:	defffd04 	addi	sp,sp,-12
 800e5a0:	dc400115 	stw	r17,4(sp)
 800e5a4:	dfc00215 	stw	ra,8(sp)
 800e5a8:	dc000015 	stw	r16,0(sp)
 800e5ac:	2023883a 	mov	r17,r4
 800e5b0:	20001426 	beq	r4,zero,800e604 <__floatsidf+0x68>
 800e5b4:	2020d7fa 	srli	r16,r4,31
 800e5b8:	80000126 	beq	r16,zero,800e5c0 <__floatsidf+0x24>
 800e5bc:	0123c83a 	sub	r17,zero,r4
 800e5c0:	8809883a 	mov	r4,r17
 800e5c4:	800e7100 	call	800e710 <__clzsi2>
 800e5c8:	01410784 	movi	r5,1054
 800e5cc:	00c00284 	movi	r3,10
 800e5d0:	288bc83a 	sub	r5,r5,r2
 800e5d4:	18801c16 	blt	r3,r2,800e648 <__floatsidf+0xac>
 800e5d8:	00c002c4 	movi	r3,11
 800e5dc:	1887c83a 	sub	r3,r3,r2
 800e5e0:	88c8d83a 	srl	r4,r17,r3
 800e5e4:	00c00434 	movhi	r3,16
 800e5e8:	18ffffc4 	addi	r3,r3,-1
 800e5ec:	10800544 	addi	r2,r2,21
 800e5f0:	20c8703a 	and	r4,r4,r3
 800e5f4:	8884983a 	sll	r2,r17,r2
 800e5f8:	28c1ffcc 	andi	r3,r5,2047
 800e5fc:	800d883a 	mov	r6,r16
 800e600:	00000406 	br	800e614 <__floatsidf+0x78>
 800e604:	000d883a 	mov	r6,zero
 800e608:	0007883a 	mov	r3,zero
 800e60c:	0009883a 	mov	r4,zero
 800e610:	0005883a 	mov	r2,zero
 800e614:	180a953a 	slli	r5,r3,20
 800e618:	31803fcc 	andi	r6,r6,255
 800e61c:	00c00434 	movhi	r3,16
 800e620:	300c97fa 	slli	r6,r6,31
 800e624:	18ffffc4 	addi	r3,r3,-1
 800e628:	20c6703a 	and	r3,r4,r3
 800e62c:	1946b03a 	or	r3,r3,r5
 800e630:	1986b03a 	or	r3,r3,r6
 800e634:	dfc00217 	ldw	ra,8(sp)
 800e638:	dc400117 	ldw	r17,4(sp)
 800e63c:	dc000017 	ldw	r16,0(sp)
 800e640:	dec00304 	addi	sp,sp,12
 800e644:	f800283a 	ret
 800e648:	10fffd44 	addi	r3,r2,-11
 800e64c:	88c8983a 	sll	r4,r17,r3
 800e650:	00800434 	movhi	r2,16
 800e654:	10bfffc4 	addi	r2,r2,-1
 800e658:	2088703a 	and	r4,r4,r2
 800e65c:	28c1ffcc 	andi	r3,r5,2047
 800e660:	800d883a 	mov	r6,r16
 800e664:	0005883a 	mov	r2,zero
 800e668:	003fea06 	br	800e614 <__alt_data_end+0xfc00e614>

0800e66c <__floatunsidf>:
 800e66c:	defffe04 	addi	sp,sp,-8
 800e670:	dc000015 	stw	r16,0(sp)
 800e674:	dfc00115 	stw	ra,4(sp)
 800e678:	2021883a 	mov	r16,r4
 800e67c:	20001026 	beq	r4,zero,800e6c0 <__floatunsidf+0x54>
 800e680:	800e7100 	call	800e710 <__clzsi2>
 800e684:	01410784 	movi	r5,1054
 800e688:	100d883a 	mov	r6,r2
 800e68c:	288bc83a 	sub	r5,r5,r2
 800e690:	00800284 	movi	r2,10
 800e694:	11801616 	blt	r2,r6,800e6f0 <__floatunsidf+0x84>
 800e698:	008002c4 	movi	r2,11
 800e69c:	1185c83a 	sub	r2,r2,r6
 800e6a0:	8084d83a 	srl	r2,r16,r2
 800e6a4:	00c00434 	movhi	r3,16
 800e6a8:	31c00544 	addi	r7,r6,21
 800e6ac:	18ffffc4 	addi	r3,r3,-1
 800e6b0:	81e0983a 	sll	r16,r16,r7
 800e6b4:	10cc703a 	and	r6,r2,r3
 800e6b8:	2941ffcc 	andi	r5,r5,2047
 800e6bc:	00000206 	br	800e6c8 <__floatunsidf+0x5c>
 800e6c0:	000b883a 	mov	r5,zero
 800e6c4:	000d883a 	mov	r6,zero
 800e6c8:	280a953a 	slli	r5,r5,20
 800e6cc:	00c00434 	movhi	r3,16
 800e6d0:	18ffffc4 	addi	r3,r3,-1
 800e6d4:	30c6703a 	and	r3,r6,r3
 800e6d8:	8005883a 	mov	r2,r16
 800e6dc:	1946b03a 	or	r3,r3,r5
 800e6e0:	dfc00117 	ldw	ra,4(sp)
 800e6e4:	dc000017 	ldw	r16,0(sp)
 800e6e8:	dec00204 	addi	sp,sp,8
 800e6ec:	f800283a 	ret
 800e6f0:	31bffd44 	addi	r6,r6,-11
 800e6f4:	818c983a 	sll	r6,r16,r6
 800e6f8:	00800434 	movhi	r2,16
 800e6fc:	10bfffc4 	addi	r2,r2,-1
 800e700:	2941ffcc 	andi	r5,r5,2047
 800e704:	0021883a 	mov	r16,zero
 800e708:	308c703a 	and	r6,r6,r2
 800e70c:	003fee06 	br	800e6c8 <__alt_data_end+0xfc00e6c8>

0800e710 <__clzsi2>:
 800e710:	00bfffd4 	movui	r2,65535
 800e714:	11000b36 	bltu	r2,r4,800e744 <__clzsi2+0x34>
 800e718:	00803fc4 	movi	r2,255
 800e71c:	1100122e 	bgeu	r2,r4,800e768 <__clzsi2+0x58>
 800e720:	00c00204 	movi	r3,8
 800e724:	01400604 	movi	r5,24
 800e728:	20c8d83a 	srl	r4,r4,r3
 800e72c:	00820074 	movhi	r2,2049
 800e730:	10880504 	addi	r2,r2,8212
 800e734:	1109883a 	add	r4,r2,r4
 800e738:	20800003 	ldbu	r2,0(r4)
 800e73c:	2885c83a 	sub	r2,r5,r2
 800e740:	f800283a 	ret
 800e744:	00804034 	movhi	r2,256
 800e748:	10bfffc4 	addi	r2,r2,-1
 800e74c:	11000336 	bltu	r2,r4,800e75c <__clzsi2+0x4c>
 800e750:	00c00404 	movi	r3,16
 800e754:	180b883a 	mov	r5,r3
 800e758:	003ff306 	br	800e728 <__alt_data_end+0xfc00e728>
 800e75c:	00c00604 	movi	r3,24
 800e760:	01400204 	movi	r5,8
 800e764:	003ff006 	br	800e728 <__alt_data_end+0xfc00e728>
 800e768:	0007883a 	mov	r3,zero
 800e76c:	01400804 	movi	r5,32
 800e770:	003fed06 	br	800e728 <__alt_data_end+0xfc00e728>

0800e774 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e774:	defffe04 	addi	sp,sp,-8
 800e778:	dfc00115 	stw	ra,4(sp)
 800e77c:	df000015 	stw	fp,0(sp)
 800e780:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e784:	00820074 	movhi	r2,2049
 800e788:	108f3d04 	addi	r2,r2,15604
 800e78c:	10800017 	ldw	r2,0(r2)
 800e790:	10000526 	beq	r2,zero,800e7a8 <alt_get_errno+0x34>
 800e794:	00820074 	movhi	r2,2049
 800e798:	108f3d04 	addi	r2,r2,15604
 800e79c:	10800017 	ldw	r2,0(r2)
 800e7a0:	103ee83a 	callr	r2
 800e7a4:	00000206 	br	800e7b0 <alt_get_errno+0x3c>
 800e7a8:	00820074 	movhi	r2,2049
 800e7ac:	10962f04 	addi	r2,r2,22716
}
 800e7b0:	e037883a 	mov	sp,fp
 800e7b4:	dfc00117 	ldw	ra,4(sp)
 800e7b8:	df000017 	ldw	fp,0(sp)
 800e7bc:	dec00204 	addi	sp,sp,8
 800e7c0:	f800283a 	ret

0800e7c4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800e7c4:	defffb04 	addi	sp,sp,-20
 800e7c8:	dfc00415 	stw	ra,16(sp)
 800e7cc:	df000315 	stw	fp,12(sp)
 800e7d0:	df000304 	addi	fp,sp,12
 800e7d4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800e7d8:	e0bfff17 	ldw	r2,-4(fp)
 800e7dc:	10000816 	blt	r2,zero,800e800 <close+0x3c>
 800e7e0:	e13fff17 	ldw	r4,-4(fp)
 800e7e4:	01400304 	movi	r5,12
 800e7e8:	800bf500 	call	800bf50 <__mulsi3>
 800e7ec:	1007883a 	mov	r3,r2
 800e7f0:	00820074 	movhi	r2,2049
 800e7f4:	108a8804 	addi	r2,r2,10784
 800e7f8:	1885883a 	add	r2,r3,r2
 800e7fc:	00000106 	br	800e804 <close+0x40>
 800e800:	0005883a 	mov	r2,zero
 800e804:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800e808:	e0bffd17 	ldw	r2,-12(fp)
 800e80c:	10001926 	beq	r2,zero,800e874 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800e810:	e0bffd17 	ldw	r2,-12(fp)
 800e814:	10800017 	ldw	r2,0(r2)
 800e818:	10800417 	ldw	r2,16(r2)
 800e81c:	10000626 	beq	r2,zero,800e838 <close+0x74>
 800e820:	e0bffd17 	ldw	r2,-12(fp)
 800e824:	10800017 	ldw	r2,0(r2)
 800e828:	10800417 	ldw	r2,16(r2)
 800e82c:	e13ffd17 	ldw	r4,-12(fp)
 800e830:	103ee83a 	callr	r2
 800e834:	00000106 	br	800e83c <close+0x78>
 800e838:	0005883a 	mov	r2,zero
 800e83c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800e840:	e13fff17 	ldw	r4,-4(fp)
 800e844:	800f18c0 	call	800f18c <alt_release_fd>
    if (rval < 0)
 800e848:	e0bffe17 	ldw	r2,-8(fp)
 800e84c:	1000070e 	bge	r2,zero,800e86c <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800e850:	800e7740 	call	800e774 <alt_get_errno>
 800e854:	1007883a 	mov	r3,r2
 800e858:	e0bffe17 	ldw	r2,-8(fp)
 800e85c:	0085c83a 	sub	r2,zero,r2
 800e860:	18800015 	stw	r2,0(r3)
      return -1;
 800e864:	00bfffc4 	movi	r2,-1
 800e868:	00000706 	br	800e888 <close+0xc4>
    }
    return 0;
 800e86c:	0005883a 	mov	r2,zero
 800e870:	00000506 	br	800e888 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800e874:	800e7740 	call	800e774 <alt_get_errno>
 800e878:	1007883a 	mov	r3,r2
 800e87c:	00801444 	movi	r2,81
 800e880:	18800015 	stw	r2,0(r3)
    return -1;
 800e884:	00bfffc4 	movi	r2,-1
  }
}
 800e888:	e037883a 	mov	sp,fp
 800e88c:	dfc00117 	ldw	ra,4(sp)
 800e890:	df000017 	ldw	fp,0(sp)
 800e894:	dec00204 	addi	sp,sp,8
 800e898:	f800283a 	ret

0800e89c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800e89c:	defffc04 	addi	sp,sp,-16
 800e8a0:	df000315 	stw	fp,12(sp)
 800e8a4:	df000304 	addi	fp,sp,12
 800e8a8:	e13ffd15 	stw	r4,-12(fp)
 800e8ac:	e17ffe15 	stw	r5,-8(fp)
 800e8b0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800e8b4:	e0bfff17 	ldw	r2,-4(fp)
}
 800e8b8:	e037883a 	mov	sp,fp
 800e8bc:	df000017 	ldw	fp,0(sp)
 800e8c0:	dec00104 	addi	sp,sp,4
 800e8c4:	f800283a 	ret

0800e8c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e8c8:	defffe04 	addi	sp,sp,-8
 800e8cc:	dfc00115 	stw	ra,4(sp)
 800e8d0:	df000015 	stw	fp,0(sp)
 800e8d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e8d8:	00820074 	movhi	r2,2049
 800e8dc:	108f3d04 	addi	r2,r2,15604
 800e8e0:	10800017 	ldw	r2,0(r2)
 800e8e4:	10000526 	beq	r2,zero,800e8fc <alt_get_errno+0x34>
 800e8e8:	00820074 	movhi	r2,2049
 800e8ec:	108f3d04 	addi	r2,r2,15604
 800e8f0:	10800017 	ldw	r2,0(r2)
 800e8f4:	103ee83a 	callr	r2
 800e8f8:	00000206 	br	800e904 <alt_get_errno+0x3c>
 800e8fc:	00820074 	movhi	r2,2049
 800e900:	10962f04 	addi	r2,r2,22716
}
 800e904:	e037883a 	mov	sp,fp
 800e908:	dfc00117 	ldw	ra,4(sp)
 800e90c:	df000017 	ldw	fp,0(sp)
 800e910:	dec00204 	addi	sp,sp,8
 800e914:	f800283a 	ret

0800e918 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800e918:	defffb04 	addi	sp,sp,-20
 800e91c:	dfc00415 	stw	ra,16(sp)
 800e920:	df000315 	stw	fp,12(sp)
 800e924:	df000304 	addi	fp,sp,12
 800e928:	e13ffe15 	stw	r4,-8(fp)
 800e92c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e930:	e0bffe17 	ldw	r2,-8(fp)
 800e934:	10000816 	blt	r2,zero,800e958 <fstat+0x40>
 800e938:	e13ffe17 	ldw	r4,-8(fp)
 800e93c:	01400304 	movi	r5,12
 800e940:	800bf500 	call	800bf50 <__mulsi3>
 800e944:	1007883a 	mov	r3,r2
 800e948:	00820074 	movhi	r2,2049
 800e94c:	108a8804 	addi	r2,r2,10784
 800e950:	1885883a 	add	r2,r3,r2
 800e954:	00000106 	br	800e95c <fstat+0x44>
 800e958:	0005883a 	mov	r2,zero
 800e95c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800e960:	e0bffd17 	ldw	r2,-12(fp)
 800e964:	10001026 	beq	r2,zero,800e9a8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800e968:	e0bffd17 	ldw	r2,-12(fp)
 800e96c:	10800017 	ldw	r2,0(r2)
 800e970:	10800817 	ldw	r2,32(r2)
 800e974:	10000726 	beq	r2,zero,800e994 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800e978:	e0bffd17 	ldw	r2,-12(fp)
 800e97c:	10800017 	ldw	r2,0(r2)
 800e980:	10800817 	ldw	r2,32(r2)
 800e984:	e13ffd17 	ldw	r4,-12(fp)
 800e988:	e17fff17 	ldw	r5,-4(fp)
 800e98c:	103ee83a 	callr	r2
 800e990:	00000a06 	br	800e9bc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800e994:	e0bfff17 	ldw	r2,-4(fp)
 800e998:	00c80004 	movi	r3,8192
 800e99c:	10c00115 	stw	r3,4(r2)
      return 0;
 800e9a0:	0005883a 	mov	r2,zero
 800e9a4:	00000506 	br	800e9bc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800e9a8:	800e8c80 	call	800e8c8 <alt_get_errno>
 800e9ac:	1007883a 	mov	r3,r2
 800e9b0:	00801444 	movi	r2,81
 800e9b4:	18800015 	stw	r2,0(r3)
    return -1;
 800e9b8:	00bfffc4 	movi	r2,-1
  }
}
 800e9bc:	e037883a 	mov	sp,fp
 800e9c0:	dfc00117 	ldw	ra,4(sp)
 800e9c4:	df000017 	ldw	fp,0(sp)
 800e9c8:	dec00204 	addi	sp,sp,8
 800e9cc:	f800283a 	ret

0800e9d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e9d0:	defffe04 	addi	sp,sp,-8
 800e9d4:	dfc00115 	stw	ra,4(sp)
 800e9d8:	df000015 	stw	fp,0(sp)
 800e9dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e9e0:	00820074 	movhi	r2,2049
 800e9e4:	108f3d04 	addi	r2,r2,15604
 800e9e8:	10800017 	ldw	r2,0(r2)
 800e9ec:	10000526 	beq	r2,zero,800ea04 <alt_get_errno+0x34>
 800e9f0:	00820074 	movhi	r2,2049
 800e9f4:	108f3d04 	addi	r2,r2,15604
 800e9f8:	10800017 	ldw	r2,0(r2)
 800e9fc:	103ee83a 	callr	r2
 800ea00:	00000206 	br	800ea0c <alt_get_errno+0x3c>
 800ea04:	00820074 	movhi	r2,2049
 800ea08:	10962f04 	addi	r2,r2,22716
}
 800ea0c:	e037883a 	mov	sp,fp
 800ea10:	dfc00117 	ldw	ra,4(sp)
 800ea14:	df000017 	ldw	fp,0(sp)
 800ea18:	dec00204 	addi	sp,sp,8
 800ea1c:	f800283a 	ret

0800ea20 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800ea20:	deffed04 	addi	sp,sp,-76
 800ea24:	dfc01215 	stw	ra,72(sp)
 800ea28:	df001115 	stw	fp,68(sp)
 800ea2c:	df001104 	addi	fp,sp,68
 800ea30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ea34:	e0bfff17 	ldw	r2,-4(fp)
 800ea38:	10000816 	blt	r2,zero,800ea5c <isatty+0x3c>
 800ea3c:	e13fff17 	ldw	r4,-4(fp)
 800ea40:	01400304 	movi	r5,12
 800ea44:	800bf500 	call	800bf50 <__mulsi3>
 800ea48:	1007883a 	mov	r3,r2
 800ea4c:	00820074 	movhi	r2,2049
 800ea50:	108a8804 	addi	r2,r2,10784
 800ea54:	1885883a 	add	r2,r3,r2
 800ea58:	00000106 	br	800ea60 <isatty+0x40>
 800ea5c:	0005883a 	mov	r2,zero
 800ea60:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800ea64:	e0bfef17 	ldw	r2,-68(fp)
 800ea68:	10000e26 	beq	r2,zero,800eaa4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800ea6c:	e0bfef17 	ldw	r2,-68(fp)
 800ea70:	10800017 	ldw	r2,0(r2)
 800ea74:	10800817 	ldw	r2,32(r2)
 800ea78:	1000021e 	bne	r2,zero,800ea84 <isatty+0x64>
    {
      return 1;
 800ea7c:	00800044 	movi	r2,1
 800ea80:	00000d06 	br	800eab8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800ea84:	e0bff004 	addi	r2,fp,-64
 800ea88:	e13fff17 	ldw	r4,-4(fp)
 800ea8c:	100b883a 	mov	r5,r2
 800ea90:	800e9180 	call	800e918 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800ea94:	e0bff117 	ldw	r2,-60(fp)
 800ea98:	10880020 	cmpeqi	r2,r2,8192
 800ea9c:	10803fcc 	andi	r2,r2,255
 800eaa0:	00000506 	br	800eab8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800eaa4:	800e9d00 	call	800e9d0 <alt_get_errno>
 800eaa8:	1007883a 	mov	r3,r2
 800eaac:	00801444 	movi	r2,81
 800eab0:	18800015 	stw	r2,0(r3)
    return 0;
 800eab4:	0005883a 	mov	r2,zero
  }
}
 800eab8:	e037883a 	mov	sp,fp
 800eabc:	dfc00117 	ldw	ra,4(sp)
 800eac0:	df000017 	ldw	fp,0(sp)
 800eac4:	dec00204 	addi	sp,sp,8
 800eac8:	f800283a 	ret

0800eacc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800eacc:	defffc04 	addi	sp,sp,-16
 800ead0:	df000315 	stw	fp,12(sp)
 800ead4:	df000304 	addi	fp,sp,12
 800ead8:	e13ffd15 	stw	r4,-12(fp)
 800eadc:	e17ffe15 	stw	r5,-8(fp)
 800eae0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800eae4:	e0fffe17 	ldw	r3,-8(fp)
 800eae8:	e0bffd17 	ldw	r2,-12(fp)
 800eaec:	18800c26 	beq	r3,r2,800eb20 <alt_load_section+0x54>
  {
    while( to != end )
 800eaf0:	00000806 	br	800eb14 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800eaf4:	e0bffe17 	ldw	r2,-8(fp)
 800eaf8:	10c00104 	addi	r3,r2,4
 800eafc:	e0fffe15 	stw	r3,-8(fp)
 800eb00:	e0fffd17 	ldw	r3,-12(fp)
 800eb04:	19000104 	addi	r4,r3,4
 800eb08:	e13ffd15 	stw	r4,-12(fp)
 800eb0c:	18c00017 	ldw	r3,0(r3)
 800eb10:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800eb14:	e0fffe17 	ldw	r3,-8(fp)
 800eb18:	e0bfff17 	ldw	r2,-4(fp)
 800eb1c:	18bff51e 	bne	r3,r2,800eaf4 <__alt_data_end+0xfc00eaf4>
    {
      *to++ = *from++;
    }
  }
}
 800eb20:	e037883a 	mov	sp,fp
 800eb24:	df000017 	ldw	fp,0(sp)
 800eb28:	dec00104 	addi	sp,sp,4
 800eb2c:	f800283a 	ret

0800eb30 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800eb30:	defffe04 	addi	sp,sp,-8
 800eb34:	dfc00115 	stw	ra,4(sp)
 800eb38:	df000015 	stw	fp,0(sp)
 800eb3c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800eb40:	01020074 	movhi	r4,2049
 800eb44:	210f4204 	addi	r4,r4,15624
 800eb48:	01420074 	movhi	r5,2049
 800eb4c:	29485504 	addi	r5,r5,8532
 800eb50:	01820074 	movhi	r6,2049
 800eb54:	318f4204 	addi	r6,r6,15624
 800eb58:	800eacc0 	call	800eacc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800eb5c:	01020034 	movhi	r4,2048
 800eb60:	21000804 	addi	r4,r4,32
 800eb64:	01420034 	movhi	r5,2048
 800eb68:	29400804 	addi	r5,r5,32
 800eb6c:	01820034 	movhi	r6,2048
 800eb70:	31806f04 	addi	r6,r6,444
 800eb74:	800eacc0 	call	800eacc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800eb78:	01020074 	movhi	r4,2049
 800eb7c:	21067604 	addi	r4,r4,6616
 800eb80:	01420074 	movhi	r5,2049
 800eb84:	29467604 	addi	r5,r5,6616
 800eb88:	01820074 	movhi	r6,2049
 800eb8c:	31885504 	addi	r6,r6,8532
 800eb90:	800eacc0 	call	800eacc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800eb94:	8010bf40 	call	8010bf4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800eb98:	80110340 	call	8011034 <alt_icache_flush_all>
}
 800eb9c:	e037883a 	mov	sp,fp
 800eba0:	dfc00117 	ldw	ra,4(sp)
 800eba4:	df000017 	ldw	fp,0(sp)
 800eba8:	dec00204 	addi	sp,sp,8
 800ebac:	f800283a 	ret

0800ebb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ebb0:	defffe04 	addi	sp,sp,-8
 800ebb4:	dfc00115 	stw	ra,4(sp)
 800ebb8:	df000015 	stw	fp,0(sp)
 800ebbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ebc0:	00820074 	movhi	r2,2049
 800ebc4:	108f3d04 	addi	r2,r2,15604
 800ebc8:	10800017 	ldw	r2,0(r2)
 800ebcc:	10000526 	beq	r2,zero,800ebe4 <alt_get_errno+0x34>
 800ebd0:	00820074 	movhi	r2,2049
 800ebd4:	108f3d04 	addi	r2,r2,15604
 800ebd8:	10800017 	ldw	r2,0(r2)
 800ebdc:	103ee83a 	callr	r2
 800ebe0:	00000206 	br	800ebec <alt_get_errno+0x3c>
 800ebe4:	00820074 	movhi	r2,2049
 800ebe8:	10962f04 	addi	r2,r2,22716
}
 800ebec:	e037883a 	mov	sp,fp
 800ebf0:	dfc00117 	ldw	ra,4(sp)
 800ebf4:	df000017 	ldw	fp,0(sp)
 800ebf8:	dec00204 	addi	sp,sp,8
 800ebfc:	f800283a 	ret

0800ec00 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800ec00:	defff904 	addi	sp,sp,-28
 800ec04:	dfc00615 	stw	ra,24(sp)
 800ec08:	df000515 	stw	fp,20(sp)
 800ec0c:	df000504 	addi	fp,sp,20
 800ec10:	e13ffd15 	stw	r4,-12(fp)
 800ec14:	e17ffe15 	stw	r5,-8(fp)
 800ec18:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800ec1c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ec20:	e0bffd17 	ldw	r2,-12(fp)
 800ec24:	10000816 	blt	r2,zero,800ec48 <lseek+0x48>
 800ec28:	e13ffd17 	ldw	r4,-12(fp)
 800ec2c:	01400304 	movi	r5,12
 800ec30:	800bf500 	call	800bf50 <__mulsi3>
 800ec34:	1007883a 	mov	r3,r2
 800ec38:	00820074 	movhi	r2,2049
 800ec3c:	108a8804 	addi	r2,r2,10784
 800ec40:	1885883a 	add	r2,r3,r2
 800ec44:	00000106 	br	800ec4c <lseek+0x4c>
 800ec48:	0005883a 	mov	r2,zero
 800ec4c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800ec50:	e0bffc17 	ldw	r2,-16(fp)
 800ec54:	10001026 	beq	r2,zero,800ec98 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800ec58:	e0bffc17 	ldw	r2,-16(fp)
 800ec5c:	10800017 	ldw	r2,0(r2)
 800ec60:	10800717 	ldw	r2,28(r2)
 800ec64:	10000926 	beq	r2,zero,800ec8c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800ec68:	e0bffc17 	ldw	r2,-16(fp)
 800ec6c:	10800017 	ldw	r2,0(r2)
 800ec70:	10800717 	ldw	r2,28(r2)
 800ec74:	e13ffc17 	ldw	r4,-16(fp)
 800ec78:	e17ffe17 	ldw	r5,-8(fp)
 800ec7c:	e1bfff17 	ldw	r6,-4(fp)
 800ec80:	103ee83a 	callr	r2
 800ec84:	e0bffb15 	stw	r2,-20(fp)
 800ec88:	00000506 	br	800eca0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800ec8c:	00bfde84 	movi	r2,-134
 800ec90:	e0bffb15 	stw	r2,-20(fp)
 800ec94:	00000206 	br	800eca0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800ec98:	00bfebc4 	movi	r2,-81
 800ec9c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800eca0:	e0bffb17 	ldw	r2,-20(fp)
 800eca4:	1000070e 	bge	r2,zero,800ecc4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 800eca8:	800ebb00 	call	800ebb0 <alt_get_errno>
 800ecac:	1007883a 	mov	r3,r2
 800ecb0:	e0bffb17 	ldw	r2,-20(fp)
 800ecb4:	0085c83a 	sub	r2,zero,r2
 800ecb8:	18800015 	stw	r2,0(r3)
    rc = -1;
 800ecbc:	00bfffc4 	movi	r2,-1
 800ecc0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800ecc4:	e0bffb17 	ldw	r2,-20(fp)
}
 800ecc8:	e037883a 	mov	sp,fp
 800eccc:	dfc00117 	ldw	ra,4(sp)
 800ecd0:	df000017 	ldw	fp,0(sp)
 800ecd4:	dec00204 	addi	sp,sp,8
 800ecd8:	f800283a 	ret

0800ecdc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800ecdc:	defffd04 	addi	sp,sp,-12
 800ece0:	dfc00215 	stw	ra,8(sp)
 800ece4:	df000115 	stw	fp,4(sp)
 800ece8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800ecec:	0009883a 	mov	r4,zero
 800ecf0:	800f4740 	call	800f474 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800ecf4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800ecf8:	800f4a80 	call	800f4a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800ecfc:	01020074 	movhi	r4,2049
 800ed00:	21084804 	addi	r4,r4,8480
 800ed04:	01420074 	movhi	r5,2049
 800ed08:	29484804 	addi	r5,r5,8480
 800ed0c:	01820074 	movhi	r6,2049
 800ed10:	31884804 	addi	r6,r6,8480
 800ed14:	80114000 	call	8011400 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800ed18:	8010d040 	call	8010d04 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800ed1c:	01020074 	movhi	r4,2049
 800ed20:	21035804 	addi	r4,r4,3424
 800ed24:	80116340 	call	8011634 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800ed28:	d1270517 	ldw	r4,-25580(gp)
 800ed2c:	d0e70617 	ldw	r3,-25576(gp)
 800ed30:	d0a70717 	ldw	r2,-25572(gp)
 800ed34:	180b883a 	mov	r5,r3
 800ed38:	100d883a 	mov	r6,r2
 800ed3c:	80001f80 	call	80001f8 <main>
 800ed40:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800ed44:	01000044 	movi	r4,1
 800ed48:	800e7c40 	call	800e7c4 <close>
  exit (result);
 800ed4c:	e13fff17 	ldw	r4,-4(fp)
 800ed50:	80116480 	call	8011648 <exit>

0800ed54 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800ed54:	defffe04 	addi	sp,sp,-8
 800ed58:	df000115 	stw	fp,4(sp)
 800ed5c:	df000104 	addi	fp,sp,4
 800ed60:	e13fff15 	stw	r4,-4(fp)
}
 800ed64:	e037883a 	mov	sp,fp
 800ed68:	df000017 	ldw	fp,0(sp)
 800ed6c:	dec00104 	addi	sp,sp,4
 800ed70:	f800283a 	ret

0800ed74 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800ed74:	defffe04 	addi	sp,sp,-8
 800ed78:	df000115 	stw	fp,4(sp)
 800ed7c:	df000104 	addi	fp,sp,4
 800ed80:	e13fff15 	stw	r4,-4(fp)
}
 800ed84:	e037883a 	mov	sp,fp
 800ed88:	df000017 	ldw	fp,0(sp)
 800ed8c:	dec00104 	addi	sp,sp,4
 800ed90:	f800283a 	ret

0800ed94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ed94:	defffe04 	addi	sp,sp,-8
 800ed98:	dfc00115 	stw	ra,4(sp)
 800ed9c:	df000015 	stw	fp,0(sp)
 800eda0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800eda4:	00820074 	movhi	r2,2049
 800eda8:	108f3d04 	addi	r2,r2,15604
 800edac:	10800017 	ldw	r2,0(r2)
 800edb0:	10000526 	beq	r2,zero,800edc8 <alt_get_errno+0x34>
 800edb4:	00820074 	movhi	r2,2049
 800edb8:	108f3d04 	addi	r2,r2,15604
 800edbc:	10800017 	ldw	r2,0(r2)
 800edc0:	103ee83a 	callr	r2
 800edc4:	00000206 	br	800edd0 <alt_get_errno+0x3c>
 800edc8:	00820074 	movhi	r2,2049
 800edcc:	10962f04 	addi	r2,r2,22716
}
 800edd0:	e037883a 	mov	sp,fp
 800edd4:	dfc00117 	ldw	ra,4(sp)
 800edd8:	df000017 	ldw	fp,0(sp)
 800eddc:	dec00204 	addi	sp,sp,8
 800ede0:	f800283a 	ret

0800ede4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800ede4:	defffb04 	addi	sp,sp,-20
 800ede8:	dfc00415 	stw	ra,16(sp)
 800edec:	df000315 	stw	fp,12(sp)
 800edf0:	dc000215 	stw	r16,8(sp)
 800edf4:	df000304 	addi	fp,sp,12
 800edf8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800edfc:	e0bffe17 	ldw	r2,-8(fp)
 800ee00:	10800217 	ldw	r2,8(r2)
 800ee04:	10d00034 	orhi	r3,r2,16384
 800ee08:	e0bffe17 	ldw	r2,-8(fp)
 800ee0c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800ee10:	e03ffd15 	stw	zero,-12(fp)
 800ee14:	00002306 	br	800eea4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800ee18:	04020074 	movhi	r16,2049
 800ee1c:	840a8804 	addi	r16,r16,10784
 800ee20:	e0bffd17 	ldw	r2,-12(fp)
 800ee24:	1009883a 	mov	r4,r2
 800ee28:	01400304 	movi	r5,12
 800ee2c:	800bf500 	call	800bf50 <__mulsi3>
 800ee30:	8085883a 	add	r2,r16,r2
 800ee34:	10c00017 	ldw	r3,0(r2)
 800ee38:	e0bffe17 	ldw	r2,-8(fp)
 800ee3c:	10800017 	ldw	r2,0(r2)
 800ee40:	1880151e 	bne	r3,r2,800ee98 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800ee44:	04020074 	movhi	r16,2049
 800ee48:	840a8804 	addi	r16,r16,10784
 800ee4c:	e0bffd17 	ldw	r2,-12(fp)
 800ee50:	1009883a 	mov	r4,r2
 800ee54:	01400304 	movi	r5,12
 800ee58:	800bf500 	call	800bf50 <__mulsi3>
 800ee5c:	8085883a 	add	r2,r16,r2
 800ee60:	10800204 	addi	r2,r2,8
 800ee64:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800ee68:	10000b0e 	bge	r2,zero,800ee98 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800ee6c:	e13ffd17 	ldw	r4,-12(fp)
 800ee70:	01400304 	movi	r5,12
 800ee74:	800bf500 	call	800bf50 <__mulsi3>
 800ee78:	1007883a 	mov	r3,r2
 800ee7c:	00820074 	movhi	r2,2049
 800ee80:	108a8804 	addi	r2,r2,10784
 800ee84:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800ee88:	e0bffe17 	ldw	r2,-8(fp)
 800ee8c:	18800226 	beq	r3,r2,800ee98 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800ee90:	00bffcc4 	movi	r2,-13
 800ee94:	00000a06 	br	800eec0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800ee98:	e0bffd17 	ldw	r2,-12(fp)
 800ee9c:	10800044 	addi	r2,r2,1
 800eea0:	e0bffd15 	stw	r2,-12(fp)
 800eea4:	00820074 	movhi	r2,2049
 800eea8:	108f3c04 	addi	r2,r2,15600
 800eeac:	10800017 	ldw	r2,0(r2)
 800eeb0:	1007883a 	mov	r3,r2
 800eeb4:	e0bffd17 	ldw	r2,-12(fp)
 800eeb8:	18bfd72e 	bgeu	r3,r2,800ee18 <__alt_data_end+0xfc00ee18>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800eebc:	0005883a 	mov	r2,zero
}
 800eec0:	e6ffff04 	addi	sp,fp,-4
 800eec4:	dfc00217 	ldw	ra,8(sp)
 800eec8:	df000117 	ldw	fp,4(sp)
 800eecc:	dc000017 	ldw	r16,0(sp)
 800eed0:	dec00304 	addi	sp,sp,12
 800eed4:	f800283a 	ret

0800eed8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800eed8:	defff604 	addi	sp,sp,-40
 800eedc:	dfc00915 	stw	ra,36(sp)
 800eee0:	df000815 	stw	fp,32(sp)
 800eee4:	df000804 	addi	fp,sp,32
 800eee8:	e13ffd15 	stw	r4,-12(fp)
 800eeec:	e17ffe15 	stw	r5,-8(fp)
 800eef0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800eef4:	00bfffc4 	movi	r2,-1
 800eef8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800eefc:	00bffb44 	movi	r2,-19
 800ef00:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800ef04:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800ef08:	e13ffd17 	ldw	r4,-12(fp)
 800ef0c:	01420074 	movhi	r5,2049
 800ef10:	294f3a04 	addi	r5,r5,15592
 800ef14:	8010dbc0 	call	8010dbc <alt_find_dev>
 800ef18:	e0bff815 	stw	r2,-32(fp)
 800ef1c:	e0bff817 	ldw	r2,-32(fp)
 800ef20:	1000051e 	bne	r2,zero,800ef38 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800ef24:	e13ffd17 	ldw	r4,-12(fp)
 800ef28:	8010e4c0 	call	8010e4c <alt_find_file>
 800ef2c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800ef30:	00800044 	movi	r2,1
 800ef34:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800ef38:	e0bff817 	ldw	r2,-32(fp)
 800ef3c:	10002b26 	beq	r2,zero,800efec <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800ef40:	e13ff817 	ldw	r4,-32(fp)
 800ef44:	8010f600 	call	8010f60 <alt_get_fd>
 800ef48:	e0bff915 	stw	r2,-28(fp)
 800ef4c:	e0bff917 	ldw	r2,-28(fp)
 800ef50:	1000030e 	bge	r2,zero,800ef60 <open+0x88>
    {
      status = index;
 800ef54:	e0bff917 	ldw	r2,-28(fp)
 800ef58:	e0bffa15 	stw	r2,-24(fp)
 800ef5c:	00002506 	br	800eff4 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 800ef60:	e13ff917 	ldw	r4,-28(fp)
 800ef64:	01400304 	movi	r5,12
 800ef68:	800bf500 	call	800bf50 <__mulsi3>
 800ef6c:	1007883a 	mov	r3,r2
 800ef70:	00820074 	movhi	r2,2049
 800ef74:	108a8804 	addi	r2,r2,10784
 800ef78:	1885883a 	add	r2,r3,r2
 800ef7c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800ef80:	e0fffe17 	ldw	r3,-8(fp)
 800ef84:	00900034 	movhi	r2,16384
 800ef88:	10bfffc4 	addi	r2,r2,-1
 800ef8c:	1886703a 	and	r3,r3,r2
 800ef90:	e0bffc17 	ldw	r2,-16(fp)
 800ef94:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800ef98:	e0bffb17 	ldw	r2,-20(fp)
 800ef9c:	1000051e 	bne	r2,zero,800efb4 <open+0xdc>
 800efa0:	e13ffc17 	ldw	r4,-16(fp)
 800efa4:	800ede40 	call	800ede4 <alt_file_locked>
 800efa8:	e0bffa15 	stw	r2,-24(fp)
 800efac:	e0bffa17 	ldw	r2,-24(fp)
 800efb0:	10001016 	blt	r2,zero,800eff4 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800efb4:	e0bff817 	ldw	r2,-32(fp)
 800efb8:	10800317 	ldw	r2,12(r2)
 800efbc:	10000826 	beq	r2,zero,800efe0 <open+0x108>
 800efc0:	e0bff817 	ldw	r2,-32(fp)
 800efc4:	10800317 	ldw	r2,12(r2)
 800efc8:	e13ffc17 	ldw	r4,-16(fp)
 800efcc:	e17ffd17 	ldw	r5,-12(fp)
 800efd0:	e1bffe17 	ldw	r6,-8(fp)
 800efd4:	e1ffff17 	ldw	r7,-4(fp)
 800efd8:	103ee83a 	callr	r2
 800efdc:	00000106 	br	800efe4 <open+0x10c>
 800efe0:	0005883a 	mov	r2,zero
 800efe4:	e0bffa15 	stw	r2,-24(fp)
 800efe8:	00000206 	br	800eff4 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800efec:	00bffb44 	movi	r2,-19
 800eff0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800eff4:	e0bffa17 	ldw	r2,-24(fp)
 800eff8:	1000090e 	bge	r2,zero,800f020 <open+0x148>
  {
    alt_release_fd (index);  
 800effc:	e13ff917 	ldw	r4,-28(fp)
 800f000:	800f18c0 	call	800f18c <alt_release_fd>
    ALT_ERRNO = -status;
 800f004:	800ed940 	call	800ed94 <alt_get_errno>
 800f008:	1007883a 	mov	r3,r2
 800f00c:	e0bffa17 	ldw	r2,-24(fp)
 800f010:	0085c83a 	sub	r2,zero,r2
 800f014:	18800015 	stw	r2,0(r3)
    return -1;
 800f018:	00bfffc4 	movi	r2,-1
 800f01c:	00000106 	br	800f024 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 800f020:	e0bff917 	ldw	r2,-28(fp)
}
 800f024:	e037883a 	mov	sp,fp
 800f028:	dfc00117 	ldw	ra,4(sp)
 800f02c:	df000017 	ldw	fp,0(sp)
 800f030:	dec00204 	addi	sp,sp,8
 800f034:	f800283a 	ret

0800f038 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f038:	defffe04 	addi	sp,sp,-8
 800f03c:	dfc00115 	stw	ra,4(sp)
 800f040:	df000015 	stw	fp,0(sp)
 800f044:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f048:	00820074 	movhi	r2,2049
 800f04c:	108f3d04 	addi	r2,r2,15604
 800f050:	10800017 	ldw	r2,0(r2)
 800f054:	10000526 	beq	r2,zero,800f06c <alt_get_errno+0x34>
 800f058:	00820074 	movhi	r2,2049
 800f05c:	108f3d04 	addi	r2,r2,15604
 800f060:	10800017 	ldw	r2,0(r2)
 800f064:	103ee83a 	callr	r2
 800f068:	00000206 	br	800f074 <alt_get_errno+0x3c>
 800f06c:	00820074 	movhi	r2,2049
 800f070:	10962f04 	addi	r2,r2,22716
}
 800f074:	e037883a 	mov	sp,fp
 800f078:	dfc00117 	ldw	ra,4(sp)
 800f07c:	df000017 	ldw	fp,0(sp)
 800f080:	dec00204 	addi	sp,sp,8
 800f084:	f800283a 	ret

0800f088 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800f088:	defff904 	addi	sp,sp,-28
 800f08c:	dfc00615 	stw	ra,24(sp)
 800f090:	df000515 	stw	fp,20(sp)
 800f094:	df000504 	addi	fp,sp,20
 800f098:	e13ffd15 	stw	r4,-12(fp)
 800f09c:	e17ffe15 	stw	r5,-8(fp)
 800f0a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f0a4:	e0bffd17 	ldw	r2,-12(fp)
 800f0a8:	10000816 	blt	r2,zero,800f0cc <read+0x44>
 800f0ac:	e13ffd17 	ldw	r4,-12(fp)
 800f0b0:	01400304 	movi	r5,12
 800f0b4:	800bf500 	call	800bf50 <__mulsi3>
 800f0b8:	1007883a 	mov	r3,r2
 800f0bc:	00820074 	movhi	r2,2049
 800f0c0:	108a8804 	addi	r2,r2,10784
 800f0c4:	1885883a 	add	r2,r3,r2
 800f0c8:	00000106 	br	800f0d0 <read+0x48>
 800f0cc:	0005883a 	mov	r2,zero
 800f0d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800f0d4:	e0bffb17 	ldw	r2,-20(fp)
 800f0d8:	10002226 	beq	r2,zero,800f164 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800f0dc:	e0bffb17 	ldw	r2,-20(fp)
 800f0e0:	10800217 	ldw	r2,8(r2)
 800f0e4:	108000cc 	andi	r2,r2,3
 800f0e8:	10800060 	cmpeqi	r2,r2,1
 800f0ec:	1000181e 	bne	r2,zero,800f150 <read+0xc8>
        (fd->dev->read))
 800f0f0:	e0bffb17 	ldw	r2,-20(fp)
 800f0f4:	10800017 	ldw	r2,0(r2)
 800f0f8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800f0fc:	10001426 	beq	r2,zero,800f150 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800f100:	e0bffb17 	ldw	r2,-20(fp)
 800f104:	10800017 	ldw	r2,0(r2)
 800f108:	10800517 	ldw	r2,20(r2)
 800f10c:	e0ffff17 	ldw	r3,-4(fp)
 800f110:	e13ffb17 	ldw	r4,-20(fp)
 800f114:	e17ffe17 	ldw	r5,-8(fp)
 800f118:	180d883a 	mov	r6,r3
 800f11c:	103ee83a 	callr	r2
 800f120:	e0bffc15 	stw	r2,-16(fp)
 800f124:	e0bffc17 	ldw	r2,-16(fp)
 800f128:	1000070e 	bge	r2,zero,800f148 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 800f12c:	800f0380 	call	800f038 <alt_get_errno>
 800f130:	1007883a 	mov	r3,r2
 800f134:	e0bffc17 	ldw	r2,-16(fp)
 800f138:	0085c83a 	sub	r2,zero,r2
 800f13c:	18800015 	stw	r2,0(r3)
          return -1;
 800f140:	00bfffc4 	movi	r2,-1
 800f144:	00000c06 	br	800f178 <read+0xf0>
        }
        return rval;
 800f148:	e0bffc17 	ldw	r2,-16(fp)
 800f14c:	00000a06 	br	800f178 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800f150:	800f0380 	call	800f038 <alt_get_errno>
 800f154:	1007883a 	mov	r3,r2
 800f158:	00800344 	movi	r2,13
 800f15c:	18800015 	stw	r2,0(r3)
 800f160:	00000406 	br	800f174 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800f164:	800f0380 	call	800f038 <alt_get_errno>
 800f168:	1007883a 	mov	r3,r2
 800f16c:	00801444 	movi	r2,81
 800f170:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800f174:	00bfffc4 	movi	r2,-1
}
 800f178:	e037883a 	mov	sp,fp
 800f17c:	dfc00117 	ldw	ra,4(sp)
 800f180:	df000017 	ldw	fp,0(sp)
 800f184:	dec00204 	addi	sp,sp,8
 800f188:	f800283a 	ret

0800f18c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800f18c:	defffc04 	addi	sp,sp,-16
 800f190:	dfc00315 	stw	ra,12(sp)
 800f194:	df000215 	stw	fp,8(sp)
 800f198:	dc000115 	stw	r16,4(sp)
 800f19c:	df000204 	addi	fp,sp,8
 800f1a0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800f1a4:	e0bffe17 	ldw	r2,-8(fp)
 800f1a8:	108000d0 	cmplti	r2,r2,3
 800f1ac:	1000111e 	bne	r2,zero,800f1f4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800f1b0:	04020074 	movhi	r16,2049
 800f1b4:	840a8804 	addi	r16,r16,10784
 800f1b8:	e0bffe17 	ldw	r2,-8(fp)
 800f1bc:	1009883a 	mov	r4,r2
 800f1c0:	01400304 	movi	r5,12
 800f1c4:	800bf500 	call	800bf50 <__mulsi3>
 800f1c8:	8085883a 	add	r2,r16,r2
 800f1cc:	10800204 	addi	r2,r2,8
 800f1d0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800f1d4:	04020074 	movhi	r16,2049
 800f1d8:	840a8804 	addi	r16,r16,10784
 800f1dc:	e0bffe17 	ldw	r2,-8(fp)
 800f1e0:	1009883a 	mov	r4,r2
 800f1e4:	01400304 	movi	r5,12
 800f1e8:	800bf500 	call	800bf50 <__mulsi3>
 800f1ec:	8085883a 	add	r2,r16,r2
 800f1f0:	10000015 	stw	zero,0(r2)
  }
}
 800f1f4:	e6ffff04 	addi	sp,fp,-4
 800f1f8:	dfc00217 	ldw	ra,8(sp)
 800f1fc:	df000117 	ldw	fp,4(sp)
 800f200:	dc000017 	ldw	r16,0(sp)
 800f204:	dec00304 	addi	sp,sp,12
 800f208:	f800283a 	ret

0800f20c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800f20c:	defff904 	addi	sp,sp,-28
 800f210:	df000615 	stw	fp,24(sp)
 800f214:	df000604 	addi	fp,sp,24
 800f218:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f21c:	0005303a 	rdctl	r2,status
 800f220:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f224:	e0fffc17 	ldw	r3,-16(fp)
 800f228:	00bfff84 	movi	r2,-2
 800f22c:	1884703a 	and	r2,r3,r2
 800f230:	1001703a 	wrctl	status,r2
  
  return context;
 800f234:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800f238:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800f23c:	d0a00d17 	ldw	r2,-32716(gp)
 800f240:	10c000c4 	addi	r3,r2,3
 800f244:	00bfff04 	movi	r2,-4
 800f248:	1884703a 	and	r2,r3,r2
 800f24c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800f250:	d0e00d17 	ldw	r3,-32716(gp)
 800f254:	e0bfff17 	ldw	r2,-4(fp)
 800f258:	1887883a 	add	r3,r3,r2
 800f25c:	00830034 	movhi	r2,3072
 800f260:	10800004 	addi	r2,r2,0
 800f264:	10c0062e 	bgeu	r2,r3,800f280 <sbrk+0x74>
 800f268:	e0bffa17 	ldw	r2,-24(fp)
 800f26c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f270:	e0bffd17 	ldw	r2,-12(fp)
 800f274:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800f278:	00bfffc4 	movi	r2,-1
 800f27c:	00000b06 	br	800f2ac <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800f280:	d0a00d17 	ldw	r2,-32716(gp)
 800f284:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800f288:	d0e00d17 	ldw	r3,-32716(gp)
 800f28c:	e0bfff17 	ldw	r2,-4(fp)
 800f290:	1885883a 	add	r2,r3,r2
 800f294:	d0a00d15 	stw	r2,-32716(gp)
 800f298:	e0bffa17 	ldw	r2,-24(fp)
 800f29c:	e0bffe15 	stw	r2,-8(fp)
 800f2a0:	e0bffe17 	ldw	r2,-8(fp)
 800f2a4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800f2a8:	e0bffb17 	ldw	r2,-20(fp)
} 
 800f2ac:	e037883a 	mov	sp,fp
 800f2b0:	df000017 	ldw	fp,0(sp)
 800f2b4:	dec00104 	addi	sp,sp,4
 800f2b8:	f800283a 	ret

0800f2bc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800f2bc:	defffd04 	addi	sp,sp,-12
 800f2c0:	dfc00215 	stw	ra,8(sp)
 800f2c4:	df000115 	stw	fp,4(sp)
 800f2c8:	df000104 	addi	fp,sp,4
 800f2cc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800f2d0:	e13fff17 	ldw	r4,-4(fp)
 800f2d4:	8010a9c0 	call	8010a9c <alt_busy_sleep>
}
 800f2d8:	e037883a 	mov	sp,fp
 800f2dc:	dfc00117 	ldw	ra,4(sp)
 800f2e0:	df000017 	ldw	fp,0(sp)
 800f2e4:	dec00204 	addi	sp,sp,8
 800f2e8:	f800283a 	ret

0800f2ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f2ec:	defffe04 	addi	sp,sp,-8
 800f2f0:	dfc00115 	stw	ra,4(sp)
 800f2f4:	df000015 	stw	fp,0(sp)
 800f2f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f2fc:	00820074 	movhi	r2,2049
 800f300:	108f3d04 	addi	r2,r2,15604
 800f304:	10800017 	ldw	r2,0(r2)
 800f308:	10000526 	beq	r2,zero,800f320 <alt_get_errno+0x34>
 800f30c:	00820074 	movhi	r2,2049
 800f310:	108f3d04 	addi	r2,r2,15604
 800f314:	10800017 	ldw	r2,0(r2)
 800f318:	103ee83a 	callr	r2
 800f31c:	00000206 	br	800f328 <alt_get_errno+0x3c>
 800f320:	00820074 	movhi	r2,2049
 800f324:	10962f04 	addi	r2,r2,22716
}
 800f328:	e037883a 	mov	sp,fp
 800f32c:	dfc00117 	ldw	ra,4(sp)
 800f330:	df000017 	ldw	fp,0(sp)
 800f334:	dec00204 	addi	sp,sp,8
 800f338:	f800283a 	ret

0800f33c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800f33c:	defff904 	addi	sp,sp,-28
 800f340:	dfc00615 	stw	ra,24(sp)
 800f344:	df000515 	stw	fp,20(sp)
 800f348:	df000504 	addi	fp,sp,20
 800f34c:	e13ffd15 	stw	r4,-12(fp)
 800f350:	e17ffe15 	stw	r5,-8(fp)
 800f354:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f358:	e0bffd17 	ldw	r2,-12(fp)
 800f35c:	10000816 	blt	r2,zero,800f380 <write+0x44>
 800f360:	e13ffd17 	ldw	r4,-12(fp)
 800f364:	01400304 	movi	r5,12
 800f368:	800bf500 	call	800bf50 <__mulsi3>
 800f36c:	1007883a 	mov	r3,r2
 800f370:	00820074 	movhi	r2,2049
 800f374:	108a8804 	addi	r2,r2,10784
 800f378:	1885883a 	add	r2,r3,r2
 800f37c:	00000106 	br	800f384 <write+0x48>
 800f380:	0005883a 	mov	r2,zero
 800f384:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800f388:	e0bffb17 	ldw	r2,-20(fp)
 800f38c:	10002126 	beq	r2,zero,800f414 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800f390:	e0bffb17 	ldw	r2,-20(fp)
 800f394:	10800217 	ldw	r2,8(r2)
 800f398:	108000cc 	andi	r2,r2,3
 800f39c:	10001826 	beq	r2,zero,800f400 <write+0xc4>
 800f3a0:	e0bffb17 	ldw	r2,-20(fp)
 800f3a4:	10800017 	ldw	r2,0(r2)
 800f3a8:	10800617 	ldw	r2,24(r2)
 800f3ac:	10001426 	beq	r2,zero,800f400 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800f3b0:	e0bffb17 	ldw	r2,-20(fp)
 800f3b4:	10800017 	ldw	r2,0(r2)
 800f3b8:	10800617 	ldw	r2,24(r2)
 800f3bc:	e0ffff17 	ldw	r3,-4(fp)
 800f3c0:	e13ffb17 	ldw	r4,-20(fp)
 800f3c4:	e17ffe17 	ldw	r5,-8(fp)
 800f3c8:	180d883a 	mov	r6,r3
 800f3cc:	103ee83a 	callr	r2
 800f3d0:	e0bffc15 	stw	r2,-16(fp)
 800f3d4:	e0bffc17 	ldw	r2,-16(fp)
 800f3d8:	1000070e 	bge	r2,zero,800f3f8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 800f3dc:	800f2ec0 	call	800f2ec <alt_get_errno>
 800f3e0:	1007883a 	mov	r3,r2
 800f3e4:	e0bffc17 	ldw	r2,-16(fp)
 800f3e8:	0085c83a 	sub	r2,zero,r2
 800f3ec:	18800015 	stw	r2,0(r3)
        return -1;
 800f3f0:	00bfffc4 	movi	r2,-1
 800f3f4:	00000c06 	br	800f428 <write+0xec>
      }
      return rval;
 800f3f8:	e0bffc17 	ldw	r2,-16(fp)
 800f3fc:	00000a06 	br	800f428 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800f400:	800f2ec0 	call	800f2ec <alt_get_errno>
 800f404:	1007883a 	mov	r3,r2
 800f408:	00800344 	movi	r2,13
 800f40c:	18800015 	stw	r2,0(r3)
 800f410:	00000406 	br	800f424 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800f414:	800f2ec0 	call	800f2ec <alt_get_errno>
 800f418:	1007883a 	mov	r3,r2
 800f41c:	00801444 	movi	r2,81
 800f420:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800f424:	00bfffc4 	movi	r2,-1
}
 800f428:	e037883a 	mov	sp,fp
 800f42c:	dfc00117 	ldw	ra,4(sp)
 800f430:	df000017 	ldw	fp,0(sp)
 800f434:	dec00204 	addi	sp,sp,8
 800f438:	f800283a 	ret

0800f43c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800f43c:	defffd04 	addi	sp,sp,-12
 800f440:	dfc00215 	stw	ra,8(sp)
 800f444:	df000115 	stw	fp,4(sp)
 800f448:	df000104 	addi	fp,sp,4
 800f44c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800f450:	e13fff17 	ldw	r4,-4(fp)
 800f454:	01420074 	movhi	r5,2049
 800f458:	294f3a04 	addi	r5,r5,15592
 800f45c:	8010c600 	call	8010c60 <alt_dev_llist_insert>
}
 800f460:	e037883a 	mov	sp,fp
 800f464:	dfc00117 	ldw	ra,4(sp)
 800f468:	df000017 	ldw	fp,0(sp)
 800f46c:	dec00204 	addi	sp,sp,8
 800f470:	f800283a 	ret

0800f474 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800f474:	defffd04 	addi	sp,sp,-12
 800f478:	dfc00215 	stw	ra,8(sp)
 800f47c:	df000115 	stw	fp,4(sp)
 800f480:	df000104 	addi	fp,sp,4
 800f484:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 800f488:	80116140 	call	8011614 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800f48c:	00800044 	movi	r2,1
 800f490:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800f494:	e037883a 	mov	sp,fp
 800f498:	dfc00117 	ldw	ra,4(sp)
 800f49c:	df000017 	ldw	fp,0(sp)
 800f4a0:	dec00204 	addi	sp,sp,8
 800f4a4:	f800283a 	ret

0800f4a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800f4a8:	defffe04 	addi	sp,sp,-8
 800f4ac:	dfc00115 	stw	ra,4(sp)
 800f4b0:	df000015 	stw	fp,0(sp)
 800f4b4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800f4b8:	01000074 	movhi	r4,1
 800f4bc:	21040804 	addi	r4,r4,4128
 800f4c0:	000b883a 	mov	r5,zero
 800f4c4:	000d883a 	mov	r6,zero
 800f4c8:	01c0fa04 	movi	r7,1000
 800f4cc:	800ffe40 	call	800ffe4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800f4d0:	01020074 	movhi	r4,2049
 800f4d4:	210af204 	addi	r4,r4,11208
 800f4d8:	000b883a 	mov	r5,zero
 800f4dc:	01800144 	movi	r6,5
 800f4e0:	800f6880 	call	800f688 <altera_avalon_jtag_uart_init>
 800f4e4:	01020074 	movhi	r4,2049
 800f4e8:	210ae804 	addi	r4,r4,11168
 800f4ec:	800f43c0 	call	800f43c <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
 800f4f0:	01020074 	movhi	r4,2049
 800f4f4:	210f0a04 	addi	r4,r4,15400
 800f4f8:	000b883a 	mov	r5,zero
 800f4fc:	01800044 	movi	r6,1
 800f500:	801017c0 	call	801017c <altera_avalon_uart_init>
 800f504:	01020074 	movhi	r4,2049
 800f508:	210f0004 	addi	r4,r4,15360
 800f50c:	800f43c0 	call	800f43c <alt_dev_reg>
}
 800f510:	e037883a 	mov	sp,fp
 800f514:	dfc00117 	ldw	ra,4(sp)
 800f518:	df000017 	ldw	fp,0(sp)
 800f51c:	dec00204 	addi	sp,sp,8
 800f520:	f800283a 	ret

0800f524 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800f524:	defffa04 	addi	sp,sp,-24
 800f528:	dfc00515 	stw	ra,20(sp)
 800f52c:	df000415 	stw	fp,16(sp)
 800f530:	df000404 	addi	fp,sp,16
 800f534:	e13ffd15 	stw	r4,-12(fp)
 800f538:	e17ffe15 	stw	r5,-8(fp)
 800f53c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f540:	e0bffd17 	ldw	r2,-12(fp)
 800f544:	10800017 	ldw	r2,0(r2)
 800f548:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800f54c:	e0bffc17 	ldw	r2,-16(fp)
 800f550:	10c00a04 	addi	r3,r2,40
 800f554:	e0bffd17 	ldw	r2,-12(fp)
 800f558:	10800217 	ldw	r2,8(r2)
 800f55c:	1809883a 	mov	r4,r3
 800f560:	e17ffe17 	ldw	r5,-8(fp)
 800f564:	e1bfff17 	ldw	r6,-4(fp)
 800f568:	100f883a 	mov	r7,r2
 800f56c:	800fb4c0 	call	800fb4c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800f570:	e037883a 	mov	sp,fp
 800f574:	dfc00117 	ldw	ra,4(sp)
 800f578:	df000017 	ldw	fp,0(sp)
 800f57c:	dec00204 	addi	sp,sp,8
 800f580:	f800283a 	ret

0800f584 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800f584:	defffa04 	addi	sp,sp,-24
 800f588:	dfc00515 	stw	ra,20(sp)
 800f58c:	df000415 	stw	fp,16(sp)
 800f590:	df000404 	addi	fp,sp,16
 800f594:	e13ffd15 	stw	r4,-12(fp)
 800f598:	e17ffe15 	stw	r5,-8(fp)
 800f59c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f5a0:	e0bffd17 	ldw	r2,-12(fp)
 800f5a4:	10800017 	ldw	r2,0(r2)
 800f5a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800f5ac:	e0bffc17 	ldw	r2,-16(fp)
 800f5b0:	10c00a04 	addi	r3,r2,40
 800f5b4:	e0bffd17 	ldw	r2,-12(fp)
 800f5b8:	10800217 	ldw	r2,8(r2)
 800f5bc:	1809883a 	mov	r4,r3
 800f5c0:	e17ffe17 	ldw	r5,-8(fp)
 800f5c4:	e1bfff17 	ldw	r6,-4(fp)
 800f5c8:	100f883a 	mov	r7,r2
 800f5cc:	800fd580 	call	800fd58 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800f5d0:	e037883a 	mov	sp,fp
 800f5d4:	dfc00117 	ldw	ra,4(sp)
 800f5d8:	df000017 	ldw	fp,0(sp)
 800f5dc:	dec00204 	addi	sp,sp,8
 800f5e0:	f800283a 	ret

0800f5e4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800f5e4:	defffc04 	addi	sp,sp,-16
 800f5e8:	dfc00315 	stw	ra,12(sp)
 800f5ec:	df000215 	stw	fp,8(sp)
 800f5f0:	df000204 	addi	fp,sp,8
 800f5f4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f5f8:	e0bfff17 	ldw	r2,-4(fp)
 800f5fc:	10800017 	ldw	r2,0(r2)
 800f600:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800f604:	e0bffe17 	ldw	r2,-8(fp)
 800f608:	10c00a04 	addi	r3,r2,40
 800f60c:	e0bfff17 	ldw	r2,-4(fp)
 800f610:	10800217 	ldw	r2,8(r2)
 800f614:	1809883a 	mov	r4,r3
 800f618:	100b883a 	mov	r5,r2
 800f61c:	800f9f80 	call	800f9f8 <altera_avalon_jtag_uart_close>
}
 800f620:	e037883a 	mov	sp,fp
 800f624:	dfc00117 	ldw	ra,4(sp)
 800f628:	df000017 	ldw	fp,0(sp)
 800f62c:	dec00204 	addi	sp,sp,8
 800f630:	f800283a 	ret

0800f634 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800f634:	defffa04 	addi	sp,sp,-24
 800f638:	dfc00515 	stw	ra,20(sp)
 800f63c:	df000415 	stw	fp,16(sp)
 800f640:	df000404 	addi	fp,sp,16
 800f644:	e13ffd15 	stw	r4,-12(fp)
 800f648:	e17ffe15 	stw	r5,-8(fp)
 800f64c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800f650:	e0bffd17 	ldw	r2,-12(fp)
 800f654:	10800017 	ldw	r2,0(r2)
 800f658:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800f65c:	e0bffc17 	ldw	r2,-16(fp)
 800f660:	10800a04 	addi	r2,r2,40
 800f664:	1009883a 	mov	r4,r2
 800f668:	e17ffe17 	ldw	r5,-8(fp)
 800f66c:	e1bfff17 	ldw	r6,-4(fp)
 800f670:	800fa600 	call	800fa60 <altera_avalon_jtag_uart_ioctl>
}
 800f674:	e037883a 	mov	sp,fp
 800f678:	dfc00117 	ldw	ra,4(sp)
 800f67c:	df000017 	ldw	fp,0(sp)
 800f680:	dec00204 	addi	sp,sp,8
 800f684:	f800283a 	ret

0800f688 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800f688:	defffa04 	addi	sp,sp,-24
 800f68c:	dfc00515 	stw	ra,20(sp)
 800f690:	df000415 	stw	fp,16(sp)
 800f694:	df000404 	addi	fp,sp,16
 800f698:	e13ffd15 	stw	r4,-12(fp)
 800f69c:	e17ffe15 	stw	r5,-8(fp)
 800f6a0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f6a4:	e0bffd17 	ldw	r2,-12(fp)
 800f6a8:	00c00044 	movi	r3,1
 800f6ac:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800f6b0:	e0bffd17 	ldw	r2,-12(fp)
 800f6b4:	10800017 	ldw	r2,0(r2)
 800f6b8:	10800104 	addi	r2,r2,4
 800f6bc:	1007883a 	mov	r3,r2
 800f6c0:	e0bffd17 	ldw	r2,-12(fp)
 800f6c4:	10800817 	ldw	r2,32(r2)
 800f6c8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800f6cc:	e0fffe17 	ldw	r3,-8(fp)
 800f6d0:	e0bfff17 	ldw	r2,-4(fp)
 800f6d4:	d8000015 	stw	zero,0(sp)
 800f6d8:	1809883a 	mov	r4,r3
 800f6dc:	100b883a 	mov	r5,r2
 800f6e0:	01820074 	movhi	r6,2049
 800f6e4:	31bdd304 	addi	r6,r6,-2228
 800f6e8:	e1fffd17 	ldw	r7,-12(fp)
 800f6ec:	80110500 	call	8011050 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800f6f0:	e0bffd17 	ldw	r2,-12(fp)
 800f6f4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800f6f8:	e0bffd17 	ldw	r2,-12(fp)
 800f6fc:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800f700:	00820074 	movhi	r2,2049
 800f704:	10963a04 	addi	r2,r2,22760
 800f708:	10800017 	ldw	r2,0(r2)
 800f70c:	1809883a 	mov	r4,r3
 800f710:	100b883a 	mov	r5,r2
 800f714:	01820074 	movhi	r6,2049
 800f718:	31be5404 	addi	r6,r6,-1712
 800f71c:	e1fffd17 	ldw	r7,-12(fp)
 800f720:	801095c0 	call	801095c <alt_alarm_start>
 800f724:	1000040e 	bge	r2,zero,800f738 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800f728:	e0fffd17 	ldw	r3,-12(fp)
 800f72c:	00a00034 	movhi	r2,32768
 800f730:	10bfffc4 	addi	r2,r2,-1
 800f734:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800f738:	e037883a 	mov	sp,fp
 800f73c:	dfc00117 	ldw	ra,4(sp)
 800f740:	df000017 	ldw	fp,0(sp)
 800f744:	dec00204 	addi	sp,sp,8
 800f748:	f800283a 	ret

0800f74c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800f74c:	defff804 	addi	sp,sp,-32
 800f750:	df000715 	stw	fp,28(sp)
 800f754:	df000704 	addi	fp,sp,28
 800f758:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800f75c:	e0bfff17 	ldw	r2,-4(fp)
 800f760:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800f764:	e0bffb17 	ldw	r2,-20(fp)
 800f768:	10800017 	ldw	r2,0(r2)
 800f76c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f770:	e0bffc17 	ldw	r2,-16(fp)
 800f774:	10800104 	addi	r2,r2,4
 800f778:	10800037 	ldwio	r2,0(r2)
 800f77c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800f780:	e0bffd17 	ldw	r2,-12(fp)
 800f784:	1080c00c 	andi	r2,r2,768
 800f788:	1000011e 	bne	r2,zero,800f790 <altera_avalon_jtag_uart_irq+0x44>
      break;
 800f78c:	00006c06 	br	800f940 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800f790:	e0bffd17 	ldw	r2,-12(fp)
 800f794:	1080400c 	andi	r2,r2,256
 800f798:	10003426 	beq	r2,zero,800f86c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800f79c:	00800074 	movhi	r2,1
 800f7a0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f7a4:	e0bffb17 	ldw	r2,-20(fp)
 800f7a8:	10800a17 	ldw	r2,40(r2)
 800f7ac:	10800044 	addi	r2,r2,1
 800f7b0:	1081ffcc 	andi	r2,r2,2047
 800f7b4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800f7b8:	e0bffb17 	ldw	r2,-20(fp)
 800f7bc:	10c00b17 	ldw	r3,44(r2)
 800f7c0:	e0bffe17 	ldw	r2,-8(fp)
 800f7c4:	1880011e 	bne	r3,r2,800f7cc <altera_avalon_jtag_uart_irq+0x80>
          break;
 800f7c8:	00001606 	br	800f824 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800f7cc:	e0bffc17 	ldw	r2,-16(fp)
 800f7d0:	10800037 	ldwio	r2,0(r2)
 800f7d4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800f7d8:	e0bff917 	ldw	r2,-28(fp)
 800f7dc:	10a0000c 	andi	r2,r2,32768
 800f7e0:	1000011e 	bne	r2,zero,800f7e8 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 800f7e4:	00000f06 	br	800f824 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800f7e8:	e0bffb17 	ldw	r2,-20(fp)
 800f7ec:	10800a17 	ldw	r2,40(r2)
 800f7f0:	e0fff917 	ldw	r3,-28(fp)
 800f7f4:	1809883a 	mov	r4,r3
 800f7f8:	e0fffb17 	ldw	r3,-20(fp)
 800f7fc:	1885883a 	add	r2,r3,r2
 800f800:	10800e04 	addi	r2,r2,56
 800f804:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f808:	e0bffb17 	ldw	r2,-20(fp)
 800f80c:	10800a17 	ldw	r2,40(r2)
 800f810:	10800044 	addi	r2,r2,1
 800f814:	10c1ffcc 	andi	r3,r2,2047
 800f818:	e0bffb17 	ldw	r2,-20(fp)
 800f81c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800f820:	003fe006 	br	800f7a4 <__alt_data_end+0xfc00f7a4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800f824:	e0bff917 	ldw	r2,-28(fp)
 800f828:	10bfffec 	andhi	r2,r2,65535
 800f82c:	10000f26 	beq	r2,zero,800f86c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f830:	e0bffb17 	ldw	r2,-20(fp)
 800f834:	10c00817 	ldw	r3,32(r2)
 800f838:	00bfff84 	movi	r2,-2
 800f83c:	1886703a 	and	r3,r3,r2
 800f840:	e0bffb17 	ldw	r2,-20(fp)
 800f844:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800f848:	e0bffc17 	ldw	r2,-16(fp)
 800f84c:	10800104 	addi	r2,r2,4
 800f850:	1007883a 	mov	r3,r2
 800f854:	e0bffb17 	ldw	r2,-20(fp)
 800f858:	10800817 	ldw	r2,32(r2)
 800f85c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f860:	e0bffc17 	ldw	r2,-16(fp)
 800f864:	10800104 	addi	r2,r2,4
 800f868:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800f86c:	e0bffd17 	ldw	r2,-12(fp)
 800f870:	1080800c 	andi	r2,r2,512
 800f874:	10003126 	beq	r2,zero,800f93c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800f878:	e0bffd17 	ldw	r2,-12(fp)
 800f87c:	1004d43a 	srli	r2,r2,16
 800f880:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f884:	00001406 	br	800f8d8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800f888:	e0bffc17 	ldw	r2,-16(fp)
 800f88c:	e0fffb17 	ldw	r3,-20(fp)
 800f890:	18c00d17 	ldw	r3,52(r3)
 800f894:	e13ffb17 	ldw	r4,-20(fp)
 800f898:	20c7883a 	add	r3,r4,r3
 800f89c:	18c20e04 	addi	r3,r3,2104
 800f8a0:	18c00003 	ldbu	r3,0(r3)
 800f8a4:	18c03fcc 	andi	r3,r3,255
 800f8a8:	18c0201c 	xori	r3,r3,128
 800f8ac:	18ffe004 	addi	r3,r3,-128
 800f8b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f8b4:	e0bffb17 	ldw	r2,-20(fp)
 800f8b8:	10800d17 	ldw	r2,52(r2)
 800f8bc:	10800044 	addi	r2,r2,1
 800f8c0:	10c1ffcc 	andi	r3,r2,2047
 800f8c4:	e0bffb17 	ldw	r2,-20(fp)
 800f8c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800f8cc:	e0bffa17 	ldw	r2,-24(fp)
 800f8d0:	10bfffc4 	addi	r2,r2,-1
 800f8d4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f8d8:	e0bffa17 	ldw	r2,-24(fp)
 800f8dc:	10000526 	beq	r2,zero,800f8f4 <altera_avalon_jtag_uart_irq+0x1a8>
 800f8e0:	e0bffb17 	ldw	r2,-20(fp)
 800f8e4:	10c00d17 	ldw	r3,52(r2)
 800f8e8:	e0bffb17 	ldw	r2,-20(fp)
 800f8ec:	10800c17 	ldw	r2,48(r2)
 800f8f0:	18bfe51e 	bne	r3,r2,800f888 <__alt_data_end+0xfc00f888>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800f8f4:	e0bffa17 	ldw	r2,-24(fp)
 800f8f8:	10001026 	beq	r2,zero,800f93c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800f8fc:	e0bffb17 	ldw	r2,-20(fp)
 800f900:	10c00817 	ldw	r3,32(r2)
 800f904:	00bfff44 	movi	r2,-3
 800f908:	1886703a 	and	r3,r3,r2
 800f90c:	e0bffb17 	ldw	r2,-20(fp)
 800f910:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800f914:	e0bffb17 	ldw	r2,-20(fp)
 800f918:	10800017 	ldw	r2,0(r2)
 800f91c:	10800104 	addi	r2,r2,4
 800f920:	1007883a 	mov	r3,r2
 800f924:	e0bffb17 	ldw	r2,-20(fp)
 800f928:	10800817 	ldw	r2,32(r2)
 800f92c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f930:	e0bffc17 	ldw	r2,-16(fp)
 800f934:	10800104 	addi	r2,r2,4
 800f938:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800f93c:	003f8c06 	br	800f770 <__alt_data_end+0xfc00f770>
}
 800f940:	e037883a 	mov	sp,fp
 800f944:	df000017 	ldw	fp,0(sp)
 800f948:	dec00104 	addi	sp,sp,4
 800f94c:	f800283a 	ret

0800f950 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800f950:	defff804 	addi	sp,sp,-32
 800f954:	df000715 	stw	fp,28(sp)
 800f958:	df000704 	addi	fp,sp,28
 800f95c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800f960:	e0bffb17 	ldw	r2,-20(fp)
 800f964:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800f968:	e0bff917 	ldw	r2,-28(fp)
 800f96c:	10800017 	ldw	r2,0(r2)
 800f970:	10800104 	addi	r2,r2,4
 800f974:	10800037 	ldwio	r2,0(r2)
 800f978:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800f97c:	e0bffa17 	ldw	r2,-24(fp)
 800f980:	1081000c 	andi	r2,r2,1024
 800f984:	10000b26 	beq	r2,zero,800f9b4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800f988:	e0bff917 	ldw	r2,-28(fp)
 800f98c:	10800017 	ldw	r2,0(r2)
 800f990:	10800104 	addi	r2,r2,4
 800f994:	1007883a 	mov	r3,r2
 800f998:	e0bff917 	ldw	r2,-28(fp)
 800f99c:	10800817 	ldw	r2,32(r2)
 800f9a0:	10810014 	ori	r2,r2,1024
 800f9a4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800f9a8:	e0bff917 	ldw	r2,-28(fp)
 800f9ac:	10000915 	stw	zero,36(r2)
 800f9b0:	00000a06 	br	800f9dc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800f9b4:	e0bff917 	ldw	r2,-28(fp)
 800f9b8:	10c00917 	ldw	r3,36(r2)
 800f9bc:	00a00034 	movhi	r2,32768
 800f9c0:	10bfff04 	addi	r2,r2,-4
 800f9c4:	10c00536 	bltu	r2,r3,800f9dc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800f9c8:	e0bff917 	ldw	r2,-28(fp)
 800f9cc:	10800917 	ldw	r2,36(r2)
 800f9d0:	10c00044 	addi	r3,r2,1
 800f9d4:	e0bff917 	ldw	r2,-28(fp)
 800f9d8:	10c00915 	stw	r3,36(r2)
 800f9dc:	00820074 	movhi	r2,2049
 800f9e0:	10963a04 	addi	r2,r2,22760
 800f9e4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800f9e8:	e037883a 	mov	sp,fp
 800f9ec:	df000017 	ldw	fp,0(sp)
 800f9f0:	dec00104 	addi	sp,sp,4
 800f9f4:	f800283a 	ret

0800f9f8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800f9f8:	defffd04 	addi	sp,sp,-12
 800f9fc:	df000215 	stw	fp,8(sp)
 800fa00:	df000204 	addi	fp,sp,8
 800fa04:	e13ffe15 	stw	r4,-8(fp)
 800fa08:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800fa0c:	00000506 	br	800fa24 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800fa10:	e0bfff17 	ldw	r2,-4(fp)
 800fa14:	1090000c 	andi	r2,r2,16384
 800fa18:	10000226 	beq	r2,zero,800fa24 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800fa1c:	00bffd44 	movi	r2,-11
 800fa20:	00000b06 	br	800fa50 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800fa24:	e0bffe17 	ldw	r2,-8(fp)
 800fa28:	10c00d17 	ldw	r3,52(r2)
 800fa2c:	e0bffe17 	ldw	r2,-8(fp)
 800fa30:	10800c17 	ldw	r2,48(r2)
 800fa34:	18800526 	beq	r3,r2,800fa4c <altera_avalon_jtag_uart_close+0x54>
 800fa38:	e0bffe17 	ldw	r2,-8(fp)
 800fa3c:	10c00917 	ldw	r3,36(r2)
 800fa40:	e0bffe17 	ldw	r2,-8(fp)
 800fa44:	10800117 	ldw	r2,4(r2)
 800fa48:	18bff136 	bltu	r3,r2,800fa10 <__alt_data_end+0xfc00fa10>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800fa4c:	0005883a 	mov	r2,zero
}
 800fa50:	e037883a 	mov	sp,fp
 800fa54:	df000017 	ldw	fp,0(sp)
 800fa58:	dec00104 	addi	sp,sp,4
 800fa5c:	f800283a 	ret

0800fa60 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800fa60:	defffa04 	addi	sp,sp,-24
 800fa64:	df000515 	stw	fp,20(sp)
 800fa68:	df000504 	addi	fp,sp,20
 800fa6c:	e13ffd15 	stw	r4,-12(fp)
 800fa70:	e17ffe15 	stw	r5,-8(fp)
 800fa74:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800fa78:	00bff9c4 	movi	r2,-25
 800fa7c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800fa80:	e0bffe17 	ldw	r2,-8(fp)
 800fa84:	10da8060 	cmpeqi	r3,r2,27137
 800fa88:	1800031e 	bne	r3,zero,800fa98 <altera_avalon_jtag_uart_ioctl+0x38>
 800fa8c:	109a80a0 	cmpeqi	r2,r2,27138
 800fa90:	1000191e 	bne	r2,zero,800faf8 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800fa94:	00002806 	br	800fb38 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800fa98:	e0bffd17 	ldw	r2,-12(fp)
 800fa9c:	10c00117 	ldw	r3,4(r2)
 800faa0:	00a00034 	movhi	r2,32768
 800faa4:	10bfffc4 	addi	r2,r2,-1
 800faa8:	18801226 	beq	r3,r2,800faf4 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 800faac:	e0bfff17 	ldw	r2,-4(fp)
 800fab0:	10800017 	ldw	r2,0(r2)
 800fab4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800fab8:	e0bffc17 	ldw	r2,-16(fp)
 800fabc:	10800090 	cmplti	r2,r2,2
 800fac0:	1000061e 	bne	r2,zero,800fadc <altera_avalon_jtag_uart_ioctl+0x7c>
 800fac4:	e0fffc17 	ldw	r3,-16(fp)
 800fac8:	00a00034 	movhi	r2,32768
 800facc:	10bfffc4 	addi	r2,r2,-1
 800fad0:	18800226 	beq	r3,r2,800fadc <altera_avalon_jtag_uart_ioctl+0x7c>
 800fad4:	e0bffc17 	ldw	r2,-16(fp)
 800fad8:	00000206 	br	800fae4 <altera_avalon_jtag_uart_ioctl+0x84>
 800fadc:	00a00034 	movhi	r2,32768
 800fae0:	10bfff84 	addi	r2,r2,-2
 800fae4:	e0fffd17 	ldw	r3,-12(fp)
 800fae8:	18800115 	stw	r2,4(r3)
      rc = 0;
 800faec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800faf0:	00001106 	br	800fb38 <altera_avalon_jtag_uart_ioctl+0xd8>
 800faf4:	00001006 	br	800fb38 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800faf8:	e0bffd17 	ldw	r2,-12(fp)
 800fafc:	10c00117 	ldw	r3,4(r2)
 800fb00:	00a00034 	movhi	r2,32768
 800fb04:	10bfffc4 	addi	r2,r2,-1
 800fb08:	18800a26 	beq	r3,r2,800fb34 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800fb0c:	e0bffd17 	ldw	r2,-12(fp)
 800fb10:	10c00917 	ldw	r3,36(r2)
 800fb14:	e0bffd17 	ldw	r2,-12(fp)
 800fb18:	10800117 	ldw	r2,4(r2)
 800fb1c:	1885803a 	cmpltu	r2,r3,r2
 800fb20:	10c03fcc 	andi	r3,r2,255
 800fb24:	e0bfff17 	ldw	r2,-4(fp)
 800fb28:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800fb2c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800fb30:	00000006 	br	800fb34 <altera_avalon_jtag_uart_ioctl+0xd4>
 800fb34:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800fb38:	e0bffb17 	ldw	r2,-20(fp)
}
 800fb3c:	e037883a 	mov	sp,fp
 800fb40:	df000017 	ldw	fp,0(sp)
 800fb44:	dec00104 	addi	sp,sp,4
 800fb48:	f800283a 	ret

0800fb4c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800fb4c:	defff304 	addi	sp,sp,-52
 800fb50:	dfc00c15 	stw	ra,48(sp)
 800fb54:	df000b15 	stw	fp,44(sp)
 800fb58:	df000b04 	addi	fp,sp,44
 800fb5c:	e13ffc15 	stw	r4,-16(fp)
 800fb60:	e17ffd15 	stw	r5,-12(fp)
 800fb64:	e1bffe15 	stw	r6,-8(fp)
 800fb68:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800fb6c:	e0bffd17 	ldw	r2,-12(fp)
 800fb70:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800fb74:	00004906 	br	800fc9c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800fb78:	e0bffc17 	ldw	r2,-16(fp)
 800fb7c:	10800a17 	ldw	r2,40(r2)
 800fb80:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800fb84:	e0bffc17 	ldw	r2,-16(fp)
 800fb88:	10800b17 	ldw	r2,44(r2)
 800fb8c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800fb90:	e0fff717 	ldw	r3,-36(fp)
 800fb94:	e0bff817 	ldw	r2,-32(fp)
 800fb98:	18800536 	bltu	r3,r2,800fbb0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800fb9c:	e0fff717 	ldw	r3,-36(fp)
 800fba0:	e0bff817 	ldw	r2,-32(fp)
 800fba4:	1885c83a 	sub	r2,r3,r2
 800fba8:	e0bff615 	stw	r2,-40(fp)
 800fbac:	00000406 	br	800fbc0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800fbb0:	00c20004 	movi	r3,2048
 800fbb4:	e0bff817 	ldw	r2,-32(fp)
 800fbb8:	1885c83a 	sub	r2,r3,r2
 800fbbc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800fbc0:	e0bff617 	ldw	r2,-40(fp)
 800fbc4:	1000011e 	bne	r2,zero,800fbcc <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 800fbc8:	00001d06 	br	800fc40 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 800fbcc:	e0fffe17 	ldw	r3,-8(fp)
 800fbd0:	e0bff617 	ldw	r2,-40(fp)
 800fbd4:	1880022e 	bgeu	r3,r2,800fbe0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800fbd8:	e0bffe17 	ldw	r2,-8(fp)
 800fbdc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800fbe0:	e0bff817 	ldw	r2,-32(fp)
 800fbe4:	10800e04 	addi	r2,r2,56
 800fbe8:	e0fffc17 	ldw	r3,-16(fp)
 800fbec:	1885883a 	add	r2,r3,r2
 800fbf0:	e13ff517 	ldw	r4,-44(fp)
 800fbf4:	100b883a 	mov	r5,r2
 800fbf8:	e1bff617 	ldw	r6,-40(fp)
 800fbfc:	8007c580 	call	8007c58 <memcpy>
      ptr   += n;
 800fc00:	e0fff517 	ldw	r3,-44(fp)
 800fc04:	e0bff617 	ldw	r2,-40(fp)
 800fc08:	1885883a 	add	r2,r3,r2
 800fc0c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800fc10:	e0fffe17 	ldw	r3,-8(fp)
 800fc14:	e0bff617 	ldw	r2,-40(fp)
 800fc18:	1885c83a 	sub	r2,r3,r2
 800fc1c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fc20:	e0fff817 	ldw	r3,-32(fp)
 800fc24:	e0bff617 	ldw	r2,-40(fp)
 800fc28:	1885883a 	add	r2,r3,r2
 800fc2c:	10c1ffcc 	andi	r3,r2,2047
 800fc30:	e0bffc17 	ldw	r2,-16(fp)
 800fc34:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800fc38:	e0bffe17 	ldw	r2,-8(fp)
 800fc3c:	00bfce16 	blt	zero,r2,800fb78 <__alt_data_end+0xfc00fb78>

    /* If we read any data then return it */
    if (ptr != buffer)
 800fc40:	e0fff517 	ldw	r3,-44(fp)
 800fc44:	e0bffd17 	ldw	r2,-12(fp)
 800fc48:	18800126 	beq	r3,r2,800fc50 <altera_avalon_jtag_uart_read+0x104>
      break;
 800fc4c:	00001506 	br	800fca4 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800fc50:	e0bfff17 	ldw	r2,-4(fp)
 800fc54:	1090000c 	andi	r2,r2,16384
 800fc58:	10000126 	beq	r2,zero,800fc60 <altera_avalon_jtag_uart_read+0x114>
      break;
 800fc5c:	00001106 	br	800fca4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800fc60:	0001883a 	nop
 800fc64:	e0bffc17 	ldw	r2,-16(fp)
 800fc68:	10c00a17 	ldw	r3,40(r2)
 800fc6c:	e0bff717 	ldw	r2,-36(fp)
 800fc70:	1880051e 	bne	r3,r2,800fc88 <altera_avalon_jtag_uart_read+0x13c>
 800fc74:	e0bffc17 	ldw	r2,-16(fp)
 800fc78:	10c00917 	ldw	r3,36(r2)
 800fc7c:	e0bffc17 	ldw	r2,-16(fp)
 800fc80:	10800117 	ldw	r2,4(r2)
 800fc84:	18bff736 	bltu	r3,r2,800fc64 <__alt_data_end+0xfc00fc64>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800fc88:	e0bffc17 	ldw	r2,-16(fp)
 800fc8c:	10c00a17 	ldw	r3,40(r2)
 800fc90:	e0bff717 	ldw	r2,-36(fp)
 800fc94:	1880011e 	bne	r3,r2,800fc9c <altera_avalon_jtag_uart_read+0x150>
      break;
 800fc98:	00000206 	br	800fca4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800fc9c:	e0bffe17 	ldw	r2,-8(fp)
 800fca0:	00bfb516 	blt	zero,r2,800fb78 <__alt_data_end+0xfc00fb78>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800fca4:	e0fff517 	ldw	r3,-44(fp)
 800fca8:	e0bffd17 	ldw	r2,-12(fp)
 800fcac:	18801826 	beq	r3,r2,800fd10 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fcb0:	0005303a 	rdctl	r2,status
 800fcb4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fcb8:	e0fffa17 	ldw	r3,-24(fp)
 800fcbc:	00bfff84 	movi	r2,-2
 800fcc0:	1884703a 	and	r2,r3,r2
 800fcc4:	1001703a 	wrctl	status,r2
  
  return context;
 800fcc8:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800fccc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800fcd0:	e0bffc17 	ldw	r2,-16(fp)
 800fcd4:	10800817 	ldw	r2,32(r2)
 800fcd8:	10c00054 	ori	r3,r2,1
 800fcdc:	e0bffc17 	ldw	r2,-16(fp)
 800fce0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800fce4:	e0bffc17 	ldw	r2,-16(fp)
 800fce8:	10800017 	ldw	r2,0(r2)
 800fcec:	10800104 	addi	r2,r2,4
 800fcf0:	1007883a 	mov	r3,r2
 800fcf4:	e0bffc17 	ldw	r2,-16(fp)
 800fcf8:	10800817 	ldw	r2,32(r2)
 800fcfc:	18800035 	stwio	r2,0(r3)
 800fd00:	e0bff917 	ldw	r2,-28(fp)
 800fd04:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fd08:	e0bffb17 	ldw	r2,-20(fp)
 800fd0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800fd10:	e0fff517 	ldw	r3,-44(fp)
 800fd14:	e0bffd17 	ldw	r2,-12(fp)
 800fd18:	18800426 	beq	r3,r2,800fd2c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 800fd1c:	e0fff517 	ldw	r3,-44(fp)
 800fd20:	e0bffd17 	ldw	r2,-12(fp)
 800fd24:	1885c83a 	sub	r2,r3,r2
 800fd28:	00000606 	br	800fd44 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 800fd2c:	e0bfff17 	ldw	r2,-4(fp)
 800fd30:	1090000c 	andi	r2,r2,16384
 800fd34:	10000226 	beq	r2,zero,800fd40 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 800fd38:	00bffd44 	movi	r2,-11
 800fd3c:	00000106 	br	800fd44 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 800fd40:	00bffec4 	movi	r2,-5
}
 800fd44:	e037883a 	mov	sp,fp
 800fd48:	dfc00117 	ldw	ra,4(sp)
 800fd4c:	df000017 	ldw	fp,0(sp)
 800fd50:	dec00204 	addi	sp,sp,8
 800fd54:	f800283a 	ret

0800fd58 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800fd58:	defff304 	addi	sp,sp,-52
 800fd5c:	dfc00c15 	stw	ra,48(sp)
 800fd60:	df000b15 	stw	fp,44(sp)
 800fd64:	df000b04 	addi	fp,sp,44
 800fd68:	e13ffc15 	stw	r4,-16(fp)
 800fd6c:	e17ffd15 	stw	r5,-12(fp)
 800fd70:	e1bffe15 	stw	r6,-8(fp)
 800fd74:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800fd78:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800fd7c:	e0bffd17 	ldw	r2,-12(fp)
 800fd80:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800fd84:	00003806 	br	800fe68 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800fd88:	e0bffc17 	ldw	r2,-16(fp)
 800fd8c:	10800c17 	ldw	r2,48(r2)
 800fd90:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800fd94:	e0bffc17 	ldw	r2,-16(fp)
 800fd98:	10800d17 	ldw	r2,52(r2)
 800fd9c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800fda0:	e0fff817 	ldw	r3,-32(fp)
 800fda4:	e0bff517 	ldw	r2,-44(fp)
 800fda8:	1880062e 	bgeu	r3,r2,800fdc4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800fdac:	e0fff517 	ldw	r3,-44(fp)
 800fdb0:	e0bff817 	ldw	r2,-32(fp)
 800fdb4:	1885c83a 	sub	r2,r3,r2
 800fdb8:	10bfffc4 	addi	r2,r2,-1
 800fdbc:	e0bff615 	stw	r2,-40(fp)
 800fdc0:	00000b06 	br	800fdf0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800fdc4:	e0bff517 	ldw	r2,-44(fp)
 800fdc8:	10000526 	beq	r2,zero,800fde0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800fdcc:	00c20004 	movi	r3,2048
 800fdd0:	e0bff817 	ldw	r2,-32(fp)
 800fdd4:	1885c83a 	sub	r2,r3,r2
 800fdd8:	e0bff615 	stw	r2,-40(fp)
 800fddc:	00000406 	br	800fdf0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800fde0:	00c1ffc4 	movi	r3,2047
 800fde4:	e0bff817 	ldw	r2,-32(fp)
 800fde8:	1885c83a 	sub	r2,r3,r2
 800fdec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800fdf0:	e0bff617 	ldw	r2,-40(fp)
 800fdf4:	1000011e 	bne	r2,zero,800fdfc <altera_avalon_jtag_uart_write+0xa4>
        break;
 800fdf8:	00001d06 	br	800fe70 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 800fdfc:	e0fffe17 	ldw	r3,-8(fp)
 800fe00:	e0bff617 	ldw	r2,-40(fp)
 800fe04:	1880022e 	bgeu	r3,r2,800fe10 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 800fe08:	e0bffe17 	ldw	r2,-8(fp)
 800fe0c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800fe10:	e0bff817 	ldw	r2,-32(fp)
 800fe14:	10820e04 	addi	r2,r2,2104
 800fe18:	e0fffc17 	ldw	r3,-16(fp)
 800fe1c:	1885883a 	add	r2,r3,r2
 800fe20:	1009883a 	mov	r4,r2
 800fe24:	e17ffd17 	ldw	r5,-12(fp)
 800fe28:	e1bff617 	ldw	r6,-40(fp)
 800fe2c:	8007c580 	call	8007c58 <memcpy>
      ptr   += n;
 800fe30:	e0fffd17 	ldw	r3,-12(fp)
 800fe34:	e0bff617 	ldw	r2,-40(fp)
 800fe38:	1885883a 	add	r2,r3,r2
 800fe3c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800fe40:	e0fffe17 	ldw	r3,-8(fp)
 800fe44:	e0bff617 	ldw	r2,-40(fp)
 800fe48:	1885c83a 	sub	r2,r3,r2
 800fe4c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fe50:	e0fff817 	ldw	r3,-32(fp)
 800fe54:	e0bff617 	ldw	r2,-40(fp)
 800fe58:	1885883a 	add	r2,r3,r2
 800fe5c:	10c1ffcc 	andi	r3,r2,2047
 800fe60:	e0bffc17 	ldw	r2,-16(fp)
 800fe64:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800fe68:	e0bffe17 	ldw	r2,-8(fp)
 800fe6c:	00bfc616 	blt	zero,r2,800fd88 <__alt_data_end+0xfc00fd88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fe70:	0005303a 	rdctl	r2,status
 800fe74:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fe78:	e0fffa17 	ldw	r3,-24(fp)
 800fe7c:	00bfff84 	movi	r2,-2
 800fe80:	1884703a 	and	r2,r3,r2
 800fe84:	1001703a 	wrctl	status,r2
  
  return context;
 800fe88:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800fe8c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800fe90:	e0bffc17 	ldw	r2,-16(fp)
 800fe94:	10800817 	ldw	r2,32(r2)
 800fe98:	10c00094 	ori	r3,r2,2
 800fe9c:	e0bffc17 	ldw	r2,-16(fp)
 800fea0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800fea4:	e0bffc17 	ldw	r2,-16(fp)
 800fea8:	10800017 	ldw	r2,0(r2)
 800feac:	10800104 	addi	r2,r2,4
 800feb0:	1007883a 	mov	r3,r2
 800feb4:	e0bffc17 	ldw	r2,-16(fp)
 800feb8:	10800817 	ldw	r2,32(r2)
 800febc:	18800035 	stwio	r2,0(r3)
 800fec0:	e0bff917 	ldw	r2,-28(fp)
 800fec4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fec8:	e0bffb17 	ldw	r2,-20(fp)
 800fecc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800fed0:	e0bffe17 	ldw	r2,-8(fp)
 800fed4:	0080120e 	bge	zero,r2,800ff20 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800fed8:	e0bfff17 	ldw	r2,-4(fp)
 800fedc:	1090000c 	andi	r2,r2,16384
 800fee0:	10000126 	beq	r2,zero,800fee8 <altera_avalon_jtag_uart_write+0x190>
        break;
 800fee4:	00001006 	br	800ff28 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800fee8:	0001883a 	nop
 800feec:	e0bffc17 	ldw	r2,-16(fp)
 800fef0:	10c00d17 	ldw	r3,52(r2)
 800fef4:	e0bff517 	ldw	r2,-44(fp)
 800fef8:	1880051e 	bne	r3,r2,800ff10 <altera_avalon_jtag_uart_write+0x1b8>
 800fefc:	e0bffc17 	ldw	r2,-16(fp)
 800ff00:	10c00917 	ldw	r3,36(r2)
 800ff04:	e0bffc17 	ldw	r2,-16(fp)
 800ff08:	10800117 	ldw	r2,4(r2)
 800ff0c:	18bff736 	bltu	r3,r2,800feec <__alt_data_end+0xfc00feec>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800ff10:	e0bffc17 	ldw	r2,-16(fp)
 800ff14:	10800917 	ldw	r2,36(r2)
 800ff18:	10000126 	beq	r2,zero,800ff20 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 800ff1c:	00000206 	br	800ff28 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 800ff20:	e0bffe17 	ldw	r2,-8(fp)
 800ff24:	00bf9716 	blt	zero,r2,800fd84 <__alt_data_end+0xfc00fd84>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800ff28:	e0fffd17 	ldw	r3,-12(fp)
 800ff2c:	e0bff717 	ldw	r2,-36(fp)
 800ff30:	18800426 	beq	r3,r2,800ff44 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 800ff34:	e0fffd17 	ldw	r3,-12(fp)
 800ff38:	e0bff717 	ldw	r2,-36(fp)
 800ff3c:	1885c83a 	sub	r2,r3,r2
 800ff40:	00000606 	br	800ff5c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 800ff44:	e0bfff17 	ldw	r2,-4(fp)
 800ff48:	1090000c 	andi	r2,r2,16384
 800ff4c:	10000226 	beq	r2,zero,800ff58 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 800ff50:	00bffd44 	movi	r2,-11
 800ff54:	00000106 	br	800ff5c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800ff58:	00bffec4 	movi	r2,-5
}
 800ff5c:	e037883a 	mov	sp,fp
 800ff60:	dfc00117 	ldw	ra,4(sp)
 800ff64:	df000017 	ldw	fp,0(sp)
 800ff68:	dec00204 	addi	sp,sp,8
 800ff6c:	f800283a 	ret

0800ff70 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800ff70:	defffa04 	addi	sp,sp,-24
 800ff74:	dfc00515 	stw	ra,20(sp)
 800ff78:	df000415 	stw	fp,16(sp)
 800ff7c:	df000404 	addi	fp,sp,16
 800ff80:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800ff84:	0007883a 	mov	r3,zero
 800ff88:	e0bfff17 	ldw	r2,-4(fp)
 800ff8c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800ff90:	e0bfff17 	ldw	r2,-4(fp)
 800ff94:	10800104 	addi	r2,r2,4
 800ff98:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ff9c:	0005303a 	rdctl	r2,status
 800ffa0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ffa4:	e0fffd17 	ldw	r3,-12(fp)
 800ffa8:	00bfff84 	movi	r2,-2
 800ffac:	1884703a 	and	r2,r3,r2
 800ffb0:	1001703a 	wrctl	status,r2
  
  return context;
 800ffb4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800ffb8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800ffbc:	80115100 	call	8011510 <alt_tick>
 800ffc0:	e0bffc17 	ldw	r2,-16(fp)
 800ffc4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ffc8:	e0bffe17 	ldw	r2,-8(fp)
 800ffcc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800ffd0:	e037883a 	mov	sp,fp
 800ffd4:	dfc00117 	ldw	ra,4(sp)
 800ffd8:	df000017 	ldw	fp,0(sp)
 800ffdc:	dec00204 	addi	sp,sp,8
 800ffe0:	f800283a 	ret

0800ffe4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800ffe4:	defff804 	addi	sp,sp,-32
 800ffe8:	dfc00715 	stw	ra,28(sp)
 800ffec:	df000615 	stw	fp,24(sp)
 800fff0:	df000604 	addi	fp,sp,24
 800fff4:	e13ffc15 	stw	r4,-16(fp)
 800fff8:	e17ffd15 	stw	r5,-12(fp)
 800fffc:	e1bffe15 	stw	r6,-8(fp)
 8010000:	e1ffff15 	stw	r7,-4(fp)
 8010004:	e0bfff17 	ldw	r2,-4(fp)
 8010008:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 801000c:	00820074 	movhi	r2,2049
 8010010:	10963a04 	addi	r2,r2,22760
 8010014:	10800017 	ldw	r2,0(r2)
 8010018:	1000041e 	bne	r2,zero,801002c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 801001c:	00820074 	movhi	r2,2049
 8010020:	10963a04 	addi	r2,r2,22760
 8010024:	e0fffb17 	ldw	r3,-20(fp)
 8010028:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 801002c:	e0bffc17 	ldw	r2,-16(fp)
 8010030:	10800104 	addi	r2,r2,4
 8010034:	00c001c4 	movi	r3,7
 8010038:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 801003c:	d8000015 	stw	zero,0(sp)
 8010040:	e13ffd17 	ldw	r4,-12(fp)
 8010044:	e17ffe17 	ldw	r5,-8(fp)
 8010048:	01820074 	movhi	r6,2049
 801004c:	31bfdc04 	addi	r6,r6,-144
 8010050:	e1fffc17 	ldw	r7,-16(fp)
 8010054:	80110500 	call	8011050 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8010058:	e037883a 	mov	sp,fp
 801005c:	dfc00117 	ldw	ra,4(sp)
 8010060:	df000017 	ldw	fp,0(sp)
 8010064:	dec00204 	addi	sp,sp,8
 8010068:	f800283a 	ret

0801006c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 801006c:	defffa04 	addi	sp,sp,-24
 8010070:	dfc00515 	stw	ra,20(sp)
 8010074:	df000415 	stw	fp,16(sp)
 8010078:	df000404 	addi	fp,sp,16
 801007c:	e13ffd15 	stw	r4,-12(fp)
 8010080:	e17ffe15 	stw	r5,-8(fp)
 8010084:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 8010088:	e0bffd17 	ldw	r2,-12(fp)
 801008c:	10800017 	ldw	r2,0(r2)
 8010090:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 8010094:	e0bffc17 	ldw	r2,-16(fp)
 8010098:	10c00a04 	addi	r3,r2,40
 801009c:	e0bffd17 	ldw	r2,-12(fp)
 80100a0:	10800217 	ldw	r2,8(r2)
 80100a4:	1809883a 	mov	r4,r3
 80100a8:	e17ffe17 	ldw	r5,-8(fp)
 80100ac:	e1bfff17 	ldw	r6,-4(fp)
 80100b0:	100f883a 	mov	r7,r2
 80100b4:	80105840 	call	8010584 <altera_avalon_uart_read>
      fd->fd_flags);
}
 80100b8:	e037883a 	mov	sp,fp
 80100bc:	dfc00117 	ldw	ra,4(sp)
 80100c0:	df000017 	ldw	fp,0(sp)
 80100c4:	dec00204 	addi	sp,sp,8
 80100c8:	f800283a 	ret

080100cc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80100cc:	defffa04 	addi	sp,sp,-24
 80100d0:	dfc00515 	stw	ra,20(sp)
 80100d4:	df000415 	stw	fp,16(sp)
 80100d8:	df000404 	addi	fp,sp,16
 80100dc:	e13ffd15 	stw	r4,-12(fp)
 80100e0:	e17ffe15 	stw	r5,-8(fp)
 80100e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 80100e8:	e0bffd17 	ldw	r2,-12(fp)
 80100ec:	10800017 	ldw	r2,0(r2)
 80100f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 80100f4:	e0bffc17 	ldw	r2,-16(fp)
 80100f8:	10c00a04 	addi	r3,r2,40
 80100fc:	e0bffd17 	ldw	r2,-12(fp)
 8010100:	10800217 	ldw	r2,8(r2)
 8010104:	1809883a 	mov	r4,r3
 8010108:	e17ffe17 	ldw	r5,-8(fp)
 801010c:	e1bfff17 	ldw	r6,-4(fp)
 8010110:	100f883a 	mov	r7,r2
 8010114:	80107b00 	call	80107b0 <altera_avalon_uart_write>
      fd->fd_flags);
}
 8010118:	e037883a 	mov	sp,fp
 801011c:	dfc00117 	ldw	ra,4(sp)
 8010120:	df000017 	ldw	fp,0(sp)
 8010124:	dec00204 	addi	sp,sp,8
 8010128:	f800283a 	ret

0801012c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 801012c:	defffc04 	addi	sp,sp,-16
 8010130:	dfc00315 	stw	ra,12(sp)
 8010134:	df000215 	stw	fp,8(sp)
 8010138:	df000204 	addi	fp,sp,8
 801013c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 8010140:	e0bfff17 	ldw	r2,-4(fp)
 8010144:	10800017 	ldw	r2,0(r2)
 8010148:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 801014c:	e0bffe17 	ldw	r2,-8(fp)
 8010150:	10c00a04 	addi	r3,r2,40
 8010154:	e0bfff17 	ldw	r2,-4(fp)
 8010158:	10800217 	ldw	r2,8(r2)
 801015c:	1809883a 	mov	r4,r3
 8010160:	100b883a 	mov	r5,r2
 8010164:	80104e00 	call	80104e0 <altera_avalon_uart_close>
}
 8010168:	e037883a 	mov	sp,fp
 801016c:	dfc00117 	ldw	ra,4(sp)
 8010170:	df000017 	ldw	fp,0(sp)
 8010174:	dec00204 	addi	sp,sp,8
 8010178:	f800283a 	ret

0801017c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 801017c:	defff804 	addi	sp,sp,-32
 8010180:	dfc00715 	stw	ra,28(sp)
 8010184:	df000615 	stw	fp,24(sp)
 8010188:	df000604 	addi	fp,sp,24
 801018c:	e13ffd15 	stw	r4,-12(fp)
 8010190:	e17ffe15 	stw	r5,-8(fp)
 8010194:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 8010198:	e0bffd17 	ldw	r2,-12(fp)
 801019c:	10800017 	ldw	r2,0(r2)
 80101a0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 80101a4:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 80101a8:	1000041e 	bne	r2,zero,80101bc <altera_avalon_uart_init+0x40>
 80101ac:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 80101b0:	1000021e 	bne	r2,zero,80101bc <altera_avalon_uart_init+0x40>
 80101b4:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 80101b8:	10000226 	beq	r2,zero,80101c4 <altera_avalon_uart_init+0x48>
 80101bc:	00800044 	movi	r2,1
 80101c0:	00000106 	br	80101c8 <altera_avalon_uart_init+0x4c>
 80101c4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 80101c8:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 80101cc:	e0bffc17 	ldw	r2,-16(fp)
 80101d0:	10000f1e 	bne	r2,zero,8010210 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 80101d4:	e0bffd17 	ldw	r2,-12(fp)
 80101d8:	00c32004 	movi	r3,3200
 80101dc:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 80101e0:	e0bffb17 	ldw	r2,-20(fp)
 80101e4:	10800304 	addi	r2,r2,12
 80101e8:	e0fffd17 	ldw	r3,-12(fp)
 80101ec:	18c00117 	ldw	r3,4(r3)
 80101f0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 80101f4:	d8000015 	stw	zero,0(sp)
 80101f8:	e13ffe17 	ldw	r4,-8(fp)
 80101fc:	e17fff17 	ldw	r5,-4(fp)
 8010200:	01820074 	movhi	r6,2049
 8010204:	31808904 	addi	r6,r6,548
 8010208:	e1fffd17 	ldw	r7,-12(fp)
 801020c:	80110500 	call	8011050 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 8010210:	e037883a 	mov	sp,fp
 8010214:	dfc00117 	ldw	ra,4(sp)
 8010218:	df000017 	ldw	fp,0(sp)
 801021c:	dec00204 	addi	sp,sp,8
 8010220:	f800283a 	ret

08010224 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 8010224:	defffa04 	addi	sp,sp,-24
 8010228:	dfc00515 	stw	ra,20(sp)
 801022c:	df000415 	stw	fp,16(sp)
 8010230:	df000404 	addi	fp,sp,16
 8010234:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 8010238:	e0bfff17 	ldw	r2,-4(fp)
 801023c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 8010240:	e0bffc17 	ldw	r2,-16(fp)
 8010244:	10800017 	ldw	r2,0(r2)
 8010248:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 801024c:	e0bffd17 	ldw	r2,-12(fp)
 8010250:	10800204 	addi	r2,r2,8
 8010254:	10800037 	ldwio	r2,0(r2)
 8010258:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 801025c:	e0bffd17 	ldw	r2,-12(fp)
 8010260:	10800204 	addi	r2,r2,8
 8010264:	0007883a 	mov	r3,zero
 8010268:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 801026c:	e0bffd17 	ldw	r2,-12(fp)
 8010270:	10800204 	addi	r2,r2,8
 8010274:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 8010278:	e0bffe17 	ldw	r2,-8(fp)
 801027c:	1080200c 	andi	r2,r2,128
 8010280:	10000326 	beq	r2,zero,8010290 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 8010284:	e13ffc17 	ldw	r4,-16(fp)
 8010288:	e17ffe17 	ldw	r5,-8(fp)
 801028c:	80102bc0 	call	80102bc <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 8010290:	e0bffe17 	ldw	r2,-8(fp)
 8010294:	1081100c 	andi	r2,r2,1088
 8010298:	10000326 	beq	r2,zero,80102a8 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 801029c:	e13ffc17 	ldw	r4,-16(fp)
 80102a0:	e17ffe17 	ldw	r5,-8(fp)
 80102a4:	801039c0 	call	801039c <altera_avalon_uart_txirq>
  }
  

}
 80102a8:	e037883a 	mov	sp,fp
 80102ac:	dfc00117 	ldw	ra,4(sp)
 80102b0:	df000017 	ldw	fp,0(sp)
 80102b4:	dec00204 	addi	sp,sp,8
 80102b8:	f800283a 	ret

080102bc <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 80102bc:	defffc04 	addi	sp,sp,-16
 80102c0:	df000315 	stw	fp,12(sp)
 80102c4:	df000304 	addi	fp,sp,12
 80102c8:	e13ffe15 	stw	r4,-8(fp)
 80102cc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 80102d0:	e0bfff17 	ldw	r2,-4(fp)
 80102d4:	108000cc 	andi	r2,r2,3
 80102d8:	10000126 	beq	r2,zero,80102e0 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 80102dc:	00002b06 	br	801038c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 80102e0:	e0bffe17 	ldw	r2,-8(fp)
 80102e4:	10800317 	ldw	r2,12(r2)
 80102e8:	e0bffe17 	ldw	r2,-8(fp)
 80102ec:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 80102f0:	e0bffe17 	ldw	r2,-8(fp)
 80102f4:	10800317 	ldw	r2,12(r2)
 80102f8:	10800044 	addi	r2,r2,1
 80102fc:	10800fcc 	andi	r2,r2,63
 8010300:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 8010304:	e0bffe17 	ldw	r2,-8(fp)
 8010308:	10800317 	ldw	r2,12(r2)
 801030c:	e0fffe17 	ldw	r3,-8(fp)
 8010310:	18c00017 	ldw	r3,0(r3)
 8010314:	18c00037 	ldwio	r3,0(r3)
 8010318:	1809883a 	mov	r4,r3
 801031c:	e0fffe17 	ldw	r3,-8(fp)
 8010320:	1885883a 	add	r2,r3,r2
 8010324:	10800704 	addi	r2,r2,28
 8010328:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 801032c:	e0bffe17 	ldw	r2,-8(fp)
 8010330:	e0fffd17 	ldw	r3,-12(fp)
 8010334:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 8010338:	e0bffe17 	ldw	r2,-8(fp)
 801033c:	10800317 	ldw	r2,12(r2)
 8010340:	10800044 	addi	r2,r2,1
 8010344:	10800fcc 	andi	r2,r2,63
 8010348:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 801034c:	e0bffe17 	ldw	r2,-8(fp)
 8010350:	10c00217 	ldw	r3,8(r2)
 8010354:	e0bffd17 	ldw	r2,-12(fp)
 8010358:	18800c1e 	bne	r3,r2,801038c <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 801035c:	e0bffe17 	ldw	r2,-8(fp)
 8010360:	10c00117 	ldw	r3,4(r2)
 8010364:	00bfdfc4 	movi	r2,-129
 8010368:	1886703a 	and	r3,r3,r2
 801036c:	e0bffe17 	ldw	r2,-8(fp)
 8010370:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 8010374:	e0bffe17 	ldw	r2,-8(fp)
 8010378:	10800017 	ldw	r2,0(r2)
 801037c:	10800304 	addi	r2,r2,12
 8010380:	e0fffe17 	ldw	r3,-8(fp)
 8010384:	18c00117 	ldw	r3,4(r3)
 8010388:	10c00035 	stwio	r3,0(r2)
  }   
}
 801038c:	e037883a 	mov	sp,fp
 8010390:	df000017 	ldw	fp,0(sp)
 8010394:	dec00104 	addi	sp,sp,4
 8010398:	f800283a 	ret

0801039c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 801039c:	defffb04 	addi	sp,sp,-20
 80103a0:	df000415 	stw	fp,16(sp)
 80103a4:	df000404 	addi	fp,sp,16
 80103a8:	e13ffc15 	stw	r4,-16(fp)
 80103ac:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 80103b0:	e0bffc17 	ldw	r2,-16(fp)
 80103b4:	10c00417 	ldw	r3,16(r2)
 80103b8:	e0bffc17 	ldw	r2,-16(fp)
 80103bc:	10800517 	ldw	r2,20(r2)
 80103c0:	18803226 	beq	r3,r2,801048c <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 80103c4:	e0bffc17 	ldw	r2,-16(fp)
 80103c8:	10800617 	ldw	r2,24(r2)
 80103cc:	1080008c 	andi	r2,r2,2
 80103d0:	10000326 	beq	r2,zero,80103e0 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 80103d4:	e0bffd17 	ldw	r2,-12(fp)
 80103d8:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 80103dc:	10001d26 	beq	r2,zero,8010454 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 80103e0:	e0bffc17 	ldw	r2,-16(fp)
 80103e4:	10800417 	ldw	r2,16(r2)
 80103e8:	e0bffc17 	ldw	r2,-16(fp)
 80103ec:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 80103f0:	e0bffc17 	ldw	r2,-16(fp)
 80103f4:	10800017 	ldw	r2,0(r2)
 80103f8:	10800104 	addi	r2,r2,4
 80103fc:	e0fffc17 	ldw	r3,-16(fp)
 8010400:	18c00417 	ldw	r3,16(r3)
 8010404:	e13ffc17 	ldw	r4,-16(fp)
 8010408:	20c7883a 	add	r3,r4,r3
 801040c:	18c01704 	addi	r3,r3,92
 8010410:	18c00003 	ldbu	r3,0(r3)
 8010414:	18c03fcc 	andi	r3,r3,255
 8010418:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 801041c:	e0bffc17 	ldw	r2,-16(fp)
 8010420:	10800417 	ldw	r2,16(r2)
 8010424:	10800044 	addi	r2,r2,1
 8010428:	e0fffc17 	ldw	r3,-16(fp)
 801042c:	18800415 	stw	r2,16(r3)
 8010430:	10c00fcc 	andi	r3,r2,63
 8010434:	e0bffc17 	ldw	r2,-16(fp)
 8010438:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 801043c:	e0bffc17 	ldw	r2,-16(fp)
 8010440:	10800117 	ldw	r2,4(r2)
 8010444:	10c01014 	ori	r3,r2,64
 8010448:	e0bffc17 	ldw	r2,-16(fp)
 801044c:	10c00115 	stw	r3,4(r2)
 8010450:	00000e06 	br	801048c <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 8010454:	e0bffc17 	ldw	r2,-16(fp)
 8010458:	10800017 	ldw	r2,0(r2)
 801045c:	10800204 	addi	r2,r2,8
 8010460:	10800037 	ldwio	r2,0(r2)
 8010464:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 8010468:	e0bffd17 	ldw	r2,-12(fp)
 801046c:	1082000c 	andi	r2,r2,2048
 8010470:	1000061e 	bne	r2,zero,801048c <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 8010474:	e0bffc17 	ldw	r2,-16(fp)
 8010478:	10c00117 	ldw	r3,4(r2)
 801047c:	00bfefc4 	movi	r2,-65
 8010480:	1886703a 	and	r3,r3,r2
 8010484:	e0bffc17 	ldw	r2,-16(fp)
 8010488:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 801048c:	e0bffc17 	ldw	r2,-16(fp)
 8010490:	10c00417 	ldw	r3,16(r2)
 8010494:	e0bffc17 	ldw	r2,-16(fp)
 8010498:	10800517 	ldw	r2,20(r2)
 801049c:	1880061e 	bne	r3,r2,80104b8 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 80104a0:	e0bffc17 	ldw	r2,-16(fp)
 80104a4:	10c00117 	ldw	r3,4(r2)
 80104a8:	00beefc4 	movi	r2,-1089
 80104ac:	1886703a 	and	r3,r3,r2
 80104b0:	e0bffc17 	ldw	r2,-16(fp)
 80104b4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 80104b8:	e0bffc17 	ldw	r2,-16(fp)
 80104bc:	10800017 	ldw	r2,0(r2)
 80104c0:	10800304 	addi	r2,r2,12
 80104c4:	e0fffc17 	ldw	r3,-16(fp)
 80104c8:	18c00117 	ldw	r3,4(r3)
 80104cc:	10c00035 	stwio	r3,0(r2)
}
 80104d0:	e037883a 	mov	sp,fp
 80104d4:	df000017 	ldw	fp,0(sp)
 80104d8:	dec00104 	addi	sp,sp,4
 80104dc:	f800283a 	ret

080104e0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 80104e0:	defffd04 	addi	sp,sp,-12
 80104e4:	df000215 	stw	fp,8(sp)
 80104e8:	df000204 	addi	fp,sp,8
 80104ec:	e13ffe15 	stw	r4,-8(fp)
 80104f0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 80104f4:	00000506 	br	801050c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 80104f8:	e0bfff17 	ldw	r2,-4(fp)
 80104fc:	1090000c 	andi	r2,r2,16384
 8010500:	10000226 	beq	r2,zero,801050c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8010504:	00bffd44 	movi	r2,-11
 8010508:	00000606 	br	8010524 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 801050c:	e0bffe17 	ldw	r2,-8(fp)
 8010510:	10c00417 	ldw	r3,16(r2)
 8010514:	e0bffe17 	ldw	r2,-8(fp)
 8010518:	10800517 	ldw	r2,20(r2)
 801051c:	18bff61e 	bne	r3,r2,80104f8 <__alt_data_end+0xfc0104f8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8010520:	0005883a 	mov	r2,zero
}
 8010524:	e037883a 	mov	sp,fp
 8010528:	df000017 	ldw	fp,0(sp)
 801052c:	dec00104 	addi	sp,sp,4
 8010530:	f800283a 	ret

08010534 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010534:	defffe04 	addi	sp,sp,-8
 8010538:	dfc00115 	stw	ra,4(sp)
 801053c:	df000015 	stw	fp,0(sp)
 8010540:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010544:	00820074 	movhi	r2,2049
 8010548:	108f3d04 	addi	r2,r2,15604
 801054c:	10800017 	ldw	r2,0(r2)
 8010550:	10000526 	beq	r2,zero,8010568 <alt_get_errno+0x34>
 8010554:	00820074 	movhi	r2,2049
 8010558:	108f3d04 	addi	r2,r2,15604
 801055c:	10800017 	ldw	r2,0(r2)
 8010560:	103ee83a 	callr	r2
 8010564:	00000206 	br	8010570 <alt_get_errno+0x3c>
 8010568:	00820074 	movhi	r2,2049
 801056c:	10962f04 	addi	r2,r2,22716
}
 8010570:	e037883a 	mov	sp,fp
 8010574:	dfc00117 	ldw	ra,4(sp)
 8010578:	df000017 	ldw	fp,0(sp)
 801057c:	dec00204 	addi	sp,sp,8
 8010580:	f800283a 	ret

08010584 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 8010584:	defff204 	addi	sp,sp,-56
 8010588:	dfc00d15 	stw	ra,52(sp)
 801058c:	df000c15 	stw	fp,48(sp)
 8010590:	df000c04 	addi	fp,sp,48
 8010594:	e13ffc15 	stw	r4,-16(fp)
 8010598:	e17ffd15 	stw	r5,-12(fp)
 801059c:	e1bffe15 	stw	r6,-8(fp)
 80105a0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 80105a4:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 80105a8:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 80105ac:	e0bfff17 	ldw	r2,-4(fp)
 80105b0:	1090000c 	andi	r2,r2,16384
 80105b4:	1005003a 	cmpeq	r2,r2,zero
 80105b8:	10803fcc 	andi	r2,r2,255
 80105bc:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 80105c0:	00001306 	br	8010610 <altera_avalon_uart_read+0x8c>
    {
      count++;
 80105c4:	e0bff517 	ldw	r2,-44(fp)
 80105c8:	10800044 	addi	r2,r2,1
 80105cc:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 80105d0:	e0bffd17 	ldw	r2,-12(fp)
 80105d4:	10c00044 	addi	r3,r2,1
 80105d8:	e0fffd15 	stw	r3,-12(fp)
 80105dc:	e0fffc17 	ldw	r3,-16(fp)
 80105e0:	18c00217 	ldw	r3,8(r3)
 80105e4:	e13ffc17 	ldw	r4,-16(fp)
 80105e8:	20c7883a 	add	r3,r4,r3
 80105ec:	18c00704 	addi	r3,r3,28
 80105f0:	18c00003 	ldbu	r3,0(r3)
 80105f4:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 80105f8:	e0bffc17 	ldw	r2,-16(fp)
 80105fc:	10800217 	ldw	r2,8(r2)
 8010600:	10800044 	addi	r2,r2,1
 8010604:	10c00fcc 	andi	r3,r2,63
 8010608:	e0bffc17 	ldw	r2,-16(fp)
 801060c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 8010610:	e0fff517 	ldw	r3,-44(fp)
 8010614:	e0bffe17 	ldw	r2,-8(fp)
 8010618:	1880050e 	bge	r3,r2,8010630 <altera_avalon_uart_read+0xac>
 801061c:	e0bffc17 	ldw	r2,-16(fp)
 8010620:	10c00217 	ldw	r3,8(r2)
 8010624:	e0bffc17 	ldw	r2,-16(fp)
 8010628:	10800317 	ldw	r2,12(r2)
 801062c:	18bfe51e 	bne	r3,r2,80105c4 <__alt_data_end+0xfc0105c4>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 8010630:	e0bff517 	ldw	r2,-44(fp)
 8010634:	1000251e 	bne	r2,zero,80106cc <altera_avalon_uart_read+0x148>
 8010638:	e0bffc17 	ldw	r2,-16(fp)
 801063c:	10c00217 	ldw	r3,8(r2)
 8010640:	e0bffc17 	ldw	r2,-16(fp)
 8010644:	10800317 	ldw	r2,12(r2)
 8010648:	1880201e 	bne	r3,r2,80106cc <altera_avalon_uart_read+0x148>
    {
      if (!block)
 801064c:	e0bff617 	ldw	r2,-40(fp)
 8010650:	1000071e 	bne	r2,zero,8010670 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 8010654:	80105340 	call	8010534 <alt_get_errno>
 8010658:	1007883a 	mov	r3,r2
 801065c:	008002c4 	movi	r2,11
 8010660:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 8010664:	00800044 	movi	r2,1
 8010668:	e0bff405 	stb	r2,-48(fp)
        break;
 801066c:	00001b06 	br	80106dc <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010670:	0005303a 	rdctl	r2,status
 8010674:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010678:	e0fff817 	ldw	r3,-32(fp)
 801067c:	00bfff84 	movi	r2,-2
 8010680:	1884703a 	and	r2,r3,r2
 8010684:	1001703a 	wrctl	status,r2
  
  return context;
 8010688:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 801068c:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8010690:	e0bffc17 	ldw	r2,-16(fp)
 8010694:	10800117 	ldw	r2,4(r2)
 8010698:	10c02014 	ori	r3,r2,128
 801069c:	e0bffc17 	ldw	r2,-16(fp)
 80106a0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 80106a4:	e0bffc17 	ldw	r2,-16(fp)
 80106a8:	10800017 	ldw	r2,0(r2)
 80106ac:	10800304 	addi	r2,r2,12
 80106b0:	e0fffc17 	ldw	r3,-16(fp)
 80106b4:	18c00117 	ldw	r3,4(r3)
 80106b8:	10c00035 	stwio	r3,0(r2)
 80106bc:	e0bff717 	ldw	r2,-36(fp)
 80106c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80106c4:	e0bff917 	ldw	r2,-28(fp)
 80106c8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 80106cc:	e0bff517 	ldw	r2,-44(fp)
 80106d0:	1000021e 	bne	r2,zero,80106dc <altera_avalon_uart_read+0x158>
 80106d4:	e0bffe17 	ldw	r2,-8(fp)
 80106d8:	103fb91e 	bne	r2,zero,80105c0 <__alt_data_end+0xfc0105c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80106dc:	0005303a 	rdctl	r2,status
 80106e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80106e4:	e0fffa17 	ldw	r3,-24(fp)
 80106e8:	00bfff84 	movi	r2,-2
 80106ec:	1884703a 	and	r2,r3,r2
 80106f0:	1001703a 	wrctl	status,r2
  
  return context;
 80106f4:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 80106f8:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 80106fc:	e0bffc17 	ldw	r2,-16(fp)
 8010700:	10800117 	ldw	r2,4(r2)
 8010704:	10c02014 	ori	r3,r2,128
 8010708:	e0bffc17 	ldw	r2,-16(fp)
 801070c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8010710:	e0bffc17 	ldw	r2,-16(fp)
 8010714:	10800017 	ldw	r2,0(r2)
 8010718:	10800304 	addi	r2,r2,12
 801071c:	e0fffc17 	ldw	r3,-16(fp)
 8010720:	18c00117 	ldw	r3,4(r3)
 8010724:	10c00035 	stwio	r3,0(r2)
 8010728:	e0bff717 	ldw	r2,-36(fp)
 801072c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010730:	e0bffb17 	ldw	r2,-20(fp)
 8010734:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 8010738:	e0bff403 	ldbu	r2,-48(fp)
 801073c:	10000226 	beq	r2,zero,8010748 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 8010740:	00bffd44 	movi	r2,-11
 8010744:	00000106 	br	801074c <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 8010748:	e0bff517 	ldw	r2,-44(fp)
  }
}
 801074c:	e037883a 	mov	sp,fp
 8010750:	dfc00117 	ldw	ra,4(sp)
 8010754:	df000017 	ldw	fp,0(sp)
 8010758:	dec00204 	addi	sp,sp,8
 801075c:	f800283a 	ret

08010760 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010760:	defffe04 	addi	sp,sp,-8
 8010764:	dfc00115 	stw	ra,4(sp)
 8010768:	df000015 	stw	fp,0(sp)
 801076c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010770:	00820074 	movhi	r2,2049
 8010774:	108f3d04 	addi	r2,r2,15604
 8010778:	10800017 	ldw	r2,0(r2)
 801077c:	10000526 	beq	r2,zero,8010794 <alt_get_errno+0x34>
 8010780:	00820074 	movhi	r2,2049
 8010784:	108f3d04 	addi	r2,r2,15604
 8010788:	10800017 	ldw	r2,0(r2)
 801078c:	103ee83a 	callr	r2
 8010790:	00000206 	br	801079c <alt_get_errno+0x3c>
 8010794:	00820074 	movhi	r2,2049
 8010798:	10962f04 	addi	r2,r2,22716
}
 801079c:	e037883a 	mov	sp,fp
 80107a0:	dfc00117 	ldw	ra,4(sp)
 80107a4:	df000017 	ldw	fp,0(sp)
 80107a8:	dec00204 	addi	sp,sp,8
 80107ac:	f800283a 	ret

080107b0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 80107b0:	defff204 	addi	sp,sp,-56
 80107b4:	dfc00d15 	stw	ra,52(sp)
 80107b8:	df000c15 	stw	fp,48(sp)
 80107bc:	df000c04 	addi	fp,sp,48
 80107c0:	e13ffc15 	stw	r4,-16(fp)
 80107c4:	e17ffd15 	stw	r5,-12(fp)
 80107c8:	e1bffe15 	stw	r6,-8(fp)
 80107cc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 80107d0:	e0bffe17 	ldw	r2,-8(fp)
 80107d4:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 80107d8:	e0bfff17 	ldw	r2,-4(fp)
 80107dc:	1090000c 	andi	r2,r2,16384
 80107e0:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 80107e4:	00003c06 	br	80108d8 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 80107e8:	e0bffc17 	ldw	r2,-16(fp)
 80107ec:	10800517 	ldw	r2,20(r2)
 80107f0:	10800044 	addi	r2,r2,1
 80107f4:	10800fcc 	andi	r2,r2,63
 80107f8:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 80107fc:	e0bffc17 	ldw	r2,-16(fp)
 8010800:	10c00417 	ldw	r3,16(r2)
 8010804:	e0bff617 	ldw	r2,-40(fp)
 8010808:	1880221e 	bne	r3,r2,8010894 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 801080c:	e0bff517 	ldw	r2,-44(fp)
 8010810:	10000526 	beq	r2,zero,8010828 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 8010814:	80107600 	call	8010760 <alt_get_errno>
 8010818:	1007883a 	mov	r3,r2
 801081c:	008002c4 	movi	r2,11
 8010820:	18800015 	stw	r2,0(r3)
        break;
 8010824:	00002e06 	br	80108e0 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010828:	0005303a 	rdctl	r2,status
 801082c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010830:	e0fff817 	ldw	r3,-32(fp)
 8010834:	00bfff84 	movi	r2,-2
 8010838:	1884703a 	and	r2,r3,r2
 801083c:	1001703a 	wrctl	status,r2
  
  return context;
 8010840:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 8010844:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 8010848:	e0bffc17 	ldw	r2,-16(fp)
 801084c:	10800117 	ldw	r2,4(r2)
 8010850:	10c11014 	ori	r3,r2,1088
 8010854:	e0bffc17 	ldw	r2,-16(fp)
 8010858:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 801085c:	e0bffc17 	ldw	r2,-16(fp)
 8010860:	10800017 	ldw	r2,0(r2)
 8010864:	10800304 	addi	r2,r2,12
 8010868:	e0fffc17 	ldw	r3,-16(fp)
 801086c:	18c00117 	ldw	r3,4(r3)
 8010870:	10c00035 	stwio	r3,0(r2)
 8010874:	e0bff717 	ldw	r2,-36(fp)
 8010878:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801087c:	e0bff917 	ldw	r2,-28(fp)
 8010880:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 8010884:	e0bffc17 	ldw	r2,-16(fp)
 8010888:	10c00417 	ldw	r3,16(r2)
 801088c:	e0bff617 	ldw	r2,-40(fp)
 8010890:	18bffc26 	beq	r3,r2,8010884 <__alt_data_end+0xfc010884>
      }
    }

    count--;
 8010894:	e0bff417 	ldw	r2,-48(fp)
 8010898:	10bfffc4 	addi	r2,r2,-1
 801089c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 80108a0:	e0bffc17 	ldw	r2,-16(fp)
 80108a4:	10c00517 	ldw	r3,20(r2)
 80108a8:	e0bffd17 	ldw	r2,-12(fp)
 80108ac:	11000044 	addi	r4,r2,1
 80108b0:	e13ffd15 	stw	r4,-12(fp)
 80108b4:	10800003 	ldbu	r2,0(r2)
 80108b8:	1009883a 	mov	r4,r2
 80108bc:	e0bffc17 	ldw	r2,-16(fp)
 80108c0:	10c5883a 	add	r2,r2,r3
 80108c4:	10801704 	addi	r2,r2,92
 80108c8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 80108cc:	e0bffc17 	ldw	r2,-16(fp)
 80108d0:	e0fff617 	ldw	r3,-40(fp)
 80108d4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 80108d8:	e0bff417 	ldw	r2,-48(fp)
 80108dc:	103fc21e 	bne	r2,zero,80107e8 <__alt_data_end+0xfc0107e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80108e0:	0005303a 	rdctl	r2,status
 80108e4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80108e8:	e0fffa17 	ldw	r3,-24(fp)
 80108ec:	00bfff84 	movi	r2,-2
 80108f0:	1884703a 	and	r2,r3,r2
 80108f4:	1001703a 	wrctl	status,r2
  
  return context;
 80108f8:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 80108fc:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 8010900:	e0bffc17 	ldw	r2,-16(fp)
 8010904:	10800117 	ldw	r2,4(r2)
 8010908:	10c11014 	ori	r3,r2,1088
 801090c:	e0bffc17 	ldw	r2,-16(fp)
 8010910:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8010914:	e0bffc17 	ldw	r2,-16(fp)
 8010918:	10800017 	ldw	r2,0(r2)
 801091c:	10800304 	addi	r2,r2,12
 8010920:	e0fffc17 	ldw	r3,-16(fp)
 8010924:	18c00117 	ldw	r3,4(r3)
 8010928:	10c00035 	stwio	r3,0(r2)
 801092c:	e0bff717 	ldw	r2,-36(fp)
 8010930:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010934:	e0bffb17 	ldw	r2,-20(fp)
 8010938:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 801093c:	e0fffe17 	ldw	r3,-8(fp)
 8010940:	e0bff417 	ldw	r2,-48(fp)
 8010944:	1885c83a 	sub	r2,r3,r2
}
 8010948:	e037883a 	mov	sp,fp
 801094c:	dfc00117 	ldw	ra,4(sp)
 8010950:	df000017 	ldw	fp,0(sp)
 8010954:	dec00204 	addi	sp,sp,8
 8010958:	f800283a 	ret

0801095c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 801095c:	defff504 	addi	sp,sp,-44
 8010960:	df000a15 	stw	fp,40(sp)
 8010964:	df000a04 	addi	fp,sp,40
 8010968:	e13ffc15 	stw	r4,-16(fp)
 801096c:	e17ffd15 	stw	r5,-12(fp)
 8010970:	e1bffe15 	stw	r6,-8(fp)
 8010974:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8010978:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 801097c:	00820074 	movhi	r2,2049
 8010980:	10963a04 	addi	r2,r2,22760
 8010984:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8010988:	10003f26 	beq	r2,zero,8010a88 <alt_alarm_start+0x12c>
  {
    if (alarm)
 801098c:	e0bffc17 	ldw	r2,-16(fp)
 8010990:	10003b26 	beq	r2,zero,8010a80 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 8010994:	e0bffc17 	ldw	r2,-16(fp)
 8010998:	e0fffe17 	ldw	r3,-8(fp)
 801099c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80109a0:	e0bffc17 	ldw	r2,-16(fp)
 80109a4:	e0ffff17 	ldw	r3,-4(fp)
 80109a8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80109ac:	0005303a 	rdctl	r2,status
 80109b0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80109b4:	e0fff817 	ldw	r3,-32(fp)
 80109b8:	00bfff84 	movi	r2,-2
 80109bc:	1884703a 	and	r2,r3,r2
 80109c0:	1001703a 	wrctl	status,r2
  
  return context;
 80109c4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 80109c8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80109cc:	00820074 	movhi	r2,2049
 80109d0:	10963b04 	addi	r2,r2,22764
 80109d4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 80109d8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80109dc:	e0fffd17 	ldw	r3,-12(fp)
 80109e0:	e0bff617 	ldw	r2,-40(fp)
 80109e4:	1885883a 	add	r2,r3,r2
 80109e8:	10c00044 	addi	r3,r2,1
 80109ec:	e0bffc17 	ldw	r2,-16(fp)
 80109f0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 80109f4:	e0bffc17 	ldw	r2,-16(fp)
 80109f8:	10c00217 	ldw	r3,8(r2)
 80109fc:	e0bff617 	ldw	r2,-40(fp)
 8010a00:	1880042e 	bgeu	r3,r2,8010a14 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 8010a04:	e0bffc17 	ldw	r2,-16(fp)
 8010a08:	00c00044 	movi	r3,1
 8010a0c:	10c00405 	stb	r3,16(r2)
 8010a10:	00000206 	br	8010a1c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 8010a14:	e0bffc17 	ldw	r2,-16(fp)
 8010a18:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8010a1c:	e0fffc17 	ldw	r3,-16(fp)
 8010a20:	00820074 	movhi	r2,2049
 8010a24:	108f4004 	addi	r2,r2,15616
 8010a28:	e0bff915 	stw	r2,-28(fp)
 8010a2c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8010a30:	e0bffa17 	ldw	r2,-24(fp)
 8010a34:	e0fff917 	ldw	r3,-28(fp)
 8010a38:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8010a3c:	e0bff917 	ldw	r2,-28(fp)
 8010a40:	10c00017 	ldw	r3,0(r2)
 8010a44:	e0bffa17 	ldw	r2,-24(fp)
 8010a48:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8010a4c:	e0bff917 	ldw	r2,-28(fp)
 8010a50:	10800017 	ldw	r2,0(r2)
 8010a54:	e0fffa17 	ldw	r3,-24(fp)
 8010a58:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010a5c:	e0bff917 	ldw	r2,-28(fp)
 8010a60:	e0fffa17 	ldw	r3,-24(fp)
 8010a64:	10c00015 	stw	r3,0(r2)
 8010a68:	e0bff717 	ldw	r2,-36(fp)
 8010a6c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010a70:	e0bffb17 	ldw	r2,-20(fp)
 8010a74:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8010a78:	0005883a 	mov	r2,zero
 8010a7c:	00000306 	br	8010a8c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 8010a80:	00bffa84 	movi	r2,-22
 8010a84:	00000106 	br	8010a8c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 8010a88:	00bfde84 	movi	r2,-134
  }
}
 8010a8c:	e037883a 	mov	sp,fp
 8010a90:	df000017 	ldw	fp,0(sp)
 8010a94:	dec00104 	addi	sp,sp,4
 8010a98:	f800283a 	ret

08010a9c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8010a9c:	defffa04 	addi	sp,sp,-24
 8010aa0:	dfc00515 	stw	ra,20(sp)
 8010aa4:	df000415 	stw	fp,16(sp)
 8010aa8:	df000404 	addi	fp,sp,16
 8010aac:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8010ab0:	00800244 	movi	r2,9
 8010ab4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8010ab8:	e13ffd17 	ldw	r4,-12(fp)
 8010abc:	014003f4 	movhi	r5,15
 8010ac0:	29509004 	addi	r5,r5,16960
 8010ac4:	800bf500 	call	800bf50 <__mulsi3>
 8010ac8:	0100bef4 	movhi	r4,763
 8010acc:	213c2004 	addi	r4,r4,-3968
 8010ad0:	100b883a 	mov	r5,r2
 8010ad4:	800bf400 	call	800bf40 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8010ad8:	01200034 	movhi	r4,32768
 8010adc:	213fffc4 	addi	r4,r4,-1
 8010ae0:	100b883a 	mov	r5,r2
 8010ae4:	800bf400 	call	800bf40 <__udivsi3>
 8010ae8:	e13fff17 	ldw	r4,-4(fp)
 8010aec:	100b883a 	mov	r5,r2
 8010af0:	800bf400 	call	800bf40 <__udivsi3>
 8010af4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8010af8:	e0bffe17 	ldw	r2,-8(fp)
 8010afc:	10002a26 	beq	r2,zero,8010ba8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8010b00:	e03ffc15 	stw	zero,-16(fp)
 8010b04:	00001706 	br	8010b64 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8010b08:	00a00034 	movhi	r2,32768
 8010b0c:	10bfffc4 	addi	r2,r2,-1
 8010b10:	10bfffc4 	addi	r2,r2,-1
 8010b14:	103ffe1e 	bne	r2,zero,8010b10 <__alt_data_end+0xfc010b10>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8010b18:	e13ffd17 	ldw	r4,-12(fp)
 8010b1c:	014003f4 	movhi	r5,15
 8010b20:	29509004 	addi	r5,r5,16960
 8010b24:	800bf500 	call	800bf50 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8010b28:	0100bef4 	movhi	r4,763
 8010b2c:	213c2004 	addi	r4,r4,-3968
 8010b30:	100b883a 	mov	r5,r2
 8010b34:	800bf400 	call	800bf40 <__udivsi3>
 8010b38:	01200034 	movhi	r4,32768
 8010b3c:	213fffc4 	addi	r4,r4,-1
 8010b40:	100b883a 	mov	r5,r2
 8010b44:	800bf400 	call	800bf40 <__udivsi3>
 8010b48:	1007883a 	mov	r3,r2
 8010b4c:	e0bfff17 	ldw	r2,-4(fp)
 8010b50:	10c5c83a 	sub	r2,r2,r3
 8010b54:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8010b58:	e0bffc17 	ldw	r2,-16(fp)
 8010b5c:	10800044 	addi	r2,r2,1
 8010b60:	e0bffc15 	stw	r2,-16(fp)
 8010b64:	e0fffc17 	ldw	r3,-16(fp)
 8010b68:	e0bffe17 	ldw	r2,-8(fp)
 8010b6c:	18bfe616 	blt	r3,r2,8010b08 <__alt_data_end+0xfc010b08>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8010b70:	e13ffd17 	ldw	r4,-12(fp)
 8010b74:	014003f4 	movhi	r5,15
 8010b78:	29509004 	addi	r5,r5,16960
 8010b7c:	800bf500 	call	800bf50 <__mulsi3>
 8010b80:	0100bef4 	movhi	r4,763
 8010b84:	213c2004 	addi	r4,r4,-3968
 8010b88:	100b883a 	mov	r5,r2
 8010b8c:	800bf400 	call	800bf40 <__udivsi3>
 8010b90:	1009883a 	mov	r4,r2
 8010b94:	e17fff17 	ldw	r5,-4(fp)
 8010b98:	800bf500 	call	800bf50 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8010b9c:	10bfffc4 	addi	r2,r2,-1
 8010ba0:	103ffe1e 	bne	r2,zero,8010b9c <__alt_data_end+0xfc010b9c>
 8010ba4:	00000d06 	br	8010bdc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8010ba8:	e13ffd17 	ldw	r4,-12(fp)
 8010bac:	014003f4 	movhi	r5,15
 8010bb0:	29509004 	addi	r5,r5,16960
 8010bb4:	800bf500 	call	800bf50 <__mulsi3>
 8010bb8:	0100bef4 	movhi	r4,763
 8010bbc:	213c2004 	addi	r4,r4,-3968
 8010bc0:	100b883a 	mov	r5,r2
 8010bc4:	800bf400 	call	800bf40 <__udivsi3>
 8010bc8:	1009883a 	mov	r4,r2
 8010bcc:	e17fff17 	ldw	r5,-4(fp)
 8010bd0:	800bf500 	call	800bf50 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8010bd4:	10bfffc4 	addi	r2,r2,-1
 8010bd8:	00bffe16 	blt	zero,r2,8010bd4 <__alt_data_end+0xfc010bd4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8010bdc:	0005883a 	mov	r2,zero
}
 8010be0:	e037883a 	mov	sp,fp
 8010be4:	dfc00117 	ldw	ra,4(sp)
 8010be8:	df000017 	ldw	fp,0(sp)
 8010bec:	dec00204 	addi	sp,sp,8
 8010bf0:	f800283a 	ret

08010bf4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8010bf4:	deffff04 	addi	sp,sp,-4
 8010bf8:	df000015 	stw	fp,0(sp)
 8010bfc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8010c00:	e037883a 	mov	sp,fp
 8010c04:	df000017 	ldw	fp,0(sp)
 8010c08:	dec00104 	addi	sp,sp,4
 8010c0c:	f800283a 	ret

08010c10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010c10:	defffe04 	addi	sp,sp,-8
 8010c14:	dfc00115 	stw	ra,4(sp)
 8010c18:	df000015 	stw	fp,0(sp)
 8010c1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010c20:	00820074 	movhi	r2,2049
 8010c24:	108f3d04 	addi	r2,r2,15604
 8010c28:	10800017 	ldw	r2,0(r2)
 8010c2c:	10000526 	beq	r2,zero,8010c44 <alt_get_errno+0x34>
 8010c30:	00820074 	movhi	r2,2049
 8010c34:	108f3d04 	addi	r2,r2,15604
 8010c38:	10800017 	ldw	r2,0(r2)
 8010c3c:	103ee83a 	callr	r2
 8010c40:	00000206 	br	8010c4c <alt_get_errno+0x3c>
 8010c44:	00820074 	movhi	r2,2049
 8010c48:	10962f04 	addi	r2,r2,22716
}
 8010c4c:	e037883a 	mov	sp,fp
 8010c50:	dfc00117 	ldw	ra,4(sp)
 8010c54:	df000017 	ldw	fp,0(sp)
 8010c58:	dec00204 	addi	sp,sp,8
 8010c5c:	f800283a 	ret

08010c60 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8010c60:	defffa04 	addi	sp,sp,-24
 8010c64:	dfc00515 	stw	ra,20(sp)
 8010c68:	df000415 	stw	fp,16(sp)
 8010c6c:	df000404 	addi	fp,sp,16
 8010c70:	e13ffe15 	stw	r4,-8(fp)
 8010c74:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8010c78:	e0bffe17 	ldw	r2,-8(fp)
 8010c7c:	10000326 	beq	r2,zero,8010c8c <alt_dev_llist_insert+0x2c>
 8010c80:	e0bffe17 	ldw	r2,-8(fp)
 8010c84:	10800217 	ldw	r2,8(r2)
 8010c88:	1000061e 	bne	r2,zero,8010ca4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8010c8c:	8010c100 	call	8010c10 <alt_get_errno>
 8010c90:	1007883a 	mov	r3,r2
 8010c94:	00800584 	movi	r2,22
 8010c98:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8010c9c:	00bffa84 	movi	r2,-22
 8010ca0:	00001306 	br	8010cf0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8010ca4:	e0bffe17 	ldw	r2,-8(fp)
 8010ca8:	e0ffff17 	ldw	r3,-4(fp)
 8010cac:	e0fffc15 	stw	r3,-16(fp)
 8010cb0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8010cb4:	e0bffd17 	ldw	r2,-12(fp)
 8010cb8:	e0fffc17 	ldw	r3,-16(fp)
 8010cbc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8010cc0:	e0bffc17 	ldw	r2,-16(fp)
 8010cc4:	10c00017 	ldw	r3,0(r2)
 8010cc8:	e0bffd17 	ldw	r2,-12(fp)
 8010ccc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8010cd0:	e0bffc17 	ldw	r2,-16(fp)
 8010cd4:	10800017 	ldw	r2,0(r2)
 8010cd8:	e0fffd17 	ldw	r3,-12(fp)
 8010cdc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010ce0:	e0bffc17 	ldw	r2,-16(fp)
 8010ce4:	e0fffd17 	ldw	r3,-12(fp)
 8010ce8:	10c00015 	stw	r3,0(r2)

  return 0;  
 8010cec:	0005883a 	mov	r2,zero
}
 8010cf0:	e037883a 	mov	sp,fp
 8010cf4:	dfc00117 	ldw	ra,4(sp)
 8010cf8:	df000017 	ldw	fp,0(sp)
 8010cfc:	dec00204 	addi	sp,sp,8
 8010d00:	f800283a 	ret

08010d04 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8010d04:	defffd04 	addi	sp,sp,-12
 8010d08:	dfc00215 	stw	ra,8(sp)
 8010d0c:	df000115 	stw	fp,4(sp)
 8010d10:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010d14:	00820074 	movhi	r2,2049
 8010d18:	10867504 	addi	r2,r2,6612
 8010d1c:	e0bfff15 	stw	r2,-4(fp)
 8010d20:	00000606 	br	8010d3c <_do_ctors+0x38>
        (*ctor) (); 
 8010d24:	e0bfff17 	ldw	r2,-4(fp)
 8010d28:	10800017 	ldw	r2,0(r2)
 8010d2c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010d30:	e0bfff17 	ldw	r2,-4(fp)
 8010d34:	10bfff04 	addi	r2,r2,-4
 8010d38:	e0bfff15 	stw	r2,-4(fp)
 8010d3c:	e0ffff17 	ldw	r3,-4(fp)
 8010d40:	00820074 	movhi	r2,2049
 8010d44:	10867604 	addi	r2,r2,6616
 8010d48:	18bff62e 	bgeu	r3,r2,8010d24 <__alt_data_end+0xfc010d24>
        (*ctor) (); 
}
 8010d4c:	e037883a 	mov	sp,fp
 8010d50:	dfc00117 	ldw	ra,4(sp)
 8010d54:	df000017 	ldw	fp,0(sp)
 8010d58:	dec00204 	addi	sp,sp,8
 8010d5c:	f800283a 	ret

08010d60 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8010d60:	defffd04 	addi	sp,sp,-12
 8010d64:	dfc00215 	stw	ra,8(sp)
 8010d68:	df000115 	stw	fp,4(sp)
 8010d6c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8010d70:	00820074 	movhi	r2,2049
 8010d74:	10867504 	addi	r2,r2,6612
 8010d78:	e0bfff15 	stw	r2,-4(fp)
 8010d7c:	00000606 	br	8010d98 <_do_dtors+0x38>
        (*dtor) (); 
 8010d80:	e0bfff17 	ldw	r2,-4(fp)
 8010d84:	10800017 	ldw	r2,0(r2)
 8010d88:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8010d8c:	e0bfff17 	ldw	r2,-4(fp)
 8010d90:	10bfff04 	addi	r2,r2,-4
 8010d94:	e0bfff15 	stw	r2,-4(fp)
 8010d98:	e0ffff17 	ldw	r3,-4(fp)
 8010d9c:	00820074 	movhi	r2,2049
 8010da0:	10867604 	addi	r2,r2,6616
 8010da4:	18bff62e 	bgeu	r3,r2,8010d80 <__alt_data_end+0xfc010d80>
        (*dtor) (); 
}
 8010da8:	e037883a 	mov	sp,fp
 8010dac:	dfc00117 	ldw	ra,4(sp)
 8010db0:	df000017 	ldw	fp,0(sp)
 8010db4:	dec00204 	addi	sp,sp,8
 8010db8:	f800283a 	ret

08010dbc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8010dbc:	defffa04 	addi	sp,sp,-24
 8010dc0:	dfc00515 	stw	ra,20(sp)
 8010dc4:	df000415 	stw	fp,16(sp)
 8010dc8:	df000404 	addi	fp,sp,16
 8010dcc:	e13ffe15 	stw	r4,-8(fp)
 8010dd0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8010dd4:	e0bfff17 	ldw	r2,-4(fp)
 8010dd8:	10800017 	ldw	r2,0(r2)
 8010ddc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8010de0:	e13ffe17 	ldw	r4,-8(fp)
 8010de4:	80034700 	call	8003470 <strlen>
 8010de8:	10800044 	addi	r2,r2,1
 8010dec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010df0:	00000d06 	br	8010e28 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8010df4:	e0bffc17 	ldw	r2,-16(fp)
 8010df8:	10c00217 	ldw	r3,8(r2)
 8010dfc:	e0bffd17 	ldw	r2,-12(fp)
 8010e00:	1809883a 	mov	r4,r3
 8010e04:	e17ffe17 	ldw	r5,-8(fp)
 8010e08:	100d883a 	mov	r6,r2
 8010e0c:	80116800 	call	8011680 <memcmp>
 8010e10:	1000021e 	bne	r2,zero,8010e1c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8010e14:	e0bffc17 	ldw	r2,-16(fp)
 8010e18:	00000706 	br	8010e38 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8010e1c:	e0bffc17 	ldw	r2,-16(fp)
 8010e20:	10800017 	ldw	r2,0(r2)
 8010e24:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010e28:	e0fffc17 	ldw	r3,-16(fp)
 8010e2c:	e0bfff17 	ldw	r2,-4(fp)
 8010e30:	18bff01e 	bne	r3,r2,8010df4 <__alt_data_end+0xfc010df4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8010e34:	0005883a 	mov	r2,zero
}
 8010e38:	e037883a 	mov	sp,fp
 8010e3c:	dfc00117 	ldw	ra,4(sp)
 8010e40:	df000017 	ldw	fp,0(sp)
 8010e44:	dec00204 	addi	sp,sp,8
 8010e48:	f800283a 	ret

08010e4c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8010e4c:	defffb04 	addi	sp,sp,-20
 8010e50:	dfc00415 	stw	ra,16(sp)
 8010e54:	df000315 	stw	fp,12(sp)
 8010e58:	df000304 	addi	fp,sp,12
 8010e5c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8010e60:	00820074 	movhi	r2,2049
 8010e64:	108f3804 	addi	r2,r2,15584
 8010e68:	10800017 	ldw	r2,0(r2)
 8010e6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8010e70:	00003106 	br	8010f38 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8010e74:	e0bffd17 	ldw	r2,-12(fp)
 8010e78:	10800217 	ldw	r2,8(r2)
 8010e7c:	1009883a 	mov	r4,r2
 8010e80:	80034700 	call	8003470 <strlen>
 8010e84:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8010e88:	e0bffd17 	ldw	r2,-12(fp)
 8010e8c:	10c00217 	ldw	r3,8(r2)
 8010e90:	e0bffe17 	ldw	r2,-8(fp)
 8010e94:	10bfffc4 	addi	r2,r2,-1
 8010e98:	1885883a 	add	r2,r3,r2
 8010e9c:	10800003 	ldbu	r2,0(r2)
 8010ea0:	10803fcc 	andi	r2,r2,255
 8010ea4:	1080201c 	xori	r2,r2,128
 8010ea8:	10bfe004 	addi	r2,r2,-128
 8010eac:	10800bd8 	cmpnei	r2,r2,47
 8010eb0:	1000031e 	bne	r2,zero,8010ec0 <alt_find_file+0x74>
    {
      len -= 1;
 8010eb4:	e0bffe17 	ldw	r2,-8(fp)
 8010eb8:	10bfffc4 	addi	r2,r2,-1
 8010ebc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010ec0:	e0bffe17 	ldw	r2,-8(fp)
 8010ec4:	e0ffff17 	ldw	r3,-4(fp)
 8010ec8:	1885883a 	add	r2,r3,r2
 8010ecc:	10800003 	ldbu	r2,0(r2)
 8010ed0:	10803fcc 	andi	r2,r2,255
 8010ed4:	1080201c 	xori	r2,r2,128
 8010ed8:	10bfe004 	addi	r2,r2,-128
 8010edc:	10800be0 	cmpeqi	r2,r2,47
 8010ee0:	1000081e 	bne	r2,zero,8010f04 <alt_find_file+0xb8>
 8010ee4:	e0bffe17 	ldw	r2,-8(fp)
 8010ee8:	e0ffff17 	ldw	r3,-4(fp)
 8010eec:	1885883a 	add	r2,r3,r2
 8010ef0:	10800003 	ldbu	r2,0(r2)
 8010ef4:	10803fcc 	andi	r2,r2,255
 8010ef8:	1080201c 	xori	r2,r2,128
 8010efc:	10bfe004 	addi	r2,r2,-128
 8010f00:	10000a1e 	bne	r2,zero,8010f2c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8010f04:	e0bffd17 	ldw	r2,-12(fp)
 8010f08:	10c00217 	ldw	r3,8(r2)
 8010f0c:	e0bffe17 	ldw	r2,-8(fp)
 8010f10:	1809883a 	mov	r4,r3
 8010f14:	e17fff17 	ldw	r5,-4(fp)
 8010f18:	100d883a 	mov	r6,r2
 8010f1c:	80116800 	call	8011680 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010f20:	1000021e 	bne	r2,zero,8010f2c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8010f24:	e0bffd17 	ldw	r2,-12(fp)
 8010f28:	00000806 	br	8010f4c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 8010f2c:	e0bffd17 	ldw	r2,-12(fp)
 8010f30:	10800017 	ldw	r2,0(r2)
 8010f34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8010f38:	e0fffd17 	ldw	r3,-12(fp)
 8010f3c:	00820074 	movhi	r2,2049
 8010f40:	108f3804 	addi	r2,r2,15584
 8010f44:	18bfcb1e 	bne	r3,r2,8010e74 <__alt_data_end+0xfc010e74>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8010f48:	0005883a 	mov	r2,zero
}
 8010f4c:	e037883a 	mov	sp,fp
 8010f50:	dfc00117 	ldw	ra,4(sp)
 8010f54:	df000017 	ldw	fp,0(sp)
 8010f58:	dec00204 	addi	sp,sp,8
 8010f5c:	f800283a 	ret

08010f60 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8010f60:	defffa04 	addi	sp,sp,-24
 8010f64:	dfc00515 	stw	ra,20(sp)
 8010f68:	df000415 	stw	fp,16(sp)
 8010f6c:	dc000315 	stw	r16,12(sp)
 8010f70:	df000404 	addi	fp,sp,16
 8010f74:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8010f78:	00bffa04 	movi	r2,-24
 8010f7c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8010f80:	e03ffc15 	stw	zero,-16(fp)
 8010f84:	00002106 	br	801100c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 8010f88:	04020074 	movhi	r16,2049
 8010f8c:	840a8804 	addi	r16,r16,10784
 8010f90:	e0bffc17 	ldw	r2,-16(fp)
 8010f94:	1009883a 	mov	r4,r2
 8010f98:	01400304 	movi	r5,12
 8010f9c:	800bf500 	call	800bf50 <__mulsi3>
 8010fa0:	8085883a 	add	r2,r16,r2
 8010fa4:	10800017 	ldw	r2,0(r2)
 8010fa8:	1000151e 	bne	r2,zero,8011000 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 8010fac:	04020074 	movhi	r16,2049
 8010fb0:	840a8804 	addi	r16,r16,10784
 8010fb4:	e0bffc17 	ldw	r2,-16(fp)
 8010fb8:	1009883a 	mov	r4,r2
 8010fbc:	01400304 	movi	r5,12
 8010fc0:	800bf500 	call	800bf50 <__mulsi3>
 8010fc4:	8085883a 	add	r2,r16,r2
 8010fc8:	e0fffe17 	ldw	r3,-8(fp)
 8010fcc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8010fd0:	00820074 	movhi	r2,2049
 8010fd4:	108f3c04 	addi	r2,r2,15600
 8010fd8:	10c00017 	ldw	r3,0(r2)
 8010fdc:	e0bffc17 	ldw	r2,-16(fp)
 8010fe0:	1880040e 	bge	r3,r2,8010ff4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 8010fe4:	00820074 	movhi	r2,2049
 8010fe8:	108f3c04 	addi	r2,r2,15600
 8010fec:	e0fffc17 	ldw	r3,-16(fp)
 8010ff0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8010ff4:	e0bffc17 	ldw	r2,-16(fp)
 8010ff8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8010ffc:	00000606 	br	8011018 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8011000:	e0bffc17 	ldw	r2,-16(fp)
 8011004:	10800044 	addi	r2,r2,1
 8011008:	e0bffc15 	stw	r2,-16(fp)
 801100c:	e0bffc17 	ldw	r2,-16(fp)
 8011010:	10800810 	cmplti	r2,r2,32
 8011014:	103fdc1e 	bne	r2,zero,8010f88 <__alt_data_end+0xfc010f88>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8011018:	e0bffd17 	ldw	r2,-12(fp)
}
 801101c:	e6ffff04 	addi	sp,fp,-4
 8011020:	dfc00217 	ldw	ra,8(sp)
 8011024:	df000117 	ldw	fp,4(sp)
 8011028:	dc000017 	ldw	r16,0(sp)
 801102c:	dec00304 	addi	sp,sp,12
 8011030:	f800283a 	ret

08011034 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8011034:	deffff04 	addi	sp,sp,-4
 8011038:	df000015 	stw	fp,0(sp)
 801103c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8011040:	e037883a 	mov	sp,fp
 8011044:	df000017 	ldw	fp,0(sp)
 8011048:	dec00104 	addi	sp,sp,4
 801104c:	f800283a 	ret

08011050 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8011050:	defff904 	addi	sp,sp,-28
 8011054:	dfc00615 	stw	ra,24(sp)
 8011058:	df000515 	stw	fp,20(sp)
 801105c:	df000504 	addi	fp,sp,20
 8011060:	e13ffc15 	stw	r4,-16(fp)
 8011064:	e17ffd15 	stw	r5,-12(fp)
 8011068:	e1bffe15 	stw	r6,-8(fp)
 801106c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8011070:	e0800217 	ldw	r2,8(fp)
 8011074:	d8800015 	stw	r2,0(sp)
 8011078:	e13ffc17 	ldw	r4,-16(fp)
 801107c:	e17ffd17 	ldw	r5,-12(fp)
 8011080:	e1bffe17 	ldw	r6,-8(fp)
 8011084:	e1ffff17 	ldw	r7,-4(fp)
 8011088:	80112300 	call	8011230 <alt_iic_isr_register>
}  
 801108c:	e037883a 	mov	sp,fp
 8011090:	dfc00117 	ldw	ra,4(sp)
 8011094:	df000017 	ldw	fp,0(sp)
 8011098:	dec00204 	addi	sp,sp,8
 801109c:	f800283a 	ret

080110a0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 80110a0:	defff904 	addi	sp,sp,-28
 80110a4:	df000615 	stw	fp,24(sp)
 80110a8:	df000604 	addi	fp,sp,24
 80110ac:	e13ffe15 	stw	r4,-8(fp)
 80110b0:	e17fff15 	stw	r5,-4(fp)
 80110b4:	e0bfff17 	ldw	r2,-4(fp)
 80110b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80110bc:	0005303a 	rdctl	r2,status
 80110c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80110c4:	e0fffb17 	ldw	r3,-20(fp)
 80110c8:	00bfff84 	movi	r2,-2
 80110cc:	1884703a 	and	r2,r3,r2
 80110d0:	1001703a 	wrctl	status,r2
  
  return context;
 80110d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80110d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 80110dc:	e0bffa17 	ldw	r2,-24(fp)
 80110e0:	00c00044 	movi	r3,1
 80110e4:	1884983a 	sll	r2,r3,r2
 80110e8:	1007883a 	mov	r3,r2
 80110ec:	00820074 	movhi	r2,2049
 80110f0:	10963904 	addi	r2,r2,22756
 80110f4:	10800017 	ldw	r2,0(r2)
 80110f8:	1886b03a 	or	r3,r3,r2
 80110fc:	00820074 	movhi	r2,2049
 8011100:	10963904 	addi	r2,r2,22756
 8011104:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8011108:	00820074 	movhi	r2,2049
 801110c:	10963904 	addi	r2,r2,22756
 8011110:	10800017 	ldw	r2,0(r2)
 8011114:	100170fa 	wrctl	ienable,r2
 8011118:	e0bffc17 	ldw	r2,-16(fp)
 801111c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011120:	e0bffd17 	ldw	r2,-12(fp)
 8011124:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8011128:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 801112c:	0001883a 	nop
}
 8011130:	e037883a 	mov	sp,fp
 8011134:	df000017 	ldw	fp,0(sp)
 8011138:	dec00104 	addi	sp,sp,4
 801113c:	f800283a 	ret

08011140 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8011140:	defff904 	addi	sp,sp,-28
 8011144:	df000615 	stw	fp,24(sp)
 8011148:	df000604 	addi	fp,sp,24
 801114c:	e13ffe15 	stw	r4,-8(fp)
 8011150:	e17fff15 	stw	r5,-4(fp)
 8011154:	e0bfff17 	ldw	r2,-4(fp)
 8011158:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801115c:	0005303a 	rdctl	r2,status
 8011160:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011164:	e0fffb17 	ldw	r3,-20(fp)
 8011168:	00bfff84 	movi	r2,-2
 801116c:	1884703a 	and	r2,r3,r2
 8011170:	1001703a 	wrctl	status,r2
  
  return context;
 8011174:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8011178:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 801117c:	e0bffa17 	ldw	r2,-24(fp)
 8011180:	00c00044 	movi	r3,1
 8011184:	1884983a 	sll	r2,r3,r2
 8011188:	0084303a 	nor	r2,zero,r2
 801118c:	1007883a 	mov	r3,r2
 8011190:	00820074 	movhi	r2,2049
 8011194:	10963904 	addi	r2,r2,22756
 8011198:	10800017 	ldw	r2,0(r2)
 801119c:	1886703a 	and	r3,r3,r2
 80111a0:	00820074 	movhi	r2,2049
 80111a4:	10963904 	addi	r2,r2,22756
 80111a8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80111ac:	00820074 	movhi	r2,2049
 80111b0:	10963904 	addi	r2,r2,22756
 80111b4:	10800017 	ldw	r2,0(r2)
 80111b8:	100170fa 	wrctl	ienable,r2
 80111bc:	e0bffc17 	ldw	r2,-16(fp)
 80111c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80111c4:	e0bffd17 	ldw	r2,-12(fp)
 80111c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80111cc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 80111d0:	0001883a 	nop
}
 80111d4:	e037883a 	mov	sp,fp
 80111d8:	df000017 	ldw	fp,0(sp)
 80111dc:	dec00104 	addi	sp,sp,4
 80111e0:	f800283a 	ret

080111e4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 80111e4:	defffc04 	addi	sp,sp,-16
 80111e8:	df000315 	stw	fp,12(sp)
 80111ec:	df000304 	addi	fp,sp,12
 80111f0:	e13ffe15 	stw	r4,-8(fp)
 80111f4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80111f8:	000530fa 	rdctl	r2,ienable
 80111fc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8011200:	e0bfff17 	ldw	r2,-4(fp)
 8011204:	00c00044 	movi	r3,1
 8011208:	1884983a 	sll	r2,r3,r2
 801120c:	1007883a 	mov	r3,r2
 8011210:	e0bffd17 	ldw	r2,-12(fp)
 8011214:	1884703a 	and	r2,r3,r2
 8011218:	1004c03a 	cmpne	r2,r2,zero
 801121c:	10803fcc 	andi	r2,r2,255
}
 8011220:	e037883a 	mov	sp,fp
 8011224:	df000017 	ldw	fp,0(sp)
 8011228:	dec00104 	addi	sp,sp,4
 801122c:	f800283a 	ret

08011230 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8011230:	defff504 	addi	sp,sp,-44
 8011234:	dfc00a15 	stw	ra,40(sp)
 8011238:	df000915 	stw	fp,36(sp)
 801123c:	df000904 	addi	fp,sp,36
 8011240:	e13ffc15 	stw	r4,-16(fp)
 8011244:	e17ffd15 	stw	r5,-12(fp)
 8011248:	e1bffe15 	stw	r6,-8(fp)
 801124c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8011250:	00bffa84 	movi	r2,-22
 8011254:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8011258:	e0bffd17 	ldw	r2,-12(fp)
 801125c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8011260:	e0bff817 	ldw	r2,-32(fp)
 8011264:	10800808 	cmpgei	r2,r2,32
 8011268:	1000271e 	bne	r2,zero,8011308 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801126c:	0005303a 	rdctl	r2,status
 8011270:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011274:	e0fffa17 	ldw	r3,-24(fp)
 8011278:	00bfff84 	movi	r2,-2
 801127c:	1884703a 	and	r2,r3,r2
 8011280:	1001703a 	wrctl	status,r2
  
  return context;
 8011284:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8011288:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 801128c:	00820074 	movhi	r2,2049
 8011290:	10964604 	addi	r2,r2,22808
 8011294:	e0fff817 	ldw	r3,-32(fp)
 8011298:	180690fa 	slli	r3,r3,3
 801129c:	10c5883a 	add	r2,r2,r3
 80112a0:	e0fffe17 	ldw	r3,-8(fp)
 80112a4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 80112a8:	00820074 	movhi	r2,2049
 80112ac:	10964604 	addi	r2,r2,22808
 80112b0:	e0fff817 	ldw	r3,-32(fp)
 80112b4:	180690fa 	slli	r3,r3,3
 80112b8:	10c5883a 	add	r2,r2,r3
 80112bc:	10800104 	addi	r2,r2,4
 80112c0:	e0ffff17 	ldw	r3,-4(fp)
 80112c4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 80112c8:	e0bffe17 	ldw	r2,-8(fp)
 80112cc:	10000526 	beq	r2,zero,80112e4 <alt_iic_isr_register+0xb4>
 80112d0:	e0bff817 	ldw	r2,-32(fp)
 80112d4:	e13ffc17 	ldw	r4,-16(fp)
 80112d8:	100b883a 	mov	r5,r2
 80112dc:	80110a00 	call	80110a0 <alt_ic_irq_enable>
 80112e0:	00000406 	br	80112f4 <alt_iic_isr_register+0xc4>
 80112e4:	e0bff817 	ldw	r2,-32(fp)
 80112e8:	e13ffc17 	ldw	r4,-16(fp)
 80112ec:	100b883a 	mov	r5,r2
 80112f0:	80111400 	call	8011140 <alt_ic_irq_disable>
 80112f4:	e0bff715 	stw	r2,-36(fp)
 80112f8:	e0bff917 	ldw	r2,-28(fp)
 80112fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011300:	e0bffb17 	ldw	r2,-20(fp)
 8011304:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8011308:	e0bff717 	ldw	r2,-36(fp)
}
 801130c:	e037883a 	mov	sp,fp
 8011310:	dfc00117 	ldw	ra,4(sp)
 8011314:	df000017 	ldw	fp,0(sp)
 8011318:	dec00204 	addi	sp,sp,8
 801131c:	f800283a 	ret

08011320 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8011320:	defff804 	addi	sp,sp,-32
 8011324:	dfc00715 	stw	ra,28(sp)
 8011328:	df000615 	stw	fp,24(sp)
 801132c:	dc000515 	stw	r16,20(sp)
 8011330:	df000604 	addi	fp,sp,24
 8011334:	e13ffb15 	stw	r4,-20(fp)
 8011338:	e17ffc15 	stw	r5,-16(fp)
 801133c:	e1bffd15 	stw	r6,-12(fp)
 8011340:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8011344:	e13ffc17 	ldw	r4,-16(fp)
 8011348:	e17ffd17 	ldw	r5,-12(fp)
 801134c:	e1bffe17 	ldw	r6,-8(fp)
 8011350:	800eed80 	call	800eed8 <open>
 8011354:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8011358:	e0bffa17 	ldw	r2,-24(fp)
 801135c:	10002216 	blt	r2,zero,80113e8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8011360:	04020074 	movhi	r16,2049
 8011364:	840a8804 	addi	r16,r16,10784
 8011368:	e0bffa17 	ldw	r2,-24(fp)
 801136c:	1009883a 	mov	r4,r2
 8011370:	01400304 	movi	r5,12
 8011374:	800bf500 	call	800bf50 <__mulsi3>
 8011378:	8085883a 	add	r2,r16,r2
 801137c:	10c00017 	ldw	r3,0(r2)
 8011380:	e0bffb17 	ldw	r2,-20(fp)
 8011384:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8011388:	04020074 	movhi	r16,2049
 801138c:	840a8804 	addi	r16,r16,10784
 8011390:	e0bffa17 	ldw	r2,-24(fp)
 8011394:	1009883a 	mov	r4,r2
 8011398:	01400304 	movi	r5,12
 801139c:	800bf500 	call	800bf50 <__mulsi3>
 80113a0:	8085883a 	add	r2,r16,r2
 80113a4:	10800104 	addi	r2,r2,4
 80113a8:	10c00017 	ldw	r3,0(r2)
 80113ac:	e0bffb17 	ldw	r2,-20(fp)
 80113b0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 80113b4:	04020074 	movhi	r16,2049
 80113b8:	840a8804 	addi	r16,r16,10784
 80113bc:	e0bffa17 	ldw	r2,-24(fp)
 80113c0:	1009883a 	mov	r4,r2
 80113c4:	01400304 	movi	r5,12
 80113c8:	800bf500 	call	800bf50 <__mulsi3>
 80113cc:	8085883a 	add	r2,r16,r2
 80113d0:	10800204 	addi	r2,r2,8
 80113d4:	10c00017 	ldw	r3,0(r2)
 80113d8:	e0bffb17 	ldw	r2,-20(fp)
 80113dc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80113e0:	e13ffa17 	ldw	r4,-24(fp)
 80113e4:	800f18c0 	call	800f18c <alt_release_fd>
  }
} 
 80113e8:	e6ffff04 	addi	sp,fp,-4
 80113ec:	dfc00217 	ldw	ra,8(sp)
 80113f0:	df000117 	ldw	fp,4(sp)
 80113f4:	dc000017 	ldw	r16,0(sp)
 80113f8:	dec00304 	addi	sp,sp,12
 80113fc:	f800283a 	ret

08011400 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8011400:	defffb04 	addi	sp,sp,-20
 8011404:	dfc00415 	stw	ra,16(sp)
 8011408:	df000315 	stw	fp,12(sp)
 801140c:	df000304 	addi	fp,sp,12
 8011410:	e13ffd15 	stw	r4,-12(fp)
 8011414:	e17ffe15 	stw	r5,-8(fp)
 8011418:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 801141c:	01020074 	movhi	r4,2049
 8011420:	210a8b04 	addi	r4,r4,10796
 8011424:	e17ffd17 	ldw	r5,-12(fp)
 8011428:	01800044 	movi	r6,1
 801142c:	01c07fc4 	movi	r7,511
 8011430:	80113200 	call	8011320 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8011434:	01020074 	movhi	r4,2049
 8011438:	210a8804 	addi	r4,r4,10784
 801143c:	e17ffe17 	ldw	r5,-8(fp)
 8011440:	000d883a 	mov	r6,zero
 8011444:	01c07fc4 	movi	r7,511
 8011448:	80113200 	call	8011320 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 801144c:	01020074 	movhi	r4,2049
 8011450:	210a8e04 	addi	r4,r4,10808
 8011454:	e17fff17 	ldw	r5,-4(fp)
 8011458:	01800044 	movi	r6,1
 801145c:	01c07fc4 	movi	r7,511
 8011460:	80113200 	call	8011320 <alt_open_fd>
}  
 8011464:	e037883a 	mov	sp,fp
 8011468:	dfc00117 	ldw	ra,4(sp)
 801146c:	df000017 	ldw	fp,0(sp)
 8011470:	dec00204 	addi	sp,sp,8
 8011474:	f800283a 	ret

08011478 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8011478:	defffa04 	addi	sp,sp,-24
 801147c:	df000515 	stw	fp,20(sp)
 8011480:	df000504 	addi	fp,sp,20
 8011484:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011488:	0005303a 	rdctl	r2,status
 801148c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011490:	e0fffc17 	ldw	r3,-16(fp)
 8011494:	00bfff84 	movi	r2,-2
 8011498:	1884703a 	and	r2,r3,r2
 801149c:	1001703a 	wrctl	status,r2
  
  return context;
 80114a0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80114a4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80114a8:	e0bfff17 	ldw	r2,-4(fp)
 80114ac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80114b0:	e0bffd17 	ldw	r2,-12(fp)
 80114b4:	10800017 	ldw	r2,0(r2)
 80114b8:	e0fffd17 	ldw	r3,-12(fp)
 80114bc:	18c00117 	ldw	r3,4(r3)
 80114c0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80114c4:	e0bffd17 	ldw	r2,-12(fp)
 80114c8:	10800117 	ldw	r2,4(r2)
 80114cc:	e0fffd17 	ldw	r3,-12(fp)
 80114d0:	18c00017 	ldw	r3,0(r3)
 80114d4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80114d8:	e0bffd17 	ldw	r2,-12(fp)
 80114dc:	e0fffd17 	ldw	r3,-12(fp)
 80114e0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 80114e4:	e0bffd17 	ldw	r2,-12(fp)
 80114e8:	e0fffd17 	ldw	r3,-12(fp)
 80114ec:	10c00015 	stw	r3,0(r2)
 80114f0:	e0bffb17 	ldw	r2,-20(fp)
 80114f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80114f8:	e0bffe17 	ldw	r2,-8(fp)
 80114fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8011500:	e037883a 	mov	sp,fp
 8011504:	df000017 	ldw	fp,0(sp)
 8011508:	dec00104 	addi	sp,sp,4
 801150c:	f800283a 	ret

08011510 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8011510:	defffb04 	addi	sp,sp,-20
 8011514:	dfc00415 	stw	ra,16(sp)
 8011518:	df000315 	stw	fp,12(sp)
 801151c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8011520:	d0a00f17 	ldw	r2,-32708(gp)
 8011524:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8011528:	d0a70a17 	ldw	r2,-25560(gp)
 801152c:	10800044 	addi	r2,r2,1
 8011530:	d0a70a15 	stw	r2,-25560(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8011534:	00002e06 	br	80115f0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8011538:	e0bffd17 	ldw	r2,-12(fp)
 801153c:	10800017 	ldw	r2,0(r2)
 8011540:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8011544:	e0bffd17 	ldw	r2,-12(fp)
 8011548:	10800403 	ldbu	r2,16(r2)
 801154c:	10803fcc 	andi	r2,r2,255
 8011550:	10000426 	beq	r2,zero,8011564 <alt_tick+0x54>
 8011554:	d0a70a17 	ldw	r2,-25560(gp)
 8011558:	1000021e 	bne	r2,zero,8011564 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 801155c:	e0bffd17 	ldw	r2,-12(fp)
 8011560:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8011564:	e0bffd17 	ldw	r2,-12(fp)
 8011568:	10800217 	ldw	r2,8(r2)
 801156c:	d0e70a17 	ldw	r3,-25560(gp)
 8011570:	18801d36 	bltu	r3,r2,80115e8 <alt_tick+0xd8>
 8011574:	e0bffd17 	ldw	r2,-12(fp)
 8011578:	10800403 	ldbu	r2,16(r2)
 801157c:	10803fcc 	andi	r2,r2,255
 8011580:	1000191e 	bne	r2,zero,80115e8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8011584:	e0bffd17 	ldw	r2,-12(fp)
 8011588:	10800317 	ldw	r2,12(r2)
 801158c:	e0fffd17 	ldw	r3,-12(fp)
 8011590:	18c00517 	ldw	r3,20(r3)
 8011594:	1809883a 	mov	r4,r3
 8011598:	103ee83a 	callr	r2
 801159c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80115a0:	e0bfff17 	ldw	r2,-4(fp)
 80115a4:	1000031e 	bne	r2,zero,80115b4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 80115a8:	e13ffd17 	ldw	r4,-12(fp)
 80115ac:	80114780 	call	8011478 <alt_alarm_stop>
 80115b0:	00000d06 	br	80115e8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 80115b4:	e0bffd17 	ldw	r2,-12(fp)
 80115b8:	10c00217 	ldw	r3,8(r2)
 80115bc:	e0bfff17 	ldw	r2,-4(fp)
 80115c0:	1887883a 	add	r3,r3,r2
 80115c4:	e0bffd17 	ldw	r2,-12(fp)
 80115c8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80115cc:	e0bffd17 	ldw	r2,-12(fp)
 80115d0:	10c00217 	ldw	r3,8(r2)
 80115d4:	d0a70a17 	ldw	r2,-25560(gp)
 80115d8:	1880032e 	bgeu	r3,r2,80115e8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 80115dc:	e0bffd17 	ldw	r2,-12(fp)
 80115e0:	00c00044 	movi	r3,1
 80115e4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 80115e8:	e0bffe17 	ldw	r2,-8(fp)
 80115ec:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80115f0:	e0fffd17 	ldw	r3,-12(fp)
 80115f4:	d0a00f04 	addi	r2,gp,-32708
 80115f8:	18bfcf1e 	bne	r3,r2,8011538 <__alt_data_end+0xfc011538>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 80115fc:	0001883a 	nop
}
 8011600:	e037883a 	mov	sp,fp
 8011604:	dfc00117 	ldw	ra,4(sp)
 8011608:	df000017 	ldw	fp,0(sp)
 801160c:	dec00204 	addi	sp,sp,8
 8011610:	f800283a 	ret

08011614 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 8011614:	deffff04 	addi	sp,sp,-4
 8011618:	df000015 	stw	fp,0(sp)
 801161c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8011620:	000170fa 	wrctl	ienable,zero
}
 8011624:	e037883a 	mov	sp,fp
 8011628:	df000017 	ldw	fp,0(sp)
 801162c:	dec00104 	addi	sp,sp,4
 8011630:	f800283a 	ret

08011634 <atexit>:
 8011634:	200b883a 	mov	r5,r4
 8011638:	000d883a 	mov	r6,zero
 801163c:	0009883a 	mov	r4,zero
 8011640:	000f883a 	mov	r7,zero
 8011644:	80116fc1 	jmpi	80116fc <__register_exitproc>

08011648 <exit>:
 8011648:	defffe04 	addi	sp,sp,-8
 801164c:	000b883a 	mov	r5,zero
 8011650:	dc000015 	stw	r16,0(sp)
 8011654:	dfc00115 	stw	ra,4(sp)
 8011658:	2021883a 	mov	r16,r4
 801165c:	80118100 	call	8011810 <__call_exitprocs>
 8011660:	00820074 	movhi	r2,2049
 8011664:	108f3104 	addi	r2,r2,15556
 8011668:	11000017 	ldw	r4,0(r2)
 801166c:	20800f17 	ldw	r2,60(r4)
 8011670:	10000126 	beq	r2,zero,8011678 <exit+0x30>
 8011674:	103ee83a 	callr	r2
 8011678:	8009883a 	mov	r4,r16
 801167c:	80119a40 	call	80119a4 <_exit>

08011680 <memcmp>:
 8011680:	01c000c4 	movi	r7,3
 8011684:	3980192e 	bgeu	r7,r6,80116ec <memcmp+0x6c>
 8011688:	2144b03a 	or	r2,r4,r5
 801168c:	11c4703a 	and	r2,r2,r7
 8011690:	10000f26 	beq	r2,zero,80116d0 <memcmp+0x50>
 8011694:	20800003 	ldbu	r2,0(r4)
 8011698:	28c00003 	ldbu	r3,0(r5)
 801169c:	10c0151e 	bne	r2,r3,80116f4 <memcmp+0x74>
 80116a0:	31bfff84 	addi	r6,r6,-2
 80116a4:	01ffffc4 	movi	r7,-1
 80116a8:	00000406 	br	80116bc <memcmp+0x3c>
 80116ac:	20800003 	ldbu	r2,0(r4)
 80116b0:	28c00003 	ldbu	r3,0(r5)
 80116b4:	31bfffc4 	addi	r6,r6,-1
 80116b8:	10c00e1e 	bne	r2,r3,80116f4 <memcmp+0x74>
 80116bc:	21000044 	addi	r4,r4,1
 80116c0:	29400044 	addi	r5,r5,1
 80116c4:	31fff91e 	bne	r6,r7,80116ac <__alt_data_end+0xfc0116ac>
 80116c8:	0005883a 	mov	r2,zero
 80116cc:	f800283a 	ret
 80116d0:	20c00017 	ldw	r3,0(r4)
 80116d4:	28800017 	ldw	r2,0(r5)
 80116d8:	1880041e 	bne	r3,r2,80116ec <memcmp+0x6c>
 80116dc:	31bfff04 	addi	r6,r6,-4
 80116e0:	21000104 	addi	r4,r4,4
 80116e4:	29400104 	addi	r5,r5,4
 80116e8:	39bff936 	bltu	r7,r6,80116d0 <__alt_data_end+0xfc0116d0>
 80116ec:	303fe91e 	bne	r6,zero,8011694 <__alt_data_end+0xfc011694>
 80116f0:	003ff506 	br	80116c8 <__alt_data_end+0xfc0116c8>
 80116f4:	10c5c83a 	sub	r2,r2,r3
 80116f8:	f800283a 	ret

080116fc <__register_exitproc>:
 80116fc:	00820074 	movhi	r2,2049
 8011700:	defffa04 	addi	sp,sp,-24
 8011704:	108f3104 	addi	r2,r2,15556
 8011708:	dc000315 	stw	r16,12(sp)
 801170c:	14000017 	ldw	r16,0(r2)
 8011710:	dc400415 	stw	r17,16(sp)
 8011714:	dfc00515 	stw	ra,20(sp)
 8011718:	80805217 	ldw	r2,328(r16)
 801171c:	2023883a 	mov	r17,r4
 8011720:	10003626 	beq	r2,zero,80117fc <__register_exitproc+0x100>
 8011724:	10c00117 	ldw	r3,4(r2)
 8011728:	010007c4 	movi	r4,31
 801172c:	20c00e16 	blt	r4,r3,8011768 <__register_exitproc+0x6c>
 8011730:	1a400044 	addi	r9,r3,1
 8011734:	8800211e 	bne	r17,zero,80117bc <__register_exitproc+0xc0>
 8011738:	18c00084 	addi	r3,r3,2
 801173c:	18c7883a 	add	r3,r3,r3
 8011740:	18c7883a 	add	r3,r3,r3
 8011744:	12400115 	stw	r9,4(r2)
 8011748:	10c7883a 	add	r3,r2,r3
 801174c:	19400015 	stw	r5,0(r3)
 8011750:	0005883a 	mov	r2,zero
 8011754:	dfc00517 	ldw	ra,20(sp)
 8011758:	dc400417 	ldw	r17,16(sp)
 801175c:	dc000317 	ldw	r16,12(sp)
 8011760:	dec00604 	addi	sp,sp,24
 8011764:	f800283a 	ret
 8011768:	00800034 	movhi	r2,0
 801176c:	10800004 	addi	r2,r2,0
 8011770:	10002526 	beq	r2,zero,8011808 <__register_exitproc+0x10c>
 8011774:	01006404 	movi	r4,400
 8011778:	d9400015 	stw	r5,0(sp)
 801177c:	d9800115 	stw	r6,4(sp)
 8011780:	d9c00215 	stw	r7,8(sp)
 8011784:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8011788:	d9400017 	ldw	r5,0(sp)
 801178c:	d9800117 	ldw	r6,4(sp)
 8011790:	d9c00217 	ldw	r7,8(sp)
 8011794:	10001c26 	beq	r2,zero,8011808 <__register_exitproc+0x10c>
 8011798:	80c05217 	ldw	r3,328(r16)
 801179c:	10000115 	stw	zero,4(r2)
 80117a0:	02400044 	movi	r9,1
 80117a4:	10c00015 	stw	r3,0(r2)
 80117a8:	80805215 	stw	r2,328(r16)
 80117ac:	10006215 	stw	zero,392(r2)
 80117b0:	10006315 	stw	zero,396(r2)
 80117b4:	0007883a 	mov	r3,zero
 80117b8:	883fdf26 	beq	r17,zero,8011738 <__alt_data_end+0xfc011738>
 80117bc:	18d1883a 	add	r8,r3,r3
 80117c0:	4211883a 	add	r8,r8,r8
 80117c4:	1211883a 	add	r8,r2,r8
 80117c8:	41802215 	stw	r6,136(r8)
 80117cc:	01000044 	movi	r4,1
 80117d0:	11806217 	ldw	r6,392(r2)
 80117d4:	20c8983a 	sll	r4,r4,r3
 80117d8:	310cb03a 	or	r6,r6,r4
 80117dc:	11806215 	stw	r6,392(r2)
 80117e0:	41c04215 	stw	r7,264(r8)
 80117e4:	01800084 	movi	r6,2
 80117e8:	89bfd31e 	bne	r17,r6,8011738 <__alt_data_end+0xfc011738>
 80117ec:	11806317 	ldw	r6,396(r2)
 80117f0:	3108b03a 	or	r4,r6,r4
 80117f4:	11006315 	stw	r4,396(r2)
 80117f8:	003fcf06 	br	8011738 <__alt_data_end+0xfc011738>
 80117fc:	80805304 	addi	r2,r16,332
 8011800:	80805215 	stw	r2,328(r16)
 8011804:	003fc706 	br	8011724 <__alt_data_end+0xfc011724>
 8011808:	00bfffc4 	movi	r2,-1
 801180c:	003fd106 	br	8011754 <__alt_data_end+0xfc011754>

08011810 <__call_exitprocs>:
 8011810:	00820074 	movhi	r2,2049
 8011814:	108f3104 	addi	r2,r2,15556
 8011818:	10800017 	ldw	r2,0(r2)
 801181c:	defff404 	addi	sp,sp,-48
 8011820:	dd800815 	stw	r22,32(sp)
 8011824:	d8800015 	stw	r2,0(sp)
 8011828:	10805204 	addi	r2,r2,328
 801182c:	dd000615 	stw	r20,24(sp)
 8011830:	dc800415 	stw	r18,16(sp)
 8011834:	dfc00b15 	stw	ra,44(sp)
 8011838:	df000a15 	stw	fp,40(sp)
 801183c:	ddc00915 	stw	r23,36(sp)
 8011840:	dd400715 	stw	r21,28(sp)
 8011844:	dcc00515 	stw	r19,20(sp)
 8011848:	dc400315 	stw	r17,12(sp)
 801184c:	dc000215 	stw	r16,8(sp)
 8011850:	2025883a 	mov	r18,r4
 8011854:	2829883a 	mov	r20,r5
 8011858:	d8800115 	stw	r2,4(sp)
 801185c:	05bfffc4 	movi	r22,-1
 8011860:	d8800017 	ldw	r2,0(sp)
 8011864:	14c05217 	ldw	r19,328(r2)
 8011868:	98001d26 	beq	r19,zero,80118e0 <__call_exitprocs+0xd0>
 801186c:	dd400117 	ldw	r21,4(sp)
 8011870:	98800117 	ldw	r2,4(r19)
 8011874:	173fffc4 	addi	fp,r2,-1
 8011878:	e0000d16 	blt	fp,zero,80118b0 <__call_exitprocs+0xa0>
 801187c:	14000044 	addi	r16,r2,1
 8011880:	8421883a 	add	r16,r16,r16
 8011884:	8421883a 	add	r16,r16,r16
 8011888:	84402004 	addi	r17,r16,128
 801188c:	9c63883a 	add	r17,r19,r17
 8011890:	9c21883a 	add	r16,r19,r16
 8011894:	a0001e26 	beq	r20,zero,8011910 <__call_exitprocs+0x100>
 8011898:	80804017 	ldw	r2,256(r16)
 801189c:	15001c26 	beq	r2,r20,8011910 <__call_exitprocs+0x100>
 80118a0:	e73fffc4 	addi	fp,fp,-1
 80118a4:	843fff04 	addi	r16,r16,-4
 80118a8:	8c7fff04 	addi	r17,r17,-4
 80118ac:	e5bff91e 	bne	fp,r22,8011894 <__alt_data_end+0xfc011894>
 80118b0:	00800034 	movhi	r2,0
 80118b4:	10800004 	addi	r2,r2,0
 80118b8:	10000926 	beq	r2,zero,80118e0 <__call_exitprocs+0xd0>
 80118bc:	98800117 	ldw	r2,4(r19)
 80118c0:	1000311e 	bne	r2,zero,8011988 <__call_exitprocs+0x178>
 80118c4:	98800017 	ldw	r2,0(r19)
 80118c8:	10003426 	beq	r2,zero,801199c <__call_exitprocs+0x18c>
 80118cc:	9809883a 	mov	r4,r19
 80118d0:	a8800015 	stw	r2,0(r21)
 80118d4:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 80118d8:	acc00017 	ldw	r19,0(r21)
 80118dc:	983fe41e 	bne	r19,zero,8011870 <__alt_data_end+0xfc011870>
 80118e0:	dfc00b17 	ldw	ra,44(sp)
 80118e4:	df000a17 	ldw	fp,40(sp)
 80118e8:	ddc00917 	ldw	r23,36(sp)
 80118ec:	dd800817 	ldw	r22,32(sp)
 80118f0:	dd400717 	ldw	r21,28(sp)
 80118f4:	dd000617 	ldw	r20,24(sp)
 80118f8:	dcc00517 	ldw	r19,20(sp)
 80118fc:	dc800417 	ldw	r18,16(sp)
 8011900:	dc400317 	ldw	r17,12(sp)
 8011904:	dc000217 	ldw	r16,8(sp)
 8011908:	dec00c04 	addi	sp,sp,48
 801190c:	f800283a 	ret
 8011910:	98800117 	ldw	r2,4(r19)
 8011914:	80c00017 	ldw	r3,0(r16)
 8011918:	10bfffc4 	addi	r2,r2,-1
 801191c:	17001526 	beq	r2,fp,8011974 <__call_exitprocs+0x164>
 8011920:	80000015 	stw	zero,0(r16)
 8011924:	183fde26 	beq	r3,zero,80118a0 <__alt_data_end+0xfc0118a0>
 8011928:	00800044 	movi	r2,1
 801192c:	1708983a 	sll	r4,r2,fp
 8011930:	98806217 	ldw	r2,392(r19)
 8011934:	9dc00117 	ldw	r23,4(r19)
 8011938:	2084703a 	and	r2,r4,r2
 801193c:	1000061e 	bne	r2,zero,8011958 <__call_exitprocs+0x148>
 8011940:	183ee83a 	callr	r3
 8011944:	98800117 	ldw	r2,4(r19)
 8011948:	15ffc51e 	bne	r2,r23,8011860 <__alt_data_end+0xfc011860>
 801194c:	a8800017 	ldw	r2,0(r21)
 8011950:	14ffd326 	beq	r2,r19,80118a0 <__alt_data_end+0xfc0118a0>
 8011954:	003fc206 	br	8011860 <__alt_data_end+0xfc011860>
 8011958:	98806317 	ldw	r2,396(r19)
 801195c:	2084703a 	and	r2,r4,r2
 8011960:	1000061e 	bne	r2,zero,801197c <__call_exitprocs+0x16c>
 8011964:	89400017 	ldw	r5,0(r17)
 8011968:	9009883a 	mov	r4,r18
 801196c:	183ee83a 	callr	r3
 8011970:	003ff406 	br	8011944 <__alt_data_end+0xfc011944>
 8011974:	9f000115 	stw	fp,4(r19)
 8011978:	003fea06 	br	8011924 <__alt_data_end+0xfc011924>
 801197c:	89000017 	ldw	r4,0(r17)
 8011980:	183ee83a 	callr	r3
 8011984:	003fef06 	br	8011944 <__alt_data_end+0xfc011944>
 8011988:	98800017 	ldw	r2,0(r19)
 801198c:	982b883a 	mov	r21,r19
 8011990:	1027883a 	mov	r19,r2
 8011994:	983fb61e 	bne	r19,zero,8011870 <__alt_data_end+0xfc011870>
 8011998:	003fd106 	br	80118e0 <__alt_data_end+0xfc0118e0>
 801199c:	0005883a 	mov	r2,zero
 80119a0:	003ffa06 	br	801198c <__alt_data_end+0xfc01198c>

080119a4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80119a4:	defffd04 	addi	sp,sp,-12
 80119a8:	df000215 	stw	fp,8(sp)
 80119ac:	df000204 	addi	fp,sp,8
 80119b0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80119b4:	0001883a 	nop
 80119b8:	e0bfff17 	ldw	r2,-4(fp)
 80119bc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80119c0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80119c4:	10000226 	beq	r2,zero,80119d0 <_exit+0x2c>
    ALT_SIM_FAIL();
 80119c8:	002af070 	cmpltui	zero,zero,43969
 80119cc:	00000106 	br	80119d4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80119d0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80119d4:	003fff06 	br	80119d4 <__alt_data_end+0xfc0119d4>
